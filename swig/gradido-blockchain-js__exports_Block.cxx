/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/gradido-blockchain-js.h"

/* Class: Block (_exports_Block) */
// jsnapi_getclass
Napi::Function _exports_Block_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_Block_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_Block_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_Block_inst>::DefineClass(env, "Block", symbolTable);
}

void _exports_Block_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_Block_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_Block_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("clone");
  members.insert({
    "clone",
      _exports_Block_templ::InstanceMethod("clone",
        &_exports_Block_templ::_wrap_Block_clone,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("size");
  members.insert({
    "size",
      _exports_Block_templ::InstanceMethod("size",
        &_exports_Block_templ::_wrap_Block_size,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("span");
  members.insert({
    "span",
      _exports_Block_templ::InstanceMethod("span",
        &_exports_Block_templ::_wrap_Block_span,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("data");
  members.insert({
    "data",
      _exports_Block_templ::InstanceMethod("data",
        &_exports_Block_templ::_wrap_Block__wrap_Block_data,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("convertToHex");
  members.insert({
    "convertToHex",
      _exports_Block_templ::InstanceMethod("convertToHex",
        &_exports_Block_templ::_wrap_Block_convertToHex,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("convertToBase64");
  members.insert({
    "convertToBase64",
      _exports_Block_templ::InstanceMethod("convertToBase64",
        &_exports_Block_templ::_wrap_Block__wrap_Block_convertToBase64,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copyAsString");
  members.insert({
    "copyAsString",
      _exports_Block_templ::InstanceMethod("copyAsString",
        &_exports_Block_templ::_wrap_Block_copyAsString,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("copyAsVector");
  members.insert({
    "copyAsVector",
      _exports_Block_templ::InstanceMethod("copyAsVector",
        &_exports_Block_templ::_wrap_Block_copyAsVector,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("calculateHash");
  members.insert({
    "calculateHash",
      _exports_Block_templ::InstanceMethod("calculateHash",
        &_exports_Block_templ::_wrap_Block_calculateHash,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isTheSame");
  members.insert({
    "isTheSame",
      _exports_Block_templ::InstanceMethod("isTheSame",
        &_exports_Block_templ::_wrap_Block__wrap_Block_isTheSame,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isEmpty");
  members.insert({
    "isEmpty",
      _exports_Block_templ::InstanceMethod("isEmpty",
        &_exports_Block_templ::_wrap_Block_isEmpty,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("equal");
  members.insert({
    "equal",
      _exports_Block_templ::InstanceMethod("equal",
        &_exports_Block_templ::_wrap_Block_equal,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("notEqual");
  members.insert({
    "notEqual",
      _exports_Block_templ::InstanceMethod("notEqual",
        &_exports_Block_templ::_wrap_Block_notEqual,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("lt");
  members.insert({
    "lt",
      _exports_Block_templ::InstanceMethod("lt",
        &_exports_Block_templ::_wrap_Block_lt,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("fromHex");
  staticMembers.insert({
    "fromHex",
      StaticMethod("fromHex",
        &_exports_Block_templ::_wrap_Block__wrap_Block_fromHex,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_static_function
  staticMembers.erase("fromBase64");
  staticMembers.insert({
    "fromBase64",
      StaticMethod("fromBase64",
        &_exports_Block_templ::_wrap_Block__wrap_Block_fromBase64,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

