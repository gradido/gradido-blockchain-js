/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/gradido-blockchain-js.h"

/* Class: Filter (_exports_Filter) */
// jsnapi_getclass
Napi::Function _exports_Filter_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_Filter_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_Filter_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_Filter_inst>::DefineClass(env, "Filter", symbolTable);
}

void _exports_Filter_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_Filter_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_Filter_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("minTransactionNr");
  members.insert({
    "minTransactionNr",
      _exports_Filter_templ::InstanceAccessor("minTransactionNr",
        &_exports_Filter_templ::_wrap_Filter_minTransactionNr_get,
        &_exports_Filter_templ::_wrap_Filter_minTransactionNr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("maxTransactionNr");
  members.insert({
    "maxTransactionNr",
      _exports_Filter_templ::InstanceAccessor("maxTransactionNr",
        &_exports_Filter_templ::_wrap_Filter_maxTransactionNr_get,
        &_exports_Filter_templ::_wrap_Filter_maxTransactionNr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("involvedPublicKey");
  members.insert({
    "involvedPublicKey",
      _exports_Filter_templ::InstanceAccessor("involvedPublicKey",
        &_exports_Filter_templ::_wrap_Filter_involvedPublicKey_get,
        &_exports_Filter_templ::_wrap_Filter_involvedPublicKey_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("searchDirection");
  members.insert({
    "searchDirection",
      _exports_Filter_templ::InstanceAccessor("searchDirection",
        &_exports_Filter_templ::_wrap_Filter_searchDirection_get,
        &_exports_Filter_templ::_wrap_Filter_searchDirection_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("pagination");
  members.insert({
    "pagination",
      _exports_Filter_templ::InstanceAccessor("pagination",
        &_exports_Filter_templ::_wrap_Filter_pagination_get,
        &_exports_Filter_templ::_wrap_Filter_pagination_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("coinCommunityId");
  members.insert({
    "coinCommunityId",
      _exports_Filter_templ::InstanceAccessor("coinCommunityId",
        &_exports_Filter_templ::_wrap_Filter_coinCommunityId_get,
        &_exports_Filter_templ::_wrap_Filter_coinCommunityId_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("timepointInterval");
  members.insert({
    "timepointInterval",
      _exports_Filter_templ::InstanceAccessor("timepointInterval",
        &_exports_Filter_templ::_wrap_Filter_timepointInterval_get,
        &_exports_Filter_templ::_wrap_Filter_timepointInterval_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("transactionType");
  members.insert({
    "transactionType",
      _exports_Filter_templ::InstanceAccessor("transactionType",
        &_exports_Filter_templ::_wrap_Filter_transactionType_get,
        &_exports_Filter_templ::_wrap_Filter_transactionType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_constant
  staticMembers.erase("LAST_TRANSACTION");
  staticMembers.insert({
    "LAST_TRANSACTION",
      StaticAccessor("LAST_TRANSACTION",
        &_exports_Filter_templ::_wrap_Filter_LAST_TRANSACTION_get,
        &JS_veto_set_static_variable,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_static_constant
  staticMembers.erase("ALL_TRANSACTIONS");
  staticMembers.insert({
    "ALL_TRANSACTIONS",
      StaticAccessor("ALL_TRANSACTIONS",
        &_exports_Filter_templ::_wrap_Filter_ALL_TRANSACTIONS_get,
        &JS_veto_set_static_variable,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

