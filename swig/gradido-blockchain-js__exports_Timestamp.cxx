/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/gradido-blockchain-js.h"

/* Class: Timestamp (_exports_Timestamp) */
// jsnapi_getclass
Napi::Function _exports_Timestamp_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_Timestamp_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_Timestamp_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_Timestamp_inst>::DefineClass(env, "Timestamp", symbolTable);
}

void _exports_Timestamp_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_Timestamp_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_Timestamp_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("getDate");
  members.insert({
    "getDate",
      _exports_Timestamp_templ::InstanceMethod("getDate",
        &_exports_Timestamp_templ::_wrap_Timestamp_getDate,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("getSeconds");
  members.insert({
    "getSeconds",
      _exports_Timestamp_templ::InstanceMethod("getSeconds",
        &_exports_Timestamp_templ::_wrap_Timestamp_getSeconds,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("getNanos");
  members.insert({
    "getNanos",
      _exports_Timestamp_templ::InstanceMethod("getNanos",
        &_exports_Timestamp_templ::_wrap_Timestamp_getNanos,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("equal");
  members.insert({
    "equal",
      _exports_Timestamp_templ::InstanceMethod("equal",
        &_exports_Timestamp_templ::_wrap_Timestamp_equal,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("lt");
  members.insert({
    "lt",
      _exports_Timestamp_templ::InstanceMethod("lt",
        &_exports_Timestamp_templ::_wrap_Timestamp__wrap_Timestamp_lt,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("gt");
  members.insert({
    "gt",
      _exports_Timestamp_templ::InstanceMethod("gt",
        &_exports_Timestamp_templ::_wrap_Timestamp__wrap_Timestamp_gt,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

