/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/gradido-blockchain-js.h"

/* Class: TransactionBody (_exports_TransactionBody) */
// jsnapi_getclass
Napi::Function _exports_TransactionBody_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_TransactionBody_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_TransactionBody_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_TransactionBody_inst>::DefineClass(env, "TransactionBody", symbolTable);
}

void _exports_TransactionBody_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_TransactionBody_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_TransactionBody_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("isTransfer");
  members.insert({
    "isTransfer",
      _exports_TransactionBody_templ::InstanceMethod("isTransfer",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_isTransfer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isCreation");
  members.insert({
    "isCreation",
      _exports_TransactionBody_templ::InstanceMethod("isCreation",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_isCreation,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isCommunityFriendsUpdate");
  members.insert({
    "isCommunityFriendsUpdate",
      _exports_TransactionBody_templ::InstanceMethod("isCommunityFriendsUpdate",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_isCommunityFriendsUpdate,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isRegisterAddress");
  members.insert({
    "isRegisterAddress",
      _exports_TransactionBody_templ::InstanceMethod("isRegisterAddress",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_isRegisterAddress,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isDeferredTransfer");
  members.insert({
    "isDeferredTransfer",
      _exports_TransactionBody_templ::InstanceMethod("isDeferredTransfer",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_isDeferredTransfer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isCommunityRoot");
  members.insert({
    "isCommunityRoot",
      _exports_TransactionBody_templ::InstanceMethod("isCommunityRoot",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_isCommunityRoot,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("getTransactionType");
  members.insert({
    "getTransactionType",
      _exports_TransactionBody_templ::InstanceMethod("getTransactionType",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_getTransactionType,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isPairing");
  members.insert({
    "isPairing",
      _exports_TransactionBody_templ::InstanceMethod("isPairing",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_isPairing,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isInvolved");
  members.insert({
    "isInvolved",
      _exports_TransactionBody_templ::InstanceMethod("isInvolved",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_isInvolved,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("getTransferAmount");
  members.insert({
    "getTransferAmount",
      _exports_TransactionBody_templ::InstanceMethod("getTransferAmount",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_getTransferAmount,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("getInvolvedAddresses");
  members.insert({
    "getInvolvedAddresses",
      _exports_TransactionBody_templ::InstanceMethod("getInvolvedAddresses",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_getInvolvedAddresses,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("memo");
  members.insert({
    "memo",
      _exports_TransactionBody_templ::InstanceAccessor("memo",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_memo_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_memo_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("createdAt");
  members.insert({
    "createdAt",
      _exports_TransactionBody_templ::InstanceAccessor("createdAt",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_createdAt_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_createdAt_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("versionNumber");
  members.insert({
    "versionNumber",
      _exports_TransactionBody_templ::InstanceAccessor("versionNumber",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_versionNumber_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_versionNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_TransactionBody_templ::InstanceAccessor("type",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_type_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("otherGroup");
  members.insert({
    "otherGroup",
      _exports_TransactionBody_templ::InstanceAccessor("otherGroup",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_otherGroup_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_otherGroup_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("transfer");
  members.insert({
    "transfer",
      _exports_TransactionBody_templ::InstanceAccessor("transfer",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_transfer_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_transfer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("creation");
  members.insert({
    "creation",
      _exports_TransactionBody_templ::InstanceAccessor("creation",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_creation_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_creation_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("communityFriendsUpdate");
  members.insert({
    "communityFriendsUpdate",
      _exports_TransactionBody_templ::InstanceAccessor("communityFriendsUpdate",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_communityFriendsUpdate_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_communityFriendsUpdate_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("registerAddress");
  members.insert({
    "registerAddress",
      _exports_TransactionBody_templ::InstanceAccessor("registerAddress",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_registerAddress_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_registerAddress_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("deferredTransfer");
  members.insert({
    "deferredTransfer",
      _exports_TransactionBody_templ::InstanceAccessor("deferredTransfer",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_deferredTransfer_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_deferredTransfer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("communityRoot");
  members.insert({
    "communityRoot",
      _exports_TransactionBody_templ::InstanceAccessor("communityRoot",
        &_exports_TransactionBody_templ::_wrap_TransactionBody_communityRoot_get,
        &_exports_TransactionBody_templ::_wrap_TransactionBody_communityRoot_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

