/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/gradido-blockchain-js.h"

/* Class: Passphrase (_exports_Passphrase) */
// jsnapi_getclass
Napi::Function _exports_Passphrase_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_Passphrase_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_Passphrase_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_Passphrase_inst>::DefineClass(env, "Passphrase", symbolTable);
}

void _exports_Passphrase_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_Passphrase_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_Passphrase_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("transform");
  members.insert({
    "transform",
      _exports_Passphrase_templ::InstanceMethod("transform",
        &_exports_Passphrase_templ::_wrap_Passphrase_transform,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("createClearPassphrase");
  members.insert({
    "createClearPassphrase",
      _exports_Passphrase_templ::InstanceMethod("createClearPassphrase",
        &_exports_Passphrase_templ::_wrap_Passphrase_createClearPassphrase,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("checkIfValid");
  members.insert({
    "checkIfValid",
      _exports_Passphrase_templ::InstanceMethod("checkIfValid",
        &_exports_Passphrase_templ::_wrap_Passphrase_checkIfValid,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("getString");
  members.insert({
    "getString",
      _exports_Passphrase_templ::InstanceMethod("getString",
        &_exports_Passphrase_templ::_wrap_Passphrase_getString,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("generate");
  staticMembers.insert({
    "generate",
      StaticMethod("generate",
        &_exports_Passphrase_templ::_wrap_Passphrase_generate,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_static_function
  staticMembers.erase("detectMnemonicWithKeyPair");
  staticMembers.insert({
    "detectMnemonicWithKeyPair",
      StaticMethod("detectMnemonicWithKeyPair",
        &_exports_Passphrase_templ::_wrap_Passphrase_detectMnemonicWithKeyPair,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_static_function
  staticMembers.erase("detectMnemonic");
  staticMembers.insert({
    "detectMnemonic",
      StaticMethod("detectMnemonic",
        &_exports_Passphrase_templ::_wrap_Passphrase_detectMnemonic,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_static_function
  staticMembers.erase("filter");
  staticMembers.insert({
    "filter",
      StaticMethod("filter",
        &_exports_Passphrase_templ::_wrap_Passphrase_filter,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

