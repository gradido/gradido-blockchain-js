/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#include "swig/gradido-blockchain-js.h"

/* Class: MemoryBlocks (_exports_MemoryBlocks) */
// jsnapi_getclass
Napi::Function _exports_MemoryBlocks_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_MemoryBlocks_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_MemoryBlocks_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_MemoryBlocks_inst>::DefineClass(env, "MemoryBlocks", symbolTable);
}

void _exports_MemoryBlocks_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_MemoryBlocks_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_MemoryBlocks_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_function
  members.erase("size");
  members.insert({
    "size",
      _exports_MemoryBlocks_templ::InstanceMethod("size",
        &_exports_MemoryBlocks_templ::_wrap_MemoryBlocks_size,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("capacity");
  members.insert({
    "capacity",
      _exports_MemoryBlocks_templ::InstanceMethod("capacity",
        &_exports_MemoryBlocks_templ::_wrap_MemoryBlocks_capacity,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("reserve");
  members.insert({
    "reserve",
      _exports_MemoryBlocks_templ::InstanceMethod("reserve",
        &_exports_MemoryBlocks_templ::_wrap_MemoryBlocks_reserve,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("isEmpty");
  members.insert({
    "isEmpty",
      _exports_MemoryBlocks_templ::InstanceMethod("isEmpty",
        &_exports_MemoryBlocks_templ::_wrap_MemoryBlocks_isEmpty,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("clear");
  members.insert({
    "clear",
      _exports_MemoryBlocks_templ::InstanceMethod("clear",
        &_exports_MemoryBlocks_templ::_wrap_MemoryBlocks_clear,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("add");
  members.insert({
    "add",
      _exports_MemoryBlocks_templ::InstanceMethod("add",
        &_exports_MemoryBlocks_templ::_wrap_MemoryBlocks_add,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("get");
  members.insert({
    "get",
      _exports_MemoryBlocks_templ::InstanceMethod("get",
        &_exports_MemoryBlocks_templ::_wrap_MemoryBlocks_get,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_register_member_function
  members.erase("set");
  members.insert({
    "set",
      _exports_MemoryBlocks_templ::InstanceMethod("set",
        &_exports_MemoryBlocks_templ::_wrap_MemoryBlocks_set,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

