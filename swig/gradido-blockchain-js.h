/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG JSE (https://www.swig.org).
 * Version 5.0.3
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGTYPESCRIPT




#define SWIG_VERSION 0x050003
#define SWIGJAVASCRIPT
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGINTERN
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGINTERN __attribute__ ((visibility("hidden")))
#   else
#     define SWIGINTERN
#   endif
# endif
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE static inline
#endif

/* force C linkage */
#ifdef __cplusplus
#define SWIGCLINKAGE extern "C"
#else
#define SWIGCLINKAGE
#endif

/* force C++ linkage */
#ifdef __cplusplus
#define SWIGCPPLINKAGE extern "C++"
#else
#define SWIGCPPLINKAGE
#endif

/* exporting methods */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#define SWIG_NAPI_FROM_DECL_ARGS(arg1)              (Napi::Env env, arg1)
#define SWIG_NAPI_FROM_CALL_ARGS(arg1)              (env, arg1)



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#if defined(_CPPUNWIND) || defined(__EXCEPTIONS)

#ifndef NAPI_CPP_EXCEPTIONS
#define NAPI_CPP_EXCEPTIONS
#endif

#else // defined(_CPPUNWIND) || defined(__EXCEPTIONS)

#ifndef NAPI_DISABLE_CPP_EXCEPTIONS
#define NAPI_DISABLE_CPP_EXCEPTIONS
#define NODE_ADDON_API_ENABLE_MAYBE
#endif

#endif // defined(_CPPUNWIND) || defined(__EXCEPTIONS)

// This gives us
// Branch Node.js v10.x - from v10.20.0
// Branch Node.js v12.x - from v12.17.0
// Everything from Node.js v14.0.0 on
// Our limiting feature is napi_set_instance_data
#ifndef NAPI_VERSION
#define NAPI_VERSION 6
#elif NAPI_VERSION < 6
#error NAPI_VERSION 6 is the minimum supported target (Node.js >=14, >=12.17, >=10.20)
#endif
#include <napi.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <assert.h>
#include <map>
#include <functional>
#include <algorithm>
#include <set>
#include <stdexcept>
#include <mutex>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGINTERNINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2);
/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb);

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb);
/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty);

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty);

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr);

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type);

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata);
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata);

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name);

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name);
/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz);
/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz);
/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz);
SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name);
SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz);
SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name);

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* ---------------------------------------------------------------------------
 * SWIG Node-API runtime : declarations
 * ---------------------------------------------------------------------------*/

/*
 * We support several forms:
 *
 * SWIG_Raise("Error message")
 * which creates an Error object with the error message
 *
 * SWIG_Raise(SWIG_TypeError, "Type error")
 * which creates the specified error type with the message
 *
 * SWIG_Raise(obj)
 * which throws the object itself
 *
 * SWIG_Raise(obj, "Exception const &", SWIGType_p_Exception)
 * which also throws the object itself and discards the unneeded extra type info
 *
 * These must be functions instead of macros to use the C++ overloading to
 * resolve the arguments
 */

SWIGRUNTIME Napi::Error SWIG_NAPI_NewError(Napi::Env env, int type, const char *msg);
SWIGRUNTIME inline Napi::Error SWIG_NAPI_NewError(Napi::Env env, const char *msg);
SWIGRUNTIME inline Napi::Error SWIG_NAPI_NewError(Napi::Env env, Napi::Value obj,
        const char *msg = SWIG_NULLPTR, swig_type_info *info = SWIG_NULLPTR);
SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, const char *msg);
SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg);
SWIGRUNTIME void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = SWIG_NULLPTR, swig_type_info *info = SWIG_NULLPTR);
SWIGRUNTIME bool SWIG_NAPI_IsWrappedObject(Napi::Env env, Napi::Object v);
SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags);
SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr);
SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags);
SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags);
SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type);
SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type);
SWIGRUNTIME
Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj);

// Node-API specific features
using SWIG_NAPI_Finalizer = std::function<void()>;
SWIGRUNTIME int SWIG_NAPI_SetFinalizer(Napi::Env env, Napi::Value val, SWIG_NAPI_Finalizer *finalizer);
SWIGRUNTIME void SWIG_NAPI_SetInstanceData(Napi::Env env, void *module_instance_data);
SWIGRUNTIME void *SWIG_NAPI_GetInstanceData(Napi::Env env);

void JS_veto_set_variable(const Napi::CallbackInfo &info);

#define SWIG_exception(code, msg)               SWIG_NAPI_Raise(env, code, msg)

// Used instead of SWIG_NAPI_Raise when rejecting a Promise
// in the main thread (during initialization/parsing)
#define SWIG_NAPI_Reject(env, code, msg)        do {                          \
      SWIG_NAPI_deferred.Reject(SWIG_NAPI_NewError(env, code, msg).Value());  \
      SWIG_NAPI_deferred_finalized = true;                                    \
      return SWIG_NAPI_Status::REJECT;                                        \
    } while (0)

#define SWIG_NAPI_ASSERT_NOTNULL_ENV            assert((napi_env)env != SWIG_NULLPTR)

// The two methods of handling exceptions
#ifdef NAPI_CPP_EXCEPTIONS

#define SWIG_Error(code, msg)                   SWIG_NAPI_Raise(env, code, msg)
#define NAPI_CHECK_MAYBE(maybe)                 (maybe)
#define NAPI_CHECK_RESULT(maybe, result)        (result = maybe)
#define SWIG_fail

#else // NAPI_CPP_EXCEPTIONS

#define SWIG_Error(code, msg)     do { SWIG_NAPI_Raise(env, code, msg); SWIG_fail; } while (0)
#define NAPI_CHECK_MAYBE(maybe)   do { if (maybe.IsNothing()) SWIG_fail; } while (0)
#define NAPI_CHECK_RESULT(maybe, result)          \
        do {                                      \
                auto r = maybe;                   \
                if (r.IsNothing()) SWIG_fail;     \
                result = r.Unwrap();              \
        } while (0)
#define SWIG_fail                 goto fail

#endif // NAPI_CPP_EXCEPTIONS

/* ---------------------------------------------------------------------------
 * Declarations for the SWIG language-agnostic calls
 * ---------------------------------------------------------------------------*/

#define SWIG_ConvertPtr(obj, ptr, info, flags)          SWIG_NAPI_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)            SWIG_NAPI_NewPointerObj(env, ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_NAPI_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_NAPI_NewPointerObj(env, thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_NAPI_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NAPI_NewPointerObj(env, ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)                   SWIG_NAPI_GetInstancePtr(obj, ptr)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_NAPI_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NAPI_NewPackedObj(env, ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Module data per V8 isolate
 * ---------------------------------------------------------------------------*/

/* ---------------------------------------------------------------------------
 * Module data per V8 isolate
 * ---------------------------------------------------------------------------*/

struct EnvInstanceData {
  Napi::Env env;
  // Base class per-environment constructor, used to check
  // if a JS object is a SWIG wrapper
  Napi::FunctionReference *SWIG_NAPI_ObjectWrapCtor;
  Napi::FunctionReference *SWIG_NAPI_PackedObjectWrapCtor;
  // Per-environment wrapper constructors, indexed by the number in
  // swig_type->clientdata
  Napi::FunctionReference **ctor;
  swig_module_info *swig_module;
  void *module_instance_data;
  EnvInstanceData(Napi::Env, swig_module_info *);
  ~EnvInstanceData();
};

typedef size_t SWIG_NAPI_ClientData;

// A lock is a pair of two lambdas for locking and unlocking
typedef std::function<void()> SWIG_Async_Lock_Func;
typedef std::pair<SWIG_Async_Lock_Func, SWIG_Async_Lock_Func> SWIG_Lock;
// An ordered list of locks
typedef std::map<void *, SWIG_Lock> SWIG_Locks_List;

// RAII guard, uses a reference to an allocated lock list
class SWIG_Guard {
private:
  SWIG_Locks_List &list;
  bool locked;
public:
  SWIG_Guard(SWIG_Locks_List &_list);
  virtual ~SWIG_Guard();
  inline void lock() {
    for (auto const &lock : list) {
      lock.second.first();
    }
    locked = true;
  }
};

/* ---------------------------------------------------------------------------
 * Base class for all wrapped objects,
 * used directly when unwrapping unknown objects
 * ---------------------------------------------------------------------------*/
template <typename SWIG_OBJ_WRAP>
class SWIG_NAPI_ObjectWrap_templ : public Napi::ObjectWrap<SWIG_OBJ_WRAP> {
  public:
    void *self;
    bool owned;
    size_t size;
    swig_type_info *info;
    std::function<void()> *finalizer; 
    SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info);
    SWIG_NAPI_ObjectWrap_templ(bool, const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info),
        self(SWIG_NULLPTR),
        owned(true),
        size(0),
        info(SWIG_NULLPTR),
        finalizer(nullptr),
        _lock() {}
    virtual ~SWIG_NAPI_ObjectWrap_templ() = default;

    static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
    void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);

    inline void lock() { _lock.lock(); };
    inline void unlock() { _lock.unlock(); };

    Napi::Value ToString(const Napi::CallbackInfo &info);

  protected:
    void SWIG_Finalize();

  private:
    // Every wrapped object has an associated async lock
    std::mutex _lock;
};

template <typename SWIG_OBJ_WRAP>
SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), size(0), info(SWIG_NULLPTR), finalizer(SWIG_NULLPTR), _lock() { 
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object of unknown type in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
  } else {
    SWIG_Error(SWIG_ERROR, "This constructor is not accessible from JS");
  }
  return;
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

template <typename SWIG_OBJ_WRAP>
Napi::Value SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::ToString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  static char repr[128];
  const char *name = SWIG_TypePrettyName(this->info);
  snprintf(repr, sizeof(repr), "{SwigObject %s (%s) at %p %s}",
    this->info ? this->info->name : "unknown",
    name ? name : "unknown",
    this->self,
    this->owned ? "[owned]" : "[copy]");
  return Napi::String::New(env, repr);
}

template <typename SWIG_OBJ_WRAP>
void SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_Finalize() {
  if (this->finalizer) {
    (*this->finalizer)();
    delete this->finalizer;
    this->finalizer = SWIG_NULLPTR;
    this->owned = false;
    this->self = SWIG_NULLPTR;
  }
}

// Instantiated version of the above CRTP class
class SWIG_NAPI_ObjectWrap_inst : public SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst> {
public:
  using SWIG_NAPI_ObjectWrap_templ::SWIG_NAPI_ObjectWrap_templ;
  ~SWIG_NAPI_ObjectWrap_inst();
  static Napi::Function GetClass(Napi::Env);
  static void GetMembers(
    Napi::Env,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
  );
};

// Special class used for packed (opaque) objects, has a special destructor
class SWIG_NAPI_PackedObjectWrap_inst : public SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_PackedObjectWrap_inst> {
public:
  using SWIG_NAPI_ObjectWrap_templ::SWIG_NAPI_ObjectWrap_templ;
  ~SWIG_NAPI_PackedObjectWrap_inst();
  static Napi::Function GetClass(Napi::Env);
  static void GetMembers(
    Napi::Env,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
  );
};

SWIGCLINKAGE SWIGINTERN swig_type_info *swig_type_initial[];
SWIGCLINKAGE SWIGINTERN swig_cast_info *swig_cast_initial[];
#define SWIGTYPE_p_AuthenticatedEncryption swig_types[0]
#define SWIGTYPE_p_DecryptionException swig_types[1]
#define SWIGTYPE_p_EncryptionException swig_types[2]
#define SWIGTYPE_p_EncryptionKeyException swig_types[3]
#define SWIGTYPE_p_GradidoUnit swig_types[4]
#define SWIGTYPE_p_KeyPairEd25519 swig_types[5]
#define SWIGTYPE_p_KeyPairEd25519Ex swig_types[6]
#define SWIGTYPE_p_MissingEncryptionException swig_types[7]
#define SWIGTYPE_p_Passphrase swig_types[8]
#define SWIGTYPE_p_Profiler swig_types[9]
#define SWIGTYPE_p_SecretKeyCryptography swig_types[10]
#define SWIGTYPE_p_SecretKeyCryptographyException swig_types[11]
#define SWIGTYPE_p_TimepointInterval swig_types[12]
#define SWIGTYPE_p_char swig_types[13]
#define SWIGTYPE_p_date__month swig_types[14]
#define SWIGTYPE_p_date__year swig_types[15]
#define SWIGTYPE_p_difference_type swig_types[16]
#define SWIGTYPE_p_first_type swig_types[17]
#define SWIGTYPE_p_gradido__GradidoTransactionBuilder swig_types[18]
#define SWIGTYPE_p_gradido__TransactionBodyBuilder swig_types[19]
#define SWIGTYPE_p_gradido__blockchain__Abstract swig_types[20]
#define SWIGTYPE_p_gradido__blockchain__AbstractProvider swig_types[21]
#define SWIGTYPE_p_gradido__blockchain__Filter swig_types[22]
#define SWIGTYPE_p_gradido__blockchain__FilterBuilder swig_types[23]
#define SWIGTYPE_p_gradido__blockchain__InMemory swig_types[24]
#define SWIGTYPE_p_gradido__blockchain__InMemoryProvider swig_types[25]
#define SWIGTYPE_p_gradido__blockchain__Pagination swig_types[26]
#define SWIGTYPE_p_gradido__blockchain__TransactionEntry swig_types[27]
#define SWIGTYPE_p_gradido__data__CommunityFriendsUpdate swig_types[28]
#define SWIGTYPE_p_gradido__data__CommunityRoot swig_types[29]
#define SWIGTYPE_p_gradido__data__ConfirmedTransaction swig_types[30]
#define SWIGTYPE_p_gradido__data__GradidoCreation swig_types[31]
#define SWIGTYPE_p_gradido__data__GradidoDeferredTransfer swig_types[32]
#define SWIGTYPE_p_gradido__data__GradidoTransaction swig_types[33]
#define SWIGTYPE_p_gradido__data__GradidoTransfer swig_types[34]
#define SWIGTYPE_p_gradido__data__RegisterAddress swig_types[35]
#define SWIGTYPE_p_gradido__data__SignatureMap swig_types[36]
#define SWIGTYPE_p_gradido__data__SignaturePair swig_types[37]
#define SWIGTYPE_p_gradido__data__Timestamp swig_types[38]
#define SWIGTYPE_p_gradido__data__TimestampSeconds swig_types[39]
#define SWIGTYPE_p_gradido__data__TransactionBody swig_types[40]
#define SWIGTYPE_p_gradido__data__TransferAmount swig_types[41]
#define SWIGTYPE_p_gradido__interaction__calculateAccountBalance__Context swig_types[42]
#define SWIGTYPE_p_gradido__interaction__deserialize__Context swig_types[43]
#define SWIGTYPE_p_gradido__interaction__serialize__Context swig_types[44]
#define SWIGTYPE_p_gradido__interaction__toJson__Context swig_types[45]
#define SWIGTYPE_p_gradido__interaction__validate__Context swig_types[46]
#define SWIGTYPE_p_int swig_types[47]
#define SWIGTYPE_p_long_long swig_types[48]
#define SWIGTYPE_p_memory__Block swig_types[49]
#define SWIGTYPE_p_second_type swig_types[50]
#define SWIGTYPE_p_short swig_types[51]
#define SWIGTYPE_p_signed_char swig_types[52]
#define SWIGTYPE_p_size_type swig_types[53]
#define SWIGTYPE_p_std__chrono__system_clock__duration swig_types[54]
#define SWIGTYPE_p_std__chrono__time_pointT_std__chrono__system_clock_t swig_types[55]
#define SWIGTYPE_p_std__listT_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t_t swig_types[56]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t swig_types[57]
#define SWIGTYPE_p_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t swig_types[58]
#define SWIGTYPE_p_std__shared_ptrT_KeyPairEd25519Ex_t swig_types[59]
#define SWIGTYPE_p_std__shared_ptrT_KeyPairEd25519_t swig_types[60]
#define SWIGTYPE_p_std__shared_ptrT_Passphrase_t swig_types[61]
#define SWIGTYPE_p_std__shared_ptrT_SecretKeyCryptography_t swig_types[62]
#define SWIGTYPE_p_std__shared_ptrT_gradido__blockchain__TransactionEntry_t swig_types[63]
#define SWIGTYPE_p_std__shared_ptrT_gradido__data__ConfirmedTransaction_const_t swig_types[64]
#define SWIGTYPE_p_std__shared_ptrT_gradido__data__ConfirmedTransaction_t swig_types[65]
#define SWIGTYPE_p_std__shared_ptrT_gradido__data__GradidoTransaction_const_t swig_types[66]
#define SWIGTYPE_p_std__shared_ptrT_gradido__data__TransactionBody_const_t swig_types[67]
#define SWIGTYPE_p_std__shared_ptrT_memory__Block_const_t swig_types[68]
#define SWIGTYPE_p_std__shared_ptrT_memory__Block_t swig_types[69]
#define SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t swig_types[70]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t swig_types[71]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_const_t_t swig_types[72]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t swig_types[73]
#define SWIGTYPE_p_unsigned_char swig_types[74]
#define SWIGTYPE_p_unsigned_int swig_types[75]
#define SWIGTYPE_p_unsigned_long_long swig_types[76]
#define SWIGTYPE_p_unsigned_short swig_types[77]
#define SWIGTYPE_p_value_type swig_types[78]
SWIGCLINKAGE SWIGINTERN swig_type_info *swig_types[];
SWIGCLINKAGE SWIGINTERN swig_module_info swig_module;
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#define SWIG_FromCharPtrAndSize(cptr, size) SWIG_Env_FromCharPtrAndSize(env, cptr, size)
#define SWIG_FromCharPtr(cptr)              SWIG_Env_FromCharPtrAndSize(env, cptr, cptr ? strlen(cptr) : 0)


#include <stdexcept>


#include <assert.h>


#define SWIG_GetModule(clientdata)                SWIG_NAPI_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_NAPI_SetModule(clientdata, pointer)
#define SWIG_INIT_CLIENT_DATA_TYPE                Napi::Env

SWIGRUNTIME void
SWIG_NAPI_SetModule(Napi::Env env, swig_module_info *swig_module);
SWIGRUNTIME swig_module_info *
SWIG_NAPI_GetModule(Napi::Env env);



Napi::Object Init(Napi::Env env, Napi::Object exports);


#include "gradido_blockchain/const.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <string_view>


#include <stdint.h>		// Use the C99 official header


#include <vector>
#include <stdexcept>


#include <utility>


  #include "gradido_blockchain/lib/TimepointInterval.h"


SWIGINTERN
Napi::Value SWIG_From_bool(Napi::Env env, bool val);


  #include "gradido_blockchain/lib/Profiler.h"


SWIGINTERNINLINE
Napi::Value SWIG_From_double(Napi::Env env, double val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERNINLINE Napi::Value
SWIG_Env_FromCharPtrAndSize(Napi::Env env, const char* carray, size_t size)
{
  if (carray) {
    Napi::String js_str = Napi::String::New(env, carray, size);
    return js_str;
  } else {
    return env.Null();
  }
}


SWIGINTERNINLINE Napi::Value
SWIG_From_std_string  SWIG_NAPI_FROM_DECL_ARGS(const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE
Napi::Value SWIG_From_int(Napi::Env env, int val)
{
  return Napi::Number::New(env, val);
}


#include "gradido_blockchain/memory/Block.h"


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (Napi::Value obj, unsigned long *val);


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (Napi::Value obj, unsigned long long *val);
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (Napi::Value obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


SWIGINTERN
int SWIG_AsVal_int (Napi::Value valRef, int* val);

SWIGINTERNINLINE std::vector< std::shared_ptr< memory::Block > >::const_reference std_vector_Sl_std_shared_ptr_Sl_memory_Block_Sg__Sg__get(std::vector< std::shared_ptr< memory::Block > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERNINLINE void std_vector_Sl_std_shared_ptr_Sl_memory_Block_Sg__Sg__set(std::vector< std::shared_ptr< memory::Block > > *self,int i,std::vector< std::shared_ptr< memory::Block > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERNINLINE swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Napi::Value valRef, char** cptr, size_t* psize, int *alloc);


SWIGCLINKAGE int
SWIG_AsPtr_std_string (Napi::Value obj, std::string **val);


#include "gradido_blockchain/crypto/CryptoConfig.h"


// helper for initalizing Crypto Keys
//! \param appSecret app secret as app wide salt for generating encryption key for password encryption
//! \param serverCryptoKey server shorthash, exactly 16 Bytes long, 32 Character in Hex Format, used for shorthash as salt, for example password encryption key hash
static void loadCryptoKeys(memory::BlockPtr cryptoAppSecret, memory::BlockPtr serverCryptoKey) {
  CryptoConfig::g_CryptoAppSecret = cryptoAppSecret;
  if (!serverCryptoKey || serverCryptoKey->size() != crypto_shorthash_KEYBYTES) {
    throw std::runtime_error("crypto.server_key hasn't correct size or isn't valid hex");
  }
  CryptoConfig::g_ServerCryptoKey = serverCryptoKey;
}

// js_global_declaration
Napi::Value _wrap_loadCryptoKeys(const Napi::CallbackInfo &info);

#include "gradido_blockchain/crypto/Passphrase.h"


//using namespace gradido;
#include "gradido_blockchain/crypto/SecretKeyCryptography.h"


#include "gradido_blockchain/crypto/KeyPairEd25519.h"
#include "gradido_blockchain/crypto/KeyPairEd25519Ex.h"


SWIGINTERN
int SWIG_AsVal_unsigned_SS_int (Napi::Value valRef, unsigned int* val);


#include "gradido_blockchain/crypto/AuthenticatedEncryption.h"


#include "gradido_blockchain/crypto/SealedBoxes.h"

// js_global_declaration
Napi::Value _wrap_SealedBoxEncrypt(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value _wrap_SealedBoxes__wrap_SealedBoxDecrypt(const Napi::CallbackInfo &info);

#include "gradido_blockchain/GradidoUnit.h"


SWIGINTERN
int SWIG_AsVal_double (Napi::Value obj, double *val);


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
Napi::Value SWIG_From_long_SS_long(Napi::Env env, long long val)
{
  return Napi::Number::New(env, val);
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_long_SS_long (Napi::Value obj, long long* val);
#endif


#include "gradido_blockchain/data/ConfirmedTransaction.h"

SWIGINTERNINLINE std::vector< gradido::data::SignaturePair >::const_reference std_vector_Sl_gradido_data_SignaturePair_Sg__get(std::vector< gradido::data::SignaturePair > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERNINLINE void std_vector_Sl_gradido_data_SignaturePair_Sg__set(std::vector< gradido::data::SignaturePair > *self,int i,std::vector< gradido::data::SignaturePair >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN
int SWIG_AsVal_bool (Napi::Value obj, bool *val);


SWIGINTERNINLINE
Napi::Value SWIG_From_unsigned_SS_int(Napi::Env env, unsigned int val)
{
  return Napi::Number::New(env, val);
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
Napi::Value SWIG_From_unsigned_SS_long_SS_long(Napi::Env env, unsigned long long val)
{
  return Napi::Number::New(env, val);
}
#endif


#include "gradido_blockchain/TransactionBodyBuilder.h"


#include "gradido_blockchain/GradidoTransactionBuilder.h"


#include "gradido_blockchain/interaction/deserialize/Type.h"
#include "gradido_blockchain/interaction/deserialize/Exceptions.h"
#include "gradido_blockchain/interaction/deserialize/Context.h"


#include "gradido_blockchain/interaction/serialize/Exceptions.h"
#include "gradido_blockchain/interaction/serialize/Context.h"


#include "gradido_blockchain/blockchain/TransactionEntry.h"

SWIGINTERNINLINE std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::const_reference std_vector_Sl_std_shared_ptr_Sl_gradido_blockchain_TransactionEntry_Sg__Sg__get(std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERNINLINE void std_vector_Sl_std_shared_ptr_Sl_gradido_blockchain_TransactionEntry_Sg__Sg__set(std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *self,int i,std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "gradido_blockchain/blockchain/FilterResult.h"   
#include "gradido_blockchain/blockchain/Pagination.h"   
#include "gradido_blockchain/blockchain/SearchDirection.h"    
#include "gradido_blockchain/blockchain/Filter.h"
#include "gradido_blockchain/blockchain/FilterBuilder.h"


#include "gradido_blockchain/blockchain/InMemory.h"


#include "gradido_blockchain/blockchain/InMemoryProvider.h"

SWIGINTERNINLINE std::shared_ptr< gradido::blockchain::InMemory > gradido_blockchain_InMemoryProvider_getBlockchain(gradido::blockchain::InMemoryProvider *self,std::string_view communityId){
        return std::dynamic_pointer_cast<gradido::blockchain::InMemory>(self->findBlockchain(communityId));
    }

#include "gradido_blockchain/interaction/toJson/Context.h"


#include "gradido_blockchain/interaction/calculateAccountBalance/Context.h"


#include "gradido_blockchain/interaction/validate/Type.h"
#include "gradido_blockchain/interaction/validate/Exceptions.h"
#include "gradido_blockchain/interaction/validate/Context.h"


#define SWIG_NAPI_INIT gradido_initialize


// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TimepointInterval_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TimepointInterval_templ(const Napi::CallbackInfo &);
_exports_TimepointInterval_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TimepointInterval__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TimepointInterval__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TimepointInterval__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimepointInterval_getStartDate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimepointInterval_getEndDate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimepointInterval_isEmpty(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimepointInterval_isInsideInterval__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimepointInterval_isInsideInterval__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimepointInterval__wrap_TimepointInterval_isInsideInterval(const Napi::CallbackInfo &);
virtual ~_exports_TimepointInterval_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_TimepointInterval_inst : public _exports_TimepointInterval_templ<_exports_TimepointInterval_inst> {
public:
  using _exports_TimepointInterval_templ::_exports_TimepointInterval_templ;
  virtual ~_exports_TimepointInterval_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TimepointInterval_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TimepointInterval_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_Profiler_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_Profiler_templ(const Napi::CallbackInfo &);
_exports_Profiler_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Profiler__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Profiler__SWIG_1(const Napi::CallbackInfo &);
virtual ~_exports_Profiler_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_Profiler_reset(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Profiler_millis(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Profiler_micros(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Profiler_nanos(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Profiler_seconds(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Profiler_string(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_Profiler_inst : public _exports_Profiler_templ<_exports_Profiler_inst> {
public:
  using _exports_Profiler_templ::_exports_Profiler_templ;
  virtual ~_exports_Profiler_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_Profiler_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_Profiler_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// js_global_declaration
Napi::Value exports_AddressType_NONE_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_AddressType_COMMUNITY_HUMAN_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_AddressType_COMMUNITY_GMW_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_AddressType_COMMUNITY_AUF_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_AddressType_COMMUNITY_PROJECT_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_AddressType_SUBACCOUNT_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_AddressType_CRYPTO_ACCOUNT_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_CrossGroupType_LOCAL_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_CrossGroupType_INBOUND_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_CrossGroupType_OUTBOUND_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_CrossGroupType_CROSS_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_TransactionType_NONE_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_TransactionType_CREATION_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_TransactionType_TRANSFER_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_TransactionType_COMMUNITY_FRIENDS_UPDATE_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_TransactionType_REGISTER_ADDRESS_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_TransactionType_DEFERRED_TRANSFER_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_TransactionType_COMMUNITY_ROOT_get(const Napi::CallbackInfo &info);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_MemoryBlocks_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_MemoryBlocks_templ(const Napi::CallbackInfo &);
_exports_MemoryBlocks_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_MemoryBlocks__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_MemoryBlocks__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_MemoryBlocks__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlocks_size(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlocks_capacity(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlocks_reserve(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlocks_isEmpty(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlocks_clear(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlocks_add(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlocks_get(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlocks_set(const Napi::CallbackInfo &);
virtual ~_exports_MemoryBlocks_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_MemoryBlocks_inst : public _exports_MemoryBlocks_templ<_exports_MemoryBlocks_inst> {
public:
  using _exports_MemoryBlocks_templ::_exports_MemoryBlocks_templ;
  virtual ~_exports_MemoryBlocks_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_MemoryBlocks_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_MemoryBlocks_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_MemoryBlock_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_MemoryBlock_templ(const Napi::CallbackInfo &);
_exports_MemoryBlock_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_MemoryBlock__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_MemoryBlock__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_MemoryBlock__SWIG_2(const Napi::CallbackInfo &);
virtual ~_exports_MemoryBlock_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_size(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_data(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_convertToHex(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_convertToBase64__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_convertToBase64__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock__wrap_MemoryBlock_convertToBase64(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_copyAsString(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_calculateHash(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_MemoryBlock_fromHex(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_MemoryBlock_fromBase64__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_MemoryBlock_fromBase64__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_MemoryBlock__wrap_MemoryBlock_fromBase64(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_isEmpty(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_notEqual(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_MemoryBlock_lt(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_MemoryBlock_inst : public _exports_MemoryBlock_templ<_exports_MemoryBlock_inst> {
public:
  using _exports_MemoryBlock_templ::_exports_MemoryBlock_templ;
  virtual ~_exports_MemoryBlock_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_MemoryBlock_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_MemoryBlock_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// js_global_declaration
Napi::Value exports_MnemonicType_GRADIDO_BOOK_GERMAN_RANDOM_ORDER_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_MnemonicType_GRADIDO_BOOK_GERMAN_RANDOM_ORDER_FIXED_CASES_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_MnemonicType_BIP0039_SORTED_ORDER_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_MnemonicType_MAX_get(const Napi::CallbackInfo &info);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_Passphrase_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_Passphrase_templ(const Napi::CallbackInfo &);
_exports_Passphrase_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Passphrase(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_Passphrase_generate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_Passphrase_detectMnemonicWithKeyPair(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_Passphrase_detectMnemonic(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Passphrase_transform(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Passphrase_createClearPassphrase(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_Passphrase_filter(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Passphrase_checkIfValid(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Passphrase_getString(const Napi::CallbackInfo &);
virtual ~_exports_Passphrase_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_Passphrase_inst : public _exports_Passphrase_templ<_exports_Passphrase_inst> {
public:
  using _exports_Passphrase_templ::_exports_Passphrase_templ;
  virtual ~_exports_Passphrase_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_Passphrase_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_Passphrase_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_SecretKeyCryptography_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_SecretKeyCryptography_templ(const Napi::CallbackInfo &);
_exports_SecretKeyCryptography_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SecretKeyCryptography__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SecretKeyCryptography__SWIG_1(const Napi::CallbackInfo &);
virtual ~_exports_SecretKeyCryptography_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_SecretKeyCryptography_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SecretKeyCryptography_hasKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SecretKeyCryptography_createKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SecretKeyCryptography_encrypt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SecretKeyCryptography_decrypt(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_SecretKeyCryptography_inst : public _exports_SecretKeyCryptography_templ<_exports_SecretKeyCryptography_inst> {
public:
  using _exports_SecretKeyCryptography_templ::_exports_SecretKeyCryptography_templ;
  virtual ~_exports_SecretKeyCryptography_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_SecretKeyCryptography_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_SecretKeyCryptography_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// js_global_declaration
Napi::Value exports_Ed25519DerivationType_SOFT_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_Ed25519DerivationType_HARD_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_ED25519_CHAIN_CODE_SIZE_get(const Napi::CallbackInfo &info);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_KeyPairEd25519_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_KeyPairEd25519_templ(const Napi::CallbackInfo &);
_exports_KeyPairEd25519_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_KeyPairEd25519__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_KeyPairEd25519__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_KeyPairEd25519__SWIG_2(const Napi::CallbackInfo &);
virtual ~_exports_KeyPairEd25519_templ();
// jsnapi_class_method_declaration
static Napi::Value _wrap_KeyPairEd25519_create(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_KeyPairEd25519_calculatePublicKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_deriveChild(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_KeyPairEd25519_getDerivationType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_sign__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_sign__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_sign__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519__wrap_KeyPairEd25519_sign(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_verify__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_verify__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519__wrap_KeyPairEd25519_verify(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_is3rdHighestBitClear(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_getPublicKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_getChainCode(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_isTheSame__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_isTheSame__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519__wrap_KeyPairEd25519_isTheSame(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_notEqual(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_hasPrivateKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519_getCryptedPrivKey(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_KeyPairEd25519_inst : public _exports_KeyPairEd25519_templ<_exports_KeyPairEd25519_inst> {
public:
  using _exports_KeyPairEd25519_templ::_exports_KeyPairEd25519_templ;
  virtual ~_exports_KeyPairEd25519_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_KeyPairEd25519_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_KeyPairEd25519_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_KeyPairEd25519Ex_templ : public _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP> {
public:
  _exports_KeyPairEd25519Ex_templ(const Napi::CallbackInfo &);
_exports_KeyPairEd25519Ex_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_KeyPairEd25519Ex(const Napi::CallbackInfo &);
virtual ~_exports_KeyPairEd25519Ex_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519Ex_sign(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_KeyPairEd25519Ex_isChildOf(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_KeyPairEd25519Ex_inst : public _exports_KeyPairEd25519Ex_templ<_exports_KeyPairEd25519Ex_inst> {
public:
  using _exports_KeyPairEd25519Ex_templ::_exports_KeyPairEd25519Ex_templ;
  virtual ~_exports_KeyPairEd25519Ex_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_KeyPairEd25519Ex_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_KeyPairEd25519Ex_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_AuthenticatedEncryption_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_AuthenticatedEncryption_templ(const Napi::CallbackInfo &);
_exports_AuthenticatedEncryption_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_AuthenticatedEncryption__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_AuthenticatedEncryption__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_AuthenticatedEncryption__SWIG_2(const Napi::CallbackInfo &);
virtual ~_exports_AuthenticatedEncryption_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_encrypt__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_encrypt__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_encrypt__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_encrypt__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption__wrap_AuthenticatedEncryption_encrypt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_decrypt__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_decrypt__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption__wrap_AuthenticatedEncryption_decrypt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_precalculateSharedSecret(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_removePrecalculatedSharedSecret(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_mPubkey_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_AuthenticatedEncryption_mPubkey_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_getPublicKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_getPrivateKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_AuthenticatedEncryption_hasPrivateKey(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_AuthenticatedEncryption_inst : public _exports_AuthenticatedEncryption_templ<_exports_AuthenticatedEncryption_inst> {
public:
  using _exports_AuthenticatedEncryption_templ::_exports_AuthenticatedEncryption_templ;
  virtual ~_exports_AuthenticatedEncryption_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_AuthenticatedEncryption_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_AuthenticatedEncryption_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_method_declaration
Napi::Value _wrap_SealedBoxDecrypt__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SealedBoxDecrypt__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_GradidoUnit_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_GradidoUnit_templ(const Napi::CallbackInfo &);
_exports_GradidoUnit_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoUnit__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoUnit__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoUnit__SWIG_2(const Napi::CallbackInfo &);
virtual ~_exports_GradidoUnit_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_toString(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_getGradidoCent(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_value(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_add(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_sub(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_mul(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_gt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_gte(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_lt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_lte(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_notEqual(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_GradidoUnit_calculateDecayDirect(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_calculateDecay__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit_calculateDecay__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoUnit__wrap_GradidoUnit_calculateDecay(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_GradidoUnit_calculateDecayDurationSeconds(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_GradidoUnit_zero(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_GradidoUnit_inst : public _exports_GradidoUnit_templ<_exports_GradidoUnit_inst> {
public:
  using _exports_GradidoUnit_templ::_exports_GradidoUnit_templ;
  virtual ~_exports_GradidoUnit_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_GradidoUnit_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_GradidoUnit_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_SignaturePairs_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_SignaturePairs_templ(const Napi::CallbackInfo &);
_exports_SignaturePairs_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignaturePairs__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignaturePairs__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignaturePairs__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePairs_size(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePairs_capacity(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePairs_reserve(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePairs_isEmpty(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePairs_clear(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePairs_add(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePairs_get(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePairs_set(const Napi::CallbackInfo &);
virtual ~_exports_SignaturePairs_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_SignaturePairs_inst : public _exports_SignaturePairs_templ<_exports_SignaturePairs_inst> {
public:
  using _exports_SignaturePairs_templ::_exports_SignaturePairs_templ;
  virtual ~_exports_SignaturePairs_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_SignaturePairs_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_SignaturePairs_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TransferAmount_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TransferAmount_templ(const Napi::CallbackInfo &);
_exports_TransferAmount_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransferAmount__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransferAmount__SWIG_1(const Napi::CallbackInfo &);
virtual ~_exports_TransferAmount_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_TransferAmount_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransferAmount_getPubkey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransferAmount_getAmount(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransferAmount_getCommunityId(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_TransferAmount_inst : public _exports_TransferAmount_templ<_exports_TransferAmount_inst> {
public:
  using _exports_TransferAmount_templ::_exports_TransferAmount_templ;
  virtual ~_exports_TransferAmount_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TransferAmount_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TransferAmount_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TimestampSeconds_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TimestampSeconds_templ(const Napi::CallbackInfo &);
_exports_TimestampSeconds_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TimestampSeconds__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TimestampSeconds__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TimestampSeconds__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimestampSeconds_getDate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimestampSeconds_getSeconds(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimestampSeconds_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimestampSeconds_notEqual(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimestampSeconds_lt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimestampSeconds_lte(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimestampSeconds_gt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimestampSeconds_gte(const Napi::CallbackInfo &);
virtual ~_exports_TimestampSeconds_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_TimestampSeconds_inst : public _exports_TimestampSeconds_templ<_exports_TimestampSeconds_inst> {
public:
  using _exports_TimestampSeconds_templ::_exports_TimestampSeconds_templ;
  virtual ~_exports_TimestampSeconds_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TimestampSeconds_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TimestampSeconds_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_Timestamp_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_Timestamp_templ(const Napi::CallbackInfo &);
_exports_Timestamp_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Timestamp__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Timestamp__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Timestamp__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp_getDate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp_getSeconds(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp_getNanos(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp_lt__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp_gt__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp_lt__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp__wrap_Timestamp_lt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp_gt__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Timestamp__wrap_Timestamp_gt(const Napi::CallbackInfo &);
virtual ~_exports_Timestamp_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_Timestamp_inst : public _exports_Timestamp_templ<_exports_Timestamp_inst> {
public:
  using _exports_Timestamp_templ::_exports_Timestamp_templ;
  virtual ~_exports_Timestamp_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_Timestamp_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_Timestamp_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_SignaturePair_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_SignaturePair_templ(const Napi::CallbackInfo &);
_exports_SignaturePair_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignaturePair__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignaturePair__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePair_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePair_getPubkey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignaturePair_getSignature(const Napi::CallbackInfo &);
virtual ~_exports_SignaturePair_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_SignaturePair_inst : public _exports_SignaturePair_templ<_exports_SignaturePair_inst> {
public:
  using _exports_SignaturePair_templ::_exports_SignaturePair_templ;
  virtual ~_exports_SignaturePair_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_SignaturePair_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_SignaturePair_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_SignatureMap_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_SignatureMap_templ(const Napi::CallbackInfo &);
_exports_SignatureMap_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignatureMap__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignatureMap__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignatureMap__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_SignatureMap__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignatureMap_push(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_SignatureMap_getSignaturePairs(const Napi::CallbackInfo &);
virtual ~_exports_SignatureMap_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_SignatureMap_inst : public _exports_SignatureMap_templ<_exports_SignatureMap_inst> {
public:
  using _exports_SignatureMap_templ::_exports_SignatureMap_templ;
  virtual ~_exports_SignatureMap_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_SignatureMap_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_SignatureMap_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_CommunityFriendsUpdate_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_CommunityFriendsUpdate_templ(const Napi::CallbackInfo &);
_exports_CommunityFriendsUpdate_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_CommunityFriendsUpdate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CommunityFriendsUpdate_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CommunityFriendsUpdate_getColorFusion(const Napi::CallbackInfo &);
virtual ~_exports_CommunityFriendsUpdate_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_CommunityFriendsUpdate_inst : public _exports_CommunityFriendsUpdate_templ<_exports_CommunityFriendsUpdate_inst> {
public:
  using _exports_CommunityFriendsUpdate_templ::_exports_CommunityFriendsUpdate_templ;
  virtual ~_exports_CommunityFriendsUpdate_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_CommunityFriendsUpdate_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_CommunityFriendsUpdate_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_CommunityRoot_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_CommunityRoot_templ(const Napi::CallbackInfo &);
_exports_CommunityRoot_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_CommunityRoot(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CommunityRoot_getInvolvedAddresses(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CommunityRoot_isInvolved(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CommunityRoot_getPubkey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CommunityRoot_getGmwPubkey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CommunityRoot_getAufPubkey(const Napi::CallbackInfo &);
virtual ~_exports_CommunityRoot_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_CommunityRoot_inst : public _exports_CommunityRoot_templ<_exports_CommunityRoot_inst> {
public:
  using _exports_CommunityRoot_templ::_exports_CommunityRoot_templ;
  virtual ~_exports_CommunityRoot_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_CommunityRoot_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_CommunityRoot_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_GradidoCreation_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_GradidoCreation_templ(const Napi::CallbackInfo &);
_exports_GradidoCreation_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoCreation(const Napi::CallbackInfo &);
virtual ~_exports_GradidoCreation_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoCreation_getInvolvedAddresses(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoCreation_isInvolved(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoCreation_getRecipient(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoCreation_getTargetDate(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_GradidoCreation_inst : public _exports_GradidoCreation_templ<_exports_GradidoCreation_inst> {
public:
  using _exports_GradidoCreation_templ::_exports_GradidoCreation_templ;
  virtual ~_exports_GradidoCreation_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_GradidoCreation_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_GradidoCreation_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_GradidoTransfer_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_GradidoTransfer_templ(const Napi::CallbackInfo &);
_exports_GradidoTransfer_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoTransfer(const Napi::CallbackInfo &);
virtual ~_exports_GradidoTransfer_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransfer_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransfer_getInvolvedAddresses(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransfer_isInvolved(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransfer_getSender(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransfer_getRecipient(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_GradidoTransfer_inst : public _exports_GradidoTransfer_templ<_exports_GradidoTransfer_inst> {
public:
  using _exports_GradidoTransfer_templ::_exports_GradidoTransfer_templ;
  virtual ~_exports_GradidoTransfer_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_GradidoTransfer_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_GradidoTransfer_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_GradidoDeferredTransfer_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_GradidoDeferredTransfer_templ(const Napi::CallbackInfo &);
_exports_GradidoDeferredTransfer_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoDeferredTransfer(const Napi::CallbackInfo &);
virtual ~_exports_GradidoDeferredTransfer_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoDeferredTransfer_getInvolvedAddresses(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoDeferredTransfer_isInvolved(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoDeferredTransfer_getSenderPublicKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoDeferredTransfer_getRecipientPublicKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoDeferredTransfer_getTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoDeferredTransfer_getTimeout(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_GradidoDeferredTransfer_inst : public _exports_GradidoDeferredTransfer_templ<_exports_GradidoDeferredTransfer_inst> {
public:
  using _exports_GradidoDeferredTransfer_templ::_exports_GradidoDeferredTransfer_templ;
  virtual ~_exports_GradidoDeferredTransfer_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_GradidoDeferredTransfer_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_GradidoDeferredTransfer_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_RegisterAddress_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_RegisterAddress_templ(const Napi::CallbackInfo &);
_exports_RegisterAddress_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_RegisterAddress__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_RegisterAddress__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_RegisterAddress__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_RegisterAddress__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_RegisterAddress__SWIG_4(const Napi::CallbackInfo &);
virtual ~_exports_RegisterAddress_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_RegisterAddress_equal(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_RegisterAddress_getInvolvedAddresses(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_RegisterAddress_isInvolved(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_RegisterAddress_getUserPublicKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_RegisterAddress_getAddressType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_RegisterAddress_getNameHash(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_RegisterAddress_getAccountPublicKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_RegisterAddress_getDerivationIndex(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_RegisterAddress_inst : public _exports_RegisterAddress_templ<_exports_RegisterAddress_inst> {
public:
  using _exports_RegisterAddress_templ::_exports_RegisterAddress_templ;
  virtual ~_exports_RegisterAddress_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_RegisterAddress_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_RegisterAddress_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TransactionBody_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TransactionBody_templ(const Napi::CallbackInfo &);
_exports_TransactionBody_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionBody__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionBody__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionBody__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionBody__SWIG_3(const Napi::CallbackInfo &);
virtual ~_exports_TransactionBody_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_isTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_isCreation(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_isCommunityFriendsUpdate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_isRegisterAddress(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_isDeferredTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_isCommunityRoot(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getTransactionType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_isPairing(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_isInvolved(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getTransferAmount(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getInvolvedAddresses(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getMemo(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getCreatedAt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getVersionNumber(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getOtherGroup(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getCreation(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getCommunityFriendsUpdate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getRegisterAddress(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getDeferredTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBody_getCommunityRoot(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_TransactionBody_inst : public _exports_TransactionBody_templ<_exports_TransactionBody_inst> {
public:
  using _exports_TransactionBody_templ::_exports_TransactionBody_templ;
  virtual ~_exports_TransactionBody_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TransactionBody_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TransactionBody_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_GradidoTransaction_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_GradidoTransaction_templ(const Napi::CallbackInfo &);
_exports_GradidoTransaction_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoTransaction__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoTransaction__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoTransaction__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoTransaction__SWIG_3(const Napi::CallbackInfo &);
virtual ~_exports_GradidoTransaction_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_getTransactionBody(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_isPairing(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_isInvolved(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_getInvolvedAddresses(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_getSerializedTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_getFingerprint(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_getSignatureMap__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_getSignatureMap__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction__wrap_GradidoTransaction_getSignatureMap(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_getBodyBytes(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransaction_getParingMessageId(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_GradidoTransaction_inst : public _exports_GradidoTransaction_templ<_exports_GradidoTransaction_inst> {
public:
  using _exports_GradidoTransaction_templ::_exports_GradidoTransaction_templ;
  virtual ~_exports_GradidoTransaction_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_GradidoTransaction_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_GradidoTransaction_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ConfirmedTransaction_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ConfirmedTransaction_templ(const Napi::CallbackInfo &);
_exports_ConfirmedTransaction_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ConfirmedTransaction__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ConfirmedTransaction__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ConfirmedTransaction__SWIG_2(const Napi::CallbackInfo &);
virtual ~_exports_ConfirmedTransaction_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_calculateRunningHash__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_calculateRunningHash__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction__wrap_ConfirmedTransaction_calculateRunningHash(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_getId(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_getGradidoTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_getConfirmedAt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_getVersionNumber(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_getRunningHash(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_getMessageId(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ConfirmedTransaction_getAccountBalance(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_ConfirmedTransaction_inst : public _exports_ConfirmedTransaction_templ<_exports_ConfirmedTransaction_inst> {
public:
  using _exports_ConfirmedTransaction_templ::_exports_ConfirmedTransaction_templ;
  virtual ~_exports_ConfirmedTransaction_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ConfirmedTransaction_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ConfirmedTransaction_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TransactionBodyBuilder_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TransactionBodyBuilder_templ(const Napi::CallbackInfo &);
_exports_TransactionBodyBuilder_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionBodyBuilder(const Napi::CallbackInfo &);
virtual ~_exports_TransactionBodyBuilder_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_reset(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_build(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setDeferredTransfer__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setDeferredTransfer__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setDeferredTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setCommunityFriendsUpdate__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setCommunityFriendsUpdate__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setCommunityFriendsUpdate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setRegisterAddress(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setTransactionCreation__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setTransactionCreation__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setTransactionCreation(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setTransactionTransfer__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setTransactionTransfer__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setTransactionTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setCommunityRoot__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setCommunityRoot__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setCommunityRoot(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setCreatedAt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setMemo(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setVersionNumber(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setCrossGroupType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionBodyBuilder_setOtherGroup(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_TransactionBodyBuilder_inst : public _exports_TransactionBodyBuilder_templ<_exports_TransactionBodyBuilder_inst> {
public:
  using _exports_TransactionBodyBuilder_templ::_exports_TransactionBodyBuilder_templ;
  virtual ~_exports_TransactionBodyBuilder_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TransactionBodyBuilder_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TransactionBodyBuilder_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_GradidoTransactionBuilder_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_GradidoTransactionBuilder_templ(const Napi::CallbackInfo &);
_exports_GradidoTransactionBuilder_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_GradidoTransactionBuilder(const Napi::CallbackInfo &);
virtual ~_exports_GradidoTransactionBuilder_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransactionBuilder_reset(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransactionBuilder_build(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransactionBuilder_setTransactionBody__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransactionBuilder_setTransactionBody__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransactionBuilder__wrap_GradidoTransactionBuilder_setTransactionBody(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransactionBuilder_addSignaturePair(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransactionBuilder_sign(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_GradidoTransactionBuilder_setParentMessageId(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_GradidoTransactionBuilder_inst : public _exports_GradidoTransactionBuilder_templ<_exports_GradidoTransactionBuilder_inst> {
public:
  using _exports_GradidoTransactionBuilder_templ::_exports_GradidoTransactionBuilder_templ;
  virtual ~_exports_GradidoTransactionBuilder_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_GradidoTransactionBuilder_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_GradidoTransactionBuilder_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// js_global_declaration
Napi::Value exports_DeserializeType_UNKNOWN_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_DeserializeType_TRANSACTION_BODY_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_DeserializeType_GRADIDO_TRANSACTION_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_DeserializeType_CONFIRMED_TRANSACTION_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_DeserializeType_MAX_get(const Napi::CallbackInfo &info);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_InteractionDeserialize_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_InteractionDeserialize_templ(const Napi::CallbackInfo &);
_exports_InteractionDeserialize_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionDeserialize__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionDeserialize__SWIG_1(const Napi::CallbackInfo &);
virtual ~_exports_InteractionDeserialize_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionDeserialize_run(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionDeserialize_isGradidoTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionDeserialize_isTransactionBody(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionDeserialize_isConfirmedTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionDeserialize_getType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionDeserialize_getTransactionBody(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionDeserialize_getGradidoTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionDeserialize_getConfirmedTransaction(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_InteractionDeserialize_inst : public _exports_InteractionDeserialize_templ<_exports_InteractionDeserialize_inst> {
public:
  using _exports_InteractionDeserialize_templ::_exports_InteractionDeserialize_templ;
  virtual ~_exports_InteractionDeserialize_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_InteractionDeserialize_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_InteractionDeserialize_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_InteractionSerialize_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_InteractionSerialize_templ(const Napi::CallbackInfo &);
_exports_InteractionSerialize_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionSerialize__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionSerialize__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionSerialize__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionSerialize__SWIG_3(const Napi::CallbackInfo &);
virtual ~_exports_InteractionSerialize_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionSerialize_run(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_InteractionSerialize_inst : public _exports_InteractionSerialize_templ<_exports_InteractionSerialize_inst> {
public:
  using _exports_InteractionSerialize_templ::_exports_InteractionSerialize_templ;
  virtual ~_exports_InteractionSerialize_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_InteractionSerialize_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_InteractionSerialize_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TransactionEntries_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TransactionEntries_templ(const Napi::CallbackInfo &);
_exports_TransactionEntries_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionEntries__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionEntries__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionEntries__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntries_size(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntries_capacity(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntries_reserve(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntries_isEmpty(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntries_clear(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntries_add(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntries_get(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntries_set(const Napi::CallbackInfo &);
virtual ~_exports_TransactionEntries_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_TransactionEntries_inst : public _exports_TransactionEntries_templ<_exports_TransactionEntries_inst> {
public:
  using _exports_TransactionEntries_templ::_exports_TransactionEntries_templ;
  virtual ~_exports_TransactionEntries_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TransactionEntries_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TransactionEntries_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TransactionEntry_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TransactionEntry_templ(const Napi::CallbackInfo &);
_exports_TransactionEntry_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionEntry__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionEntry__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionEntry__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TransactionEntry__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_lt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_gt(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_getTransactionNr(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_getSerializedTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_getConfirmedTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_getMonth(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_getYear(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_getTransactionType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_getCoinCommunityId(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_getTransactionBody(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_isTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_isCreation(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_isCommunityFriendsUpdate(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_isRegisterAddress(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_isDeferredTransfer(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TransactionEntry_isCommunityRoot(const Napi::CallbackInfo &);
virtual ~_exports_TransactionEntry_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_TransactionEntry_inst : public _exports_TransactionEntry_templ<_exports_TransactionEntry_inst> {
public:
  using _exports_TransactionEntry_templ::_exports_TransactionEntry_templ;
  virtual ~_exports_TransactionEntry_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TransactionEntry_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TransactionEntry_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// js_global_declaration
Napi::Value exports_FilterResult_USE_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_FilterResult_DISMISS_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_FilterResult_STOP_get(const Napi::CallbackInfo &info);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_Pagination_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_Pagination_templ(const Napi::CallbackInfo &);
_exports_Pagination_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Pagination__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Pagination__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Pagination__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Pagination_size_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Pagination_size_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Pagination_page_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Pagination_page_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Pagination_skipEntriesCount(const Napi::CallbackInfo &);
virtual ~_exports_Pagination_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_Pagination_inst : public _exports_Pagination_templ<_exports_Pagination_inst> {
public:
  using _exports_Pagination_templ::_exports_Pagination_templ;
  virtual ~_exports_Pagination_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_Pagination_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_Pagination_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// js_global_declaration
Napi::Value exports_SearchDirection_ASC_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_SearchDirection_DESC_get(const Napi::CallbackInfo &info);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_Filter_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_Filter_templ(const Napi::CallbackInfo &);
_exports_Filter_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Filter(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Filter_minTransactionNr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Filter_minTransactionNr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Filter_maxTransactionNr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Filter_maxTransactionNr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Filter_involvedPublicKey_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Filter_involvedPublicKey_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Filter_searchDirection_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Filter_searchDirection_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Filter_pagination_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Filter_pagination_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Filter_coinCommunityId_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Filter_coinCommunityId_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Filter_timepointInterval_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Filter_timepointInterval_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Filter_transactionType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_Filter_transactionType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_Filter_LAST_TRANSACTION_get(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_Filter_ALL_TRANSACTIONS_get(const Napi::CallbackInfo &);
virtual ~_exports_Filter_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_Filter_inst : public _exports_Filter_templ<_exports_Filter_inst> {
public:
  using _exports_Filter_templ::_exports_Filter_templ;
  virtual ~_exports_Filter_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_Filter_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_Filter_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_FilterBuilder_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_FilterBuilder_templ(const Napi::CallbackInfo &);
_exports_FilterBuilder_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_reset(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_setMinTransactionNr(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_setMaxTransactionNr(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_setInvolvedPublicKey(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_setSearchDirection(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_setPagination(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_setCoinCommunityId(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_setTimepointInterval(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_setTransactionType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_build(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_FilterBuilder_getFilter(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_FilterBuilder(const Napi::CallbackInfo &);
virtual ~_exports_FilterBuilder_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_FilterBuilder_inst : public _exports_FilterBuilder_templ<_exports_FilterBuilder_inst> {
public:
  using _exports_FilterBuilder_templ::_exports_FilterBuilder_templ;
  virtual ~_exports_FilterBuilder_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_FilterBuilder_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_FilterBuilder_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_DeferredRedeemedTransferPair_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_DeferredRedeemedTransferPair_templ(const Napi::CallbackInfo &);
_exports_DeferredRedeemedTransferPair_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_DeferredRedeemedTransferPair__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_DeferredRedeemedTransferPair__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_DeferredRedeemedTransferPair__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_DeferredRedeemedTransferPair_first_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_DeferredRedeemedTransferPair_first_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_DeferredRedeemedTransferPair_second_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_DeferredRedeemedTransferPair_second_set(const Napi::CallbackInfo &, const Napi::Value &);
virtual ~_exports_DeferredRedeemedTransferPair_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_DeferredRedeemedTransferPair_inst : public _exports_DeferredRedeemedTransferPair_templ<_exports_DeferredRedeemedTransferPair_inst> {
public:
  using _exports_DeferredRedeemedTransferPair_templ::_exports_DeferredRedeemedTransferPair_templ;
  virtual ~_exports_DeferredRedeemedTransferPair_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_DeferredRedeemedTransferPair_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_DeferredRedeemedTransferPair_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_Abstract_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_Abstract_templ(const Napi::CallbackInfo &);
_exports_Abstract_templ(bool, const Napi::CallbackInfo &);
virtual ~_exports_Abstract_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_addGradidoTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_findAll__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_findAll__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract__wrap_Abstract_findAll(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_findOne__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_findOne__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract__wrap_Abstract_findOne(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_findTimeoutedDeferredTransfersInRange(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_findRedeemedDeferredTransfersInRange(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_getAddressType__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_getAddressType__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract__wrap_Abstract_getAddressType(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_getTransactionForId(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_findByMessageId__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_findByMessageId__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract__wrap_Abstract_findByMessageId(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_getCommunityId(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Abstract_getStartDate(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_Abstract_inst : public _exports_Abstract_templ<_exports_Abstract_inst> {
public:
  using _exports_Abstract_templ::_exports_Abstract_templ;
  virtual ~_exports_Abstract_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_Abstract_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_Abstract_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_InMemoryBlockchain_templ : public _exports_Abstract_templ<SWIG_OBJ_WRAP> {
public:
  _exports_InMemoryBlockchain_templ(const Napi::CallbackInfo &);
_exports_InMemoryBlockchain_templ(bool, const Napi::CallbackInfo &);
virtual ~_exports_InMemoryBlockchain_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_clear(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_exit(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_addGradidoTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_getSortedTransactions(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_findAll__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_findAll__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain__wrap_InMemoryBlockchain_findAll(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_findTimeoutedDeferredTransfersInRange(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_findRedeemedDeferredTransfersInRange(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_getTransactionForId(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_findByMessageId__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain_findByMessageId__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchain__wrap_InMemoryBlockchain_findByMessageId(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_InMemoryBlockchain_inst : public _exports_InMemoryBlockchain_templ<_exports_InMemoryBlockchain_inst> {
public:
  using _exports_InMemoryBlockchain_templ::_exports_InMemoryBlockchain_templ;
  virtual ~_exports_InMemoryBlockchain_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_InMemoryBlockchain_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_InMemoryBlockchain_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_InMemoryBlockchainProvider_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_InMemoryBlockchainProvider_templ(const Napi::CallbackInfo &);
_exports_InMemoryBlockchainProvider_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_InMemoryBlockchainProvider_getInstance(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchainProvider_clear(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InMemoryBlockchainProvider_findBlockchain(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_InMemoryBlockchainProvider_inst : public _exports_InMemoryBlockchainProvider_templ<_exports_InMemoryBlockchainProvider_inst> {
public:
  using _exports_InMemoryBlockchainProvider_templ::_exports_InMemoryBlockchainProvider_templ;
  virtual ~_exports_InMemoryBlockchainProvider_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_InMemoryBlockchainProvider_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_InMemoryBlockchainProvider_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// js_global_declaration
Napi::Value exports_BodyBytesType_BASE64_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_BodyBytesType_HEX_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_BodyBytesType_JSON_get(const Napi::CallbackInfo &info);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_InteractionToJson_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_InteractionToJson_templ(const Napi::CallbackInfo &);
_exports_InteractionToJson_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionToJson__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionToJson__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionToJson__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionToJson__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionToJson__SWIG_4(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionToJson__SWIG_5(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionToJson_run__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionToJson_run__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionToJson__wrap_InteractionToJson_run(const Napi::CallbackInfo &);
virtual ~_exports_InteractionToJson_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_InteractionToJson_inst : public _exports_InteractionToJson_templ<_exports_InteractionToJson_inst> {
public:
  using _exports_InteractionToJson_templ::_exports_InteractionToJson_templ;
  virtual ~_exports_InteractionToJson_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_InteractionToJson_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_InteractionToJson_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_InteractionCalculateAccountBalance_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_InteractionCalculateAccountBalance_templ(const Napi::CallbackInfo &);
_exports_InteractionCalculateAccountBalance_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionCalculateAccountBalance(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionCalculateAccountBalance_run__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionCalculateAccountBalance_run__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionCalculateAccountBalance_run__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionCalculateAccountBalance_run__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionCalculateAccountBalance__wrap_InteractionCalculateAccountBalance_run(const Napi::CallbackInfo &);
virtual ~_exports_InteractionCalculateAccountBalance_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_InteractionCalculateAccountBalance_inst : public _exports_InteractionCalculateAccountBalance_templ<_exports_InteractionCalculateAccountBalance_inst> {
public:
  using _exports_InteractionCalculateAccountBalance_templ::_exports_InteractionCalculateAccountBalance_templ;
  virtual ~_exports_InteractionCalculateAccountBalance_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_InteractionCalculateAccountBalance_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_InteractionCalculateAccountBalance_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
// js_global_declaration
Napi::Value exports_ValidateType_SINGLE_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_ValidateType_PREVIOUS_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_ValidateType_MONTH_RANGE_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_ValidateType_PAIRED_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_ValidateType_ACCOUNT_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_ValidateType_CONNECTED_GROUP_get(const Napi::CallbackInfo &info);
// js_global_declaration
Napi::Value exports_ValidateType_CONNECTED_BLOCKCHAIN_get(const Napi::CallbackInfo &info);
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_InteractionValidate_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_InteractionValidate_templ(const Napi::CallbackInfo &);
_exports_InteractionValidate_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionValidate__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionValidate__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_InteractionValidate__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionValidate_run__SWIG_0(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionValidate_run__SWIG_1(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionValidate_run__SWIG_2(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionValidate_run__SWIG_3(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionValidate__wrap_InteractionValidate_run(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionValidate_setSenderPreviousConfirmedTransaction(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_InteractionValidate_setRecipientPreviousConfirmedTransaction(const Napi::CallbackInfo &);
virtual ~_exports_InteractionValidate_templ();
// jsnapi_class_epilogue_template
};
// jsnapi_class_instance
class _exports_InteractionValidate_inst : public _exports_InteractionValidate_templ<_exports_InteractionValidate_inst> {
public:
  using _exports_InteractionValidate_templ::_exports_InteractionValidate_templ;
  virtual ~_exports_InteractionValidate_inst() = default;
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_InteractionValidate_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_InteractionValidate_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_new_TimepointInterval__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  TimepointInterval *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TimepointInterval__SWIG_0.");
    }
    {
      try {
        result = (TimepointInterval *)new TimepointInterval();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_new_TimepointInterval__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  Timepoint arg1 ;
  Timepoint arg2 ;
  TimepointInterval *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TimepointInterval__SWIG_1.");
    }
    {
      {
        if(!info[0].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg1 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[0].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    {
      try {
        result = (TimepointInterval *)new TimepointInterval(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_new_TimepointInterval__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  Timepoint arg1 ;
  TimepointInterval *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TimepointInterval__SWIG_2.");
    }
    {
      {
        if(!info[0].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg1 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[0].As<Napi::Date>().ValueOf())));
      }
    }
    {
      try {
        result = (TimepointInterval *)new TimepointInterval(SWIG_STD_MOVE(arg1));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_exports_TimepointInterval_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_TimepointInterval;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TimepointInterval__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TimepointInterval__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TimepointInterval__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TimepointInterval__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TimepointInterval__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TimepointInterval__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_TimepointInterval");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_exports_TimepointInterval_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_TimepointInterval_getStartDate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TimepointInterval *arg1 = (TimepointInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Timepoint result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimepointInterval_getStartDate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TimepointInterval, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimepointInterval_getStartDate" "', argument " "1"" of type '" "TimepointInterval const *""'"); 
    }
    arg1 = reinterpret_cast< TimepointInterval * >(argp1);
    
    
    
    
    {
      try {
        result = ((TimepointInterval const *)arg1)->getStartDate();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      double ms = std::chrono::duration_cast<std::chrono::milliseconds>((&result)->time_since_epoch()).count();
      jsresult = Napi::Date::New(env, ms);
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_TimepointInterval_getEndDate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TimepointInterval *arg1 = (TimepointInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Timepoint result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimepointInterval_getEndDate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TimepointInterval, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimepointInterval_getEndDate" "', argument " "1"" of type '" "TimepointInterval const *""'"); 
    }
    arg1 = reinterpret_cast< TimepointInterval * >(argp1);
    
    
    
    
    {
      try {
        result = ((TimepointInterval const *)arg1)->getEndDate();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      double ms = std::chrono::duration_cast<std::chrono::milliseconds>((&result)->time_since_epoch()).count();
      jsresult = Napi::Date::New(env, ms);
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_TimepointInterval_isEmpty(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TimepointInterval *arg1 = (TimepointInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimepointInterval_isEmpty.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TimepointInterval, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimepointInterval_isEmpty" "', argument " "1"" of type '" "TimepointInterval const *""'"); 
    }
    arg1 = reinterpret_cast< TimepointInterval * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((TimepointInterval const *)arg1)->isEmpty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_TimepointInterval_isInsideInterval__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TimepointInterval *arg1 = (TimepointInterval *) 0 ;
  date::month arg2 ;
  date::year arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TimepointInterval, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimepointInterval_isInsideInterval" "', argument " "1"" of type '" "TimepointInterval const *""'"); 
    }
    arg1 = reinterpret_cast< TimepointInterval * >(argp1);{
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg2 = date::month(info[0].As<Napi::Number>().Uint32Value());
      }
    }
    {
      {
        if(!info[1].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg3 = date::year(info[1].As<Napi::Number>().Int32Value());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((TimepointInterval const *)arg1)->isInsideInterval(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_TimepointInterval_isInsideInterval__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TimepointInterval *arg1 = (TimepointInterval *) 0 ;
  Timepoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TimepointInterval, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimepointInterval_isInsideInterval" "', argument " "1"" of type '" "TimepointInterval const *""'"); 
    }
    arg1 = reinterpret_cast< TimepointInterval * >(argp1);{
      {
        if(!info[0].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[0].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((TimepointInterval const *)arg1)->isInsideInterval(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::_wrap_TimepointInterval__wrap_TimepointInterval_isInsideInterval(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TimepointInterval_isInsideInterval__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TimepointInterval_isInsideInterval__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TimepointInterval_isInsideInterval__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TimepointInterval_isInsideInterval__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function isInsideInterval.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TimepointInterval_templ<SWIG_OBJ_WRAP>::~_exports_TimepointInterval_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<TimepointInterval *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Profiler_templ<SWIG_OBJ_WRAP>::_wrap_new_Profiler__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  Profiler *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Profiler__SWIG_0.");
    }
    {
      try {
        result = (Profiler *)new Profiler();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Profiler_templ<SWIG_OBJ_WRAP>::_wrap_new_Profiler__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  Profiler *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Profiler *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Profiler__SWIG_1.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Profiler,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Profiler" "', argument " "1"" of type '" "Profiler const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Profiler" "', argument " "1"" of type '" "Profiler const &""'"); 
    }
    arg1 = reinterpret_cast< Profiler * >(argp1);{
      try {
        result = (Profiler *)new Profiler((Profiler const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_Profiler_templ<SWIG_OBJ_WRAP>::_exports_Profiler_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_Profiler;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_Profiler__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_Profiler__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_Profiler__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_Profiler__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_Profiler");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_Profiler_templ<SWIG_OBJ_WRAP>::_exports_Profiler_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_Profiler_templ<SWIG_OBJ_WRAP>::~_exports_Profiler_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<Profiler *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Profiler_templ<SWIG_OBJ_WRAP>::_wrap_Profiler_reset(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Profiler *arg1 = (Profiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Profiler_reset.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Profiler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_reset" "', argument " "1"" of type '" "Profiler *""'"); 
    }
    arg1 = reinterpret_cast< Profiler * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->reset();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Profiler_templ<SWIG_OBJ_WRAP>::_wrap_Profiler_millis(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Profiler *arg1 = (Profiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Profiler_millis.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Profiler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_millis" "', argument " "1"" of type '" "Profiler const *""'"); 
    }
    arg1 = reinterpret_cast< Profiler * >(argp1);
    
    
    
    
    {
      try {
        result = (double)((Profiler const *)arg1)->millis();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Profiler_templ<SWIG_OBJ_WRAP>::_wrap_Profiler_micros(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Profiler *arg1 = (Profiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Profiler_micros.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Profiler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_micros" "', argument " "1"" of type '" "Profiler const *""'"); 
    }
    arg1 = reinterpret_cast< Profiler * >(argp1);
    
    
    
    
    {
      try {
        result = (double)((Profiler const *)arg1)->micros();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Profiler_templ<SWIG_OBJ_WRAP>::_wrap_Profiler_nanos(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Profiler *arg1 = (Profiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Profiler_nanos.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Profiler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_nanos" "', argument " "1"" of type '" "Profiler const *""'"); 
    }
    arg1 = reinterpret_cast< Profiler * >(argp1);
    
    
    
    
    {
      try {
        result = (double)((Profiler const *)arg1)->nanos();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Profiler_templ<SWIG_OBJ_WRAP>::_wrap_Profiler_seconds(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Profiler *arg1 = (Profiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Profiler_seconds.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Profiler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_seconds" "', argument " "1"" of type '" "Profiler const *""'"); 
    }
    arg1 = reinterpret_cast< Profiler * >(argp1);
    
    
    
    
    {
      try {
        result = (double)((Profiler const *)arg1)->seconds();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Profiler_templ<SWIG_OBJ_WRAP>::_wrap_Profiler_string(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Profiler *arg1 = (Profiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Profiler_string.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Profiler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_string" "', argument " "1"" of type '" "Profiler const *""'"); 
    }
    arg1 = reinterpret_cast< Profiler * >(argp1);
    
    
    
    
    {
      try {
        result = ((Profiler const *)arg1)->string();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_new_MemoryBlocks__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< std::shared_ptr< memory::Block > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MemoryBlocks__SWIG_0.");
    }
    {
      try {
        result = (std::vector< std::shared_ptr< memory::Block > > *)new std::vector< std::shared_ptr< memory::Block > >();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_new_MemoryBlocks__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< std::shared_ptr< memory::Block > >::size_type arg1 ;
  std::vector< std::shared_ptr< memory::Block > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MemoryBlocks__SWIG_1.");
    }
    {
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg1 = static_cast<size_t>(info[0].As<Napi::Number>().Uint32Value());
      }
    }
    {
      try {
        result = (std::vector< std::shared_ptr< memory::Block > > *)new std::vector< std::shared_ptr< memory::Block > >(SWIG_STD_MOVE(arg1));    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_new_MemoryBlocks__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< memory::Block > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MemoryBlocks__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MemoryBlocks" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MemoryBlocks" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > const &""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);{
      try {
        result = (std::vector< std::shared_ptr< memory::Block > > *)new std::vector< std::shared_ptr< memory::Block > >((std::vector< std::shared_ptr< memory::Block > > const &)*arg1);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_exports_MemoryBlocks_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_MemoryBlocks__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_MemoryBlocks__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_MemoryBlocks__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_MemoryBlocks__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_MemoryBlocks__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_MemoryBlocks__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_MemoryBlocks");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_exports_MemoryBlocks_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlocks_size(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = (std::vector< std::shared_ptr< memory::Block > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< memory::Block > >::size_type result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlocks_size.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlocks_size" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);
    
    
    
    
    {
      try {
        result = ((std::vector< std::shared_ptr< memory::Block > > const *)arg1)->size();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<double>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlocks_capacity(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = (std::vector< std::shared_ptr< memory::Block > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< memory::Block > >::size_type result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlocks_capacity.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlocks_capacity" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);
    
    
    
    
    {
      try {
        result = ((std::vector< std::shared_ptr< memory::Block > > const *)arg1)->capacity();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<double>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlocks_reserve(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = (std::vector< std::shared_ptr< memory::Block > > *) 0 ;
  std::vector< std::shared_ptr< memory::Block > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlocks_reserve.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlocks_reserve" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);{
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg2 = static_cast<size_t>(info[0].As<Napi::Number>().Uint32Value());
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->reserve(SWIG_STD_MOVE(arg2));    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlocks_isEmpty(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = (std::vector< std::shared_ptr< memory::Block > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlocks_isEmpty.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlocks_isEmpty" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((std::vector< std::shared_ptr< memory::Block > > const *)arg1)->empty();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlocks_clear(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = (std::vector< std::shared_ptr< memory::Block > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlocks_clear.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlocks_clear" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->clear();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlocks_add(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = (std::vector< std::shared_ptr< memory::Block > > *) 0 ;
  std::vector< std::shared_ptr< memory::Block > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlocks_add.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlocks_add" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MemoryBlocks_add" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = new std::shared_ptr< memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->push_back((std::vector< std::shared_ptr< memory::Block > >::value_type const &)*arg2);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    {
      delete arg2;
    }
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg2;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg2;
  }
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlocks_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = (std::vector< std::shared_ptr< memory::Block > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::shared_ptr< memory::Block > >::value_type *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlocks_get.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlocks_get" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryBlocks_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    
    
    
    try {
      {
        try {
          result = (std::vector< std::shared_ptr< memory::Block > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_memory_Block_Sg__Sg__get(arg1,arg2);    
        } catch (const GradidoInvalidHexException& e) {
          SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
        } catch (const GradidoInvalidBase64Exception& e) {
          SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
        } catch (const std::exception& e) {
          SWIG_exception(SWIG_RuntimeError, e.what());
        }
      }
      
    } catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>(result->get()), SWIGTYPE_p_memory__Block, 0 |  0 );
        auto owner = new std::shared_ptr< memory::Block>(*result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlocks_set(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< memory::Block > > *arg1 = (std::vector< std::shared_ptr< memory::Block > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< memory::Block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlocks_set.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlocks_set" "', argument " "1"" of type '" "std::vector< std::shared_ptr< memory::Block > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< memory::Block > > * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryBlocks_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MemoryBlocks_set" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = new std::shared_ptr< memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    try {
      {
        try {
          std_vector_Sl_std_shared_ptr_Sl_memory_Block_Sg__Sg__set(arg1,arg2,(std::shared_ptr< memory::Block > const &)*arg3);    
        } catch (const GradidoInvalidHexException& e) {
          SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
        } catch (const GradidoInvalidBase64Exception& e) {
          SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
        } catch (const std::exception& e) {
          SWIG_exception(SWIG_RuntimeError, e.what());
        }
      }
      
    } catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    jsresult = env.Undefined();
    
    {
      delete arg3;
    }
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg3;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg3;
  }
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_MemoryBlocks_templ<SWIG_OBJ_WRAP>::~_exports_MemoryBlocks_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<std::vector< std::shared_ptr< memory::Block > > *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_new_MemoryBlock__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  size_t arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  memory::Block *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MemoryBlock__SWIG_0.");
    }
    {
      {
        try {
          Napi::Buffer buffer = info[0].As<Napi::Buffer<uint8_t>>();
          arg1 = buffer.Length();
          arg2 = buffer.Data();  
        } catch(Napi::Error& ex) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Buffer as input");
        } 
      }
    }
    {
      try {
        result = (memory::Block *)new memory::Block(SWIG_STD_MOVE(arg1),(unsigned char const *)arg2);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_new_MemoryBlock__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  memory::Block *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MemoryBlock__SWIG_1.");
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MemoryBlock" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MemoryBlock" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    {
      try {
        result = (memory::Block *)new memory::Block((std::string const &)*arg1);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_new_MemoryBlock__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::Block *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::Block *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MemoryBlock__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MemoryBlock" "', argument " "1"" of type '" "memory::Block &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MemoryBlock" "', argument " "1"" of type '" "memory::Block &""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);{
      try {
        result = (memory::Block *)new memory::Block(*arg1);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_exports_MemoryBlock_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_memory__Block;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_MemoryBlock__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_MemoryBlock__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_MemoryBlock__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_MemoryBlock__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_MemoryBlock__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_MemoryBlock__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_MemoryBlock");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_exports_MemoryBlock_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::~_exports_MemoryBlock_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<memory::Block *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_size(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_size.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_size" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);
    
    
    
    
    {
      try {
        result = ((memory::Block const *)arg1)->size();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<double>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_data(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_data.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_data" "', argument " "1"" of type '" "memory::Block *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);
    
    
    
    
    {
      try {
        result = (uint8_t *)(arg1)->data();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Buffer<uint8_t>::Copy(info.Env(), arg1->data(), arg1->size());
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_convertToHex(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_convertToHex.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_convertToHex" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);
    
    
    
    
    {
      try {
        result = ((memory::Block const *)arg1)->convertToHex();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_convertToBase64__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_convertToBase64" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryBlock_convertToBase64" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    
    
    
    
    {
      try {
        result = ((memory::Block const *)arg1)->convertToBase64(arg2);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_convertToBase64__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_convertToBase64" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);
    
    
    
    
    {
      try {
        result = ((memory::Block const *)arg1)->convertToBase64();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock__wrap_MemoryBlock_convertToBase64(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_MemoryBlock_convertToBase64__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_MemoryBlock_convertToBase64__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_MemoryBlock_convertToBase64__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_MemoryBlock_convertToBase64__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function convertToBase64.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_copyAsString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_copyAsString.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_copyAsString" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);
    
    
    
    
    {
      try {
        result = ((memory::Block const *)arg1)->copyAsString();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_calculateHash(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_calculateHash.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_calculateHash" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);
    
    
    
    
    {
      try {
        result = ((memory::Block const *)arg1)->calculateHash();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_fromHex(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  SwigValueWrapper< memory::Block > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_fromHex.");
    }
    
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_fromHex" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryBlock_fromHex" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    
    
    
    
    
    {
      try {
        result = memory::Block::fromHex((std::string const &)*arg1);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_fromBase64__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_fromBase64" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryBlock_fromBase64" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    ecode2 = SWIG_AsVal_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryBlock_fromBase64" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    
    
    
    
    {
      try {
        result = memory::Block::fromBase64((std::string const &)*arg1,arg2);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_fromBase64__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_fromBase64" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryBlock_fromBase64" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    
    
    
    
    
    {
      try {
        result = memory::Block::fromBase64((std::string const &)*arg1);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock__wrap_MemoryBlock_fromBase64(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_MemoryBlock_fromBase64__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_MemoryBlock_fromBase64__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_MemoryBlock_fromBase64__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_MemoryBlock_fromBase64__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function fromBase64.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_isEmpty(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_isEmpty.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_isEmpty" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((memory::Block const *)arg1)->isEmpty();    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  memory::Block *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_equal" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemoryBlock_equal" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryBlock_equal" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((memory::Block const *)arg1)->operator ==((memory::Block const &)*arg2);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_notEqual(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  memory::Block *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_notEqual.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_notEqual" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemoryBlock_notEqual" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryBlock_notEqual" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((memory::Block const *)arg1)->operator !=((memory::Block const &)*arg2);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_MemoryBlock_templ<SWIG_OBJ_WRAP>::_wrap_MemoryBlock_lt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::Block *arg1 = (memory::Block *) 0 ;
  memory::Block *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_MemoryBlock_lt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_memory__Block, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryBlock_lt" "', argument " "1"" of type '" "memory::Block const *""'"); 
    }
    arg1 = reinterpret_cast< memory::Block * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemoryBlock_lt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryBlock_lt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((memory::Block const *)arg1)->operator <((memory::Block const &)*arg2);    
      } catch (const GradidoInvalidHexException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const GradidoInvalidBase64Exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_Passphrase_templ<SWIG_OBJ_WRAP>::_exports_Passphrase_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_Passphrase;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  std::string *arg1 = 0 ;
  MnemonicType arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  Passphrase *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Passphrase.");
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Passphrase" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Passphrase" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    ecode2 = SWIG_AsVal_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Passphrase" "', argument " "2"" of type '" "MnemonicType""'");
    } 
    arg2 = static_cast< MnemonicType >(val2);{
      try {
        result = (Passphrase *)new Passphrase((std::string const &)*arg1,arg2);
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_Passphrase_templ<SWIG_OBJ_WRAP>::_exports_Passphrase_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Passphrase_templ<SWIG_OBJ_WRAP>::_wrap_Passphrase_generate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  MnemonicType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::shared_ptr< Passphrase > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Passphrase_generate.");
    }
    
    ecode1 = SWIG_AsVal_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Passphrase_generate" "', argument " "1"" of type '" "MnemonicType""'");
    } 
    arg1 = static_cast< MnemonicType >(val1);
    
    
    
    
    {
      try {
        result = Passphrase::generate(arg1);
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<Passphrase *>((&result)->get()), SWIGTYPE_p_Passphrase, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< Passphrase>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Passphrase_templ<SWIG_OBJ_WRAP>::_wrap_Passphrase_detectMnemonicWithKeyPair(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string *arg1 = 0 ;
  KeyPairEd25519 *arg2 = (KeyPairEd25519 *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  MnemonicType result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Passphrase_detectMnemonicWithKeyPair.");
    }
    
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Passphrase_detectMnemonicWithKeyPair" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Passphrase_detectMnemonicWithKeyPair" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Passphrase_detectMnemonicWithKeyPair" "', argument " "2"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg2 = reinterpret_cast< KeyPairEd25519 * >(argp2);
    
    
    
    
    {
      try {
        result = (MnemonicType)Passphrase::detectMnemonic((std::string const &)*arg1,(KeyPairEd25519 const *)arg2);
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Passphrase_templ<SWIG_OBJ_WRAP>::_wrap_Passphrase_detectMnemonic(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  MnemonicType result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Passphrase_detectMnemonic.");
    }
    
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Passphrase_detectMnemonic" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Passphrase_detectMnemonic" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    
    
    
    
    
    {
      try {
        result = (MnemonicType)Passphrase::detectMnemonic((std::string const &)*arg1);
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Passphrase_templ<SWIG_OBJ_WRAP>::_wrap_Passphrase_transform(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Passphrase *arg1 = (Passphrase *) 0 ;
  MnemonicType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::shared_ptr< Passphrase > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Passphrase_transform.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Passphrase, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Passphrase_transform" "', argument " "1"" of type '" "Passphrase *""'"); 
    }
    arg1 = reinterpret_cast< Passphrase * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Passphrase_transform" "', argument " "2"" of type '" "MnemonicType""'");
    } 
    arg2 = static_cast< MnemonicType >(val2);
    
    
    
    
    {
      try {
        result = (arg1)->transform(arg2);
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<Passphrase *>((&result)->get()), SWIGTYPE_p_Passphrase, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< Passphrase>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Passphrase_templ<SWIG_OBJ_WRAP>::_wrap_Passphrase_createClearPassphrase(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Passphrase *arg1 = (Passphrase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Passphrase_createClearPassphrase.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Passphrase, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Passphrase_createClearPassphrase" "', argument " "1"" of type '" "Passphrase const *""'"); 
    }
    arg1 = reinterpret_cast< Passphrase * >(argp1);
    
    
    
    
    {
      try {
        result = ((Passphrase const *)arg1)->createClearPassphrase();
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Passphrase_templ<SWIG_OBJ_WRAP>::_wrap_Passphrase_filter(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::string result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Passphrase_filter.");
    }
    
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Passphrase_filter" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Passphrase_filter" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    
    
    
    
    
    {
      try {
        result = Passphrase::filter((std::string const &)*arg1);
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Passphrase_templ<SWIG_OBJ_WRAP>::_wrap_Passphrase_checkIfValid(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Passphrase *arg1 = (Passphrase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Passphrase_checkIfValid.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Passphrase, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Passphrase_checkIfValid" "', argument " "1"" of type '" "Passphrase *""'"); 
    }
    arg1 = reinterpret_cast< Passphrase * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)(arg1)->checkIfValid();
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Passphrase_templ<SWIG_OBJ_WRAP>::_wrap_Passphrase_getString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Passphrase *arg1 = (Passphrase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Passphrase_getString.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Passphrase, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Passphrase_getString" "', argument " "1"" of type '" "Passphrase const *""'"); 
    }
    arg1 = reinterpret_cast< Passphrase * >(argp1);
    
    
    
    
    {
      try {
        result = (std::string *) &((Passphrase const *)arg1)->getString();
      } catch (const PassphraseEmptyWordSourceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(*result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_Passphrase_templ<SWIG_OBJ_WRAP>::~_exports_Passphrase_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<Passphrase *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_wrap_new_SecretKeyCryptography__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  SecretKeyCryptography *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SecretKeyCryptography__SWIG_0.");
    }
    {
      try {
        result = (SecretKeyCryptography *)new SecretKeyCryptography();
      } catch(const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const MissingEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const DecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const SecretKeyCryptographyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_wrap_new_SecretKeyCryptography__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  unsigned long long arg1 ;
  size_t arg2 ;
  int arg3 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SecretKeyCryptography *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SecretKeyCryptography__SWIG_1.");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SecretKeyCryptography" "', argument " "1"" of type '" "unsigned long long""'");
    } 
    arg1 = static_cast< unsigned long long >(val1);{
      {
        if(!info[1].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg2 = static_cast<size_t>(info[1].As<Napi::Number>().Uint32Value());
      }
    }
    ecode3 = SWIG_AsVal_int(info[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SecretKeyCryptography" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);{
      try {
        result = (SecretKeyCryptography *)new SecretKeyCryptography(arg1,SWIG_STD_MOVE(arg2),arg3);
      } catch(const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const MissingEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const DecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const SecretKeyCryptographyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_exports_SecretKeyCryptography_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_SecretKeyCryptography;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SecretKeyCryptography__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SecretKeyCryptography__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SecretKeyCryptography__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SecretKeyCryptography__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_SecretKeyCryptography");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_exports_SecretKeyCryptography_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::~_exports_SecretKeyCryptography_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<SecretKeyCryptography *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_wrap_SecretKeyCryptography_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SecretKeyCryptography *arg1 = (SecretKeyCryptography *) 0 ;
  std::shared_ptr< SecretKeyCryptography > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKeyCryptography_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_SecretKeyCryptography, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKeyCryptography_equal" "', argument " "1"" of type '" "SecretKeyCryptography const *""'"); 
    }
    arg1 = reinterpret_cast< SecretKeyCryptography * >(argp1);{
      {
        SecretKeyCryptography *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_SecretKeyCryptography,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "SecretKeyCryptography_equal" "', argument " "2"" of type '" "SecretKeyCryptography""'");
        }
        arg2 = new std::shared_ptr< SecretKeyCryptography>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((SecretKeyCryptography const *)arg1)->operator ==((std::shared_ptr< SecretKeyCryptography > const &)*arg2);
      } catch(const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const MissingEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const DecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const SecretKeyCryptographyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    {
      delete arg2;
    }
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg2;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg2;
  }
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_wrap_SecretKeyCryptography_hasKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SecretKeyCryptography *arg1 = (SecretKeyCryptography *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKeyCryptography_hasKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_SecretKeyCryptography, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKeyCryptography_hasKey" "', argument " "1"" of type '" "SecretKeyCryptography const *""'"); 
    }
    arg1 = reinterpret_cast< SecretKeyCryptography * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((SecretKeyCryptography const *)arg1)->hasKey();
      } catch(const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const MissingEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const DecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const SecretKeyCryptographyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_wrap_SecretKeyCryptography_createKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SecretKeyCryptography *arg1 = (SecretKeyCryptography *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKeyCryptography_createKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_SecretKeyCryptography, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKeyCryptography_createKey" "', argument " "1"" of type '" "SecretKeyCryptography *""'"); 
    }
    arg1 = reinterpret_cast< SecretKeyCryptography * >(argp1);{
      {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SecretKeyCryptography_createKey" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecretKeyCryptography_createKey" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        arg2 = ptr;
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(info[1], &ptr);
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SecretKeyCryptography_createKey" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecretKeyCryptography_createKey" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        arg3 = ptr;
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->createKey((std::string const &)*arg2,(std::string const &)*arg3);
      } catch(const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const MissingEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const DecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const SecretKeyCryptographyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_wrap_SecretKeyCryptography_encrypt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SecretKeyCryptography *arg1 = (SecretKeyCryptography *) 0 ;
  memory::Block *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKeyCryptography_encrypt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_SecretKeyCryptography, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKeyCryptography_encrypt" "', argument " "1"" of type '" "SecretKeyCryptography const *""'"); 
    }
    arg1 = reinterpret_cast< SecretKeyCryptography * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SecretKeyCryptography_encrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecretKeyCryptography_encrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);
    
    
    
    
    {
      try {
        result = ((SecretKeyCryptography const *)arg1)->encrypt((memory::Block const &)*arg2);
      } catch(const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const MissingEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const DecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const SecretKeyCryptographyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SecretKeyCryptography_templ<SWIG_OBJ_WRAP>::_wrap_SecretKeyCryptography_decrypt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SecretKeyCryptography *arg1 = (SecretKeyCryptography *) 0 ;
  memory::Block *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKeyCryptography_decrypt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_SecretKeyCryptography, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKeyCryptography_decrypt" "', argument " "1"" of type '" "SecretKeyCryptography const *""'"); 
    }
    arg1 = reinterpret_cast< SecretKeyCryptography * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SecretKeyCryptography_decrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecretKeyCryptography_decrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);
    
    
    
    
    {
      try {
        result = ((SecretKeyCryptography const *)arg1)->decrypt((memory::Block const &)*arg2);
      } catch(const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const MissingEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const DecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const EncryptionKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const SecretKeyCryptographyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_new_KeyPairEd25519__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  memory::ConstBlockPtr arg2 ;
  memory::ConstBlockPtr arg3 ;
  KeyPairEd25519 *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_KeyPairEd25519__SWIG_0.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (KeyPairEd25519 *)new KeyPairEd25519(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_new_KeyPairEd25519__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  memory::ConstBlockPtr arg2 ;
  KeyPairEd25519 *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_KeyPairEd25519__SWIG_1.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (KeyPairEd25519 *)new KeyPairEd25519(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_new_KeyPairEd25519__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  KeyPairEd25519 *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_KeyPairEd25519__SWIG_2.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (KeyPairEd25519 *)new KeyPairEd25519(SWIG_STD_MOVE(arg1));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_exports_KeyPairEd25519_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_KeyPairEd25519;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_KeyPairEd25519__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_KeyPairEd25519__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_KeyPairEd25519__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_KeyPairEd25519__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_KeyPairEd25519__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_KeyPairEd25519__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_KeyPairEd25519");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_exports_KeyPairEd25519_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::~_exports_KeyPairEd25519_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<KeyPairEd25519 *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_create(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::shared_ptr< Passphrase > arg1 ;
  std::shared_ptr< KeyPairEd25519 > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_create.");
    }
    
    {
      {
        Passphrase *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_Passphrase,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "KeyPairEd25519_create" "', argument " "1"" of type '" "Passphrase""'");
        }
        arg1 = std::shared_ptr< Passphrase>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = KeyPairEd25519::create(SWIG_STD_MOVE(arg1));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<KeyPairEd25519 *>((&result)->get()), SWIGTYPE_p_KeyPairEd25519, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< KeyPairEd25519>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_calculatePublicKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  memory::ConstBlockPtr arg1 ;
  SwigValueWrapper< memory::Block > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_calculatePublicKey.");
    }
    
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "KeyPairEd25519_calculatePublicKey" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = KeyPairEd25519::calculatePublicKey(SWIG_STD_MOVE(arg1));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_deriveChild(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::shared_ptr< KeyPairEd25519Ex > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_deriveChild.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_deriveChild" "', argument " "1"" of type '" "KeyPairEd25519 *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeyPairEd25519_deriveChild" "', argument " "2"" of type '" "uint32_t""'");
    } 
    arg2 = static_cast< uint32_t >(val2);
    
    
    
    
    {
      try {
        result = (arg1)->deriveChild(arg2);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<KeyPairEd25519Ex *>((&result)->get()), SWIGTYPE_p_KeyPairEd25519Ex, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< KeyPairEd25519Ex>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_getDerivationType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  Ed25519DerivationType result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_getDerivationType.");
    }
    
    ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "KeyPairEd25519_getDerivationType" "', argument " "1"" of type '" "uint32_t""'");
    } 
    arg1 = static_cast< uint32_t >(val1);
    
    
    
    
    {
      try {
        result = (Ed25519DerivationType)KeyPairEd25519::getDerivationType(arg1);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_sign__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  memory::Block *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_sign" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairEd25519_sign" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_sign" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);
    
    
    
    
    {
      try {
        result = ((KeyPairEd25519 const *)arg1)->sign((memory::Block const &)*arg2);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_sign__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_sign" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);{
      {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairEd25519_sign" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_sign" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        arg2 = ptr;
      }
    }
    
    
    
    
    
    {
      try {
        result = ((KeyPairEd25519 const *)arg1)->sign((std::string const &)*arg2);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_sign__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_sign" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);{
      {
        if (!info[1].IsTypedArray()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Uint8Array as input");
        }
        
        Napi::Uint8Array array = info[1].As<Napi::Uint8Array>();
        arg2 = array.Data();  
        arg3 = array.ByteLength();
      }
    }
    
    
    
    
    
    {
      try {
        result = ((KeyPairEd25519 const *)arg1)->sign((unsigned char const *)arg2,SWIG_STD_MOVE(arg3));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519__wrap_KeyPairEd25519_sign(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_KeyPairEd25519_sign__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_KeyPairEd25519_sign__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_KeyPairEd25519_sign__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_KeyPairEd25519_sign__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_KeyPairEd25519_sign__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_KeyPairEd25519_sign__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function sign.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_verify__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_verify" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);{
      {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairEd25519_verify" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_verify" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        arg2 = ptr;
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(info[1], &ptr);
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KeyPairEd25519_verify" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_verify" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        arg3 = ptr;
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((KeyPairEd25519 const *)arg1)->verify((std::string const &)*arg2,(std::string const &)*arg3);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_verify__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  memory::Block *arg2 = 0 ;
  memory::Block *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_verify" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairEd25519_verify" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_verify" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KeyPairEd25519_verify" "', argument " "3"" of type '" "memory::Block const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_verify" "', argument " "3"" of type '" "memory::Block const &""'"); 
    }
    arg3 = reinterpret_cast< memory::Block * >(argp3);
    
    
    
    
    {
      try {
        result = (bool)((KeyPairEd25519 const *)arg1)->verify((memory::Block const &)*arg2,(memory::Block const &)*arg3);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519__wrap_KeyPairEd25519_verify(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_KeyPairEd25519_verify__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_KeyPairEd25519_verify__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_KeyPairEd25519_verify__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_KeyPairEd25519_verify__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function verify.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_is3rdHighestBitClear(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_is3rdHighestBitClear.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_is3rdHighestBitClear" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((KeyPairEd25519 const *)arg1)->is3rdHighestBitClear();
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_getPublicKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_getPublicKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_getPublicKey" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);
    
    
    
    
    {
      try {
        result = ((KeyPairEd25519 const *)arg1)->getPublicKey();
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_getChainCode(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_getChainCode.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_getChainCode" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);
    
    
    
    
    {
      try {
        result = ((KeyPairEd25519 const *)arg1)->getChainCode();
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_isTheSame__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  KeyPairEd25519 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_isTheSame" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_KeyPairEd25519,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairEd25519_isTheSame" "', argument " "2"" of type '" "KeyPairEd25519 const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_isTheSame" "', argument " "2"" of type '" "KeyPairEd25519 const &""'"); 
    }
    arg2 = reinterpret_cast< KeyPairEd25519 * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((KeyPairEd25519 const *)arg1)->isTheSame((KeyPairEd25519 const &)*arg2);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_isTheSame__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_isTheSame" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "KeyPairEd25519_isTheSame" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (int)((KeyPairEd25519 const *)arg1)->isTheSame(SWIG_STD_MOVE(arg2));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519__wrap_KeyPairEd25519_isTheSame(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_KeyPairEd25519_isTheSame__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_KeyPairEd25519_isTheSame__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_KeyPairEd25519_isTheSame__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_KeyPairEd25519_isTheSame__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function isTheSame.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  KeyPairEd25519 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_equal" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_KeyPairEd25519,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairEd25519_equal" "', argument " "2"" of type '" "KeyPairEd25519 const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_equal" "', argument " "2"" of type '" "KeyPairEd25519 const &""'"); 
    }
    arg2 = reinterpret_cast< KeyPairEd25519 * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((KeyPairEd25519 const *)arg1)->operator ==((KeyPairEd25519 const &)*arg2);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_notEqual(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  KeyPairEd25519 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_notEqual.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_notEqual" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_KeyPairEd25519,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairEd25519_notEqual" "', argument " "2"" of type '" "KeyPairEd25519 const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairEd25519_notEqual" "', argument " "2"" of type '" "KeyPairEd25519 const &""'"); 
    }
    arg2 = reinterpret_cast< KeyPairEd25519 * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((KeyPairEd25519 const *)arg1)->operator !=((KeyPairEd25519 const &)*arg2);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_hasPrivateKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_hasPrivateKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_hasPrivateKey" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((KeyPairEd25519 const *)arg1)->hasPrivateKey();
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519_getCryptedPrivKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  std::shared_ptr< SecretKeyCryptography > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519_getCryptedPrivKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519_getCryptedPrivKey" "', argument " "1"" of type '" "KeyPairEd25519 const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);{
      {
        SecretKeyCryptography *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_SecretKeyCryptography,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "KeyPairEd25519_getCryptedPrivKey" "', argument " "2"" of type '" "SecretKeyCryptography""'");
        }
        arg2 = std::shared_ptr< SecretKeyCryptography>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = ((KeyPairEd25519 const *)arg1)->getCryptedPrivKey(SWIG_STD_MOVE(arg2));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_KeyPairEd25519Ex_templ<SWIG_OBJ_WRAP>::_exports_KeyPairEd25519Ex_templ(const Napi::CallbackInfo &info)
:_exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_KeyPairEd25519Ex;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  memory::ConstBlockPtr arg1 ;
  memory::ConstBlockPtr arg2 ;
  memory::ConstBlockPtr arg3 ;
  int arg4 ;
  int val4 ;
  int ecode4 = 0 ;
  KeyPairEd25519Ex *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_KeyPairEd25519Ex.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519Ex" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519Ex" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_KeyPairEd25519Ex" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_KeyPairEd25519Ex" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);{
      try {
        result = (KeyPairEd25519Ex *)new KeyPairEd25519Ex(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_KeyPairEd25519Ex_templ<SWIG_OBJ_WRAP>::_exports_KeyPairEd25519Ex_templ(bool, const Napi::CallbackInfo &info)
:_exports_KeyPairEd25519_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_KeyPairEd25519Ex_templ<SWIG_OBJ_WRAP>::~_exports_KeyPairEd25519Ex_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<KeyPairEd25519Ex *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519Ex_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519Ex_sign(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519Ex *arg1 = (KeyPairEd25519Ex *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519Ex_sign.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519Ex, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519Ex_sign" "', argument " "1"" of type '" "KeyPairEd25519Ex const *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519Ex * >(argp1);{
      {
        if (!info[1].IsTypedArray()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Uint8Array as input");
        }
        
        Napi::Uint8Array array = info[1].As<Napi::Uint8Array>();
        arg2 = array.Data();  
        arg3 = array.ByteLength();
      }
    }
    
    
    
    
    
    {
      try {
        result = ((KeyPairEd25519Ex const *)arg1)->sign((unsigned char const *)arg2,SWIG_STD_MOVE(arg3));
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_KeyPairEd25519Ex_templ<SWIG_OBJ_WRAP>::_wrap_KeyPairEd25519Ex_isChildOf(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  KeyPairEd25519Ex *arg1 = (KeyPairEd25519Ex *) 0 ;
  KeyPairEd25519 *arg2 = (KeyPairEd25519 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_KeyPairEd25519Ex_isChildOf.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_KeyPairEd25519Ex, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairEd25519Ex_isChildOf" "', argument " "1"" of type '" "KeyPairEd25519Ex *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519Ex * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairEd25519Ex_isChildOf" "', argument " "2"" of type '" "KeyPairEd25519 *""'"); 
    }
    arg2 = reinterpret_cast< KeyPairEd25519 * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)(arg1)->isChildOf(arg2);
      } catch (const Ed25519SignException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519VerifyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519DeriveException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519InvalidKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const Ed25519MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const ED25519InvalidPrivateKeyForPublicKey& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_new_AuthenticatedEncryption__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  AuthenticatedEncryption *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AuthenticatedEncryption__SWIG_0.");
    }
    {
      try {
        result = (AuthenticatedEncryption *)new AuthenticatedEncryption();
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_new_AuthenticatedEncryption__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  KeyPairEd25519 *arg1 = (KeyPairEd25519 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AuthenticatedEncryption *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AuthenticatedEncryption__SWIG_1.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_KeyPairEd25519, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AuthenticatedEncryption" "', argument " "1"" of type '" "KeyPairEd25519 *""'"); 
    }
    arg1 = reinterpret_cast< KeyPairEd25519 * >(argp1);{
      try {
        result = (AuthenticatedEncryption *)new AuthenticatedEncryption(arg1);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_new_AuthenticatedEncryption__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  AuthenticatedEncryption *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AuthenticatedEncryption__SWIG_2.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_AuthenticatedEncryption" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (AuthenticatedEncryption *)new AuthenticatedEncryption(SWIG_STD_MOVE(arg1));
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_exports_AuthenticatedEncryption_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_AuthenticatedEncryption;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_AuthenticatedEncryption__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_AuthenticatedEncryption__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_AuthenticatedEncryption__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_AuthenticatedEncryption__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_AuthenticatedEncryption__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_AuthenticatedEncryption__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_AuthenticatedEncryption");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_exports_AuthenticatedEncryption_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::~_exports_AuthenticatedEncryption_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<AuthenticatedEncryption *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_encrypt__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  AuthenticatedEncryption *arg4 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);{
      {
        if (!info[1].IsTypedArray()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Uint8Array as input");
        }
        
        Napi::Uint8Array array = info[1].As<Napi::Uint8Array>();
        arg2 = array.Data();  
        arg3 = array.ByteLength();
      }
    }
    res4 = SWIG_ConvertPtr(info[1], &argp4,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "4"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg4 = reinterpret_cast< AuthenticatedEncryption * >(argp4);
    
    
    
    
    {
      try {
        result = (arg1)->encrypt((unsigned char const *)arg2,SWIG_STD_MOVE(arg3),arg4);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_encrypt__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  memory::Block *arg2 = 0 ;
  AuthenticatedEncryption *arg3 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AuthenticatedEncryption_encrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);res3 = SWIG_ConvertPtr(info[1], &argp3,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "3"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg3 = reinterpret_cast< AuthenticatedEncryption * >(argp3);
    
    
    
    
    {
      try {
        result = (arg1)->encrypt((memory::Block const &)*arg2,arg3);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_encrypt__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  std::string *arg2 = 0 ;
  AuthenticatedEncryption *arg3 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);{
      {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AuthenticatedEncryption_encrypt" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        arg2 = ptr;
      }
    }
    res3 = SWIG_ConvertPtr(info[1], &argp3,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "3"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg3 = reinterpret_cast< AuthenticatedEncryption * >(argp3);
    
    
    
    
    {
      try {
        result = (arg1)->encrypt((std::string const &)*arg2,arg3);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_encrypt__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  memory::Block *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AuthenticatedEncryption_encrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);ecode3 = SWIG_AsVal_int(info[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AuthenticatedEncryption_encrypt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    
    
    
    
    {
      try {
        result = (arg1)->encrypt((memory::Block const &)*arg2,arg3);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption__wrap_AuthenticatedEncryption_encrypt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_AuthenticatedEncryption_encrypt__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_AuthenticatedEncryption_encrypt__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_AuthenticatedEncryption_encrypt__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_AuthenticatedEncryption_encrypt__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_AuthenticatedEncryption_encrypt__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_AuthenticatedEncryption_encrypt__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_AuthenticatedEncryption_encrypt__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_AuthenticatedEncryption_encrypt__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function encrypt.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_decrypt__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  memory::Block *arg2 = 0 ;
  AuthenticatedEncryption *arg3 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_decrypt" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AuthenticatedEncryption_decrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AuthenticatedEncryption_decrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);res3 = SWIG_ConvertPtr(info[1], &argp3,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AuthenticatedEncryption_decrypt" "', argument " "3"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg3 = reinterpret_cast< AuthenticatedEncryption * >(argp3);
    
    
    
    
    {
      try {
        result = (arg1)->decrypt((memory::Block const &)*arg2,arg3);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_decrypt__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  memory::Block *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< memory::Block > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_decrypt" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_memory__Block,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AuthenticatedEncryption_decrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AuthenticatedEncryption_decrypt" "', argument " "2"" of type '" "memory::Block const &""'"); 
    }
    arg2 = reinterpret_cast< memory::Block * >(argp2);ecode3 = SWIG_AsVal_int(info[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AuthenticatedEncryption_decrypt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    
    
    
    
    {
      try {
        result = (arg1)->decrypt((memory::Block const &)*arg2,arg3);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new memory::Block(result)), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption__wrap_AuthenticatedEncryption_decrypt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_AuthenticatedEncryption_decrypt__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_AuthenticatedEncryption_decrypt__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_AuthenticatedEncryption_decrypt__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_AuthenticatedEncryption_decrypt__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function decrypt.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_precalculateSharedSecret(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  AuthenticatedEncryption *arg2 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_AuthenticatedEncryption_precalculateSharedSecret.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_precalculateSharedSecret" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AuthenticatedEncryption_precalculateSharedSecret" "', argument " "2"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg2 = reinterpret_cast< AuthenticatedEncryption * >(argp2);
    
    
    
    
    {
      try {
        result = (int)(arg1)->precalculateSharedSecret(arg2);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_removePrecalculatedSharedSecret(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_AuthenticatedEncryption_removePrecalculatedSharedSecret.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_removePrecalculatedSharedSecret" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AuthenticatedEncryption_removePrecalculatedSharedSecret" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    
    
    
    
    {
      try {
        result = (bool)(arg1)->removePrecalculatedSharedSecret(arg2);
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_mPubkey_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  memory::ConstBlockPtr *arg2 = (memory::ConstBlockPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_mPubkey_set" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(value, reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "AuthenticatedEncryption_mPubkey_set" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = new std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    if (arg1) (arg1)->mPubkey = *arg2;
    
    {
      delete arg2;
    }
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg2;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg2;
  }
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_mPubkey_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_mPubkey_get" "', argument " "1"" of type '" "AuthenticatedEncryption *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);
    
    result = (memory::ConstBlockPtr *)& ((arg1)->mPubkey);
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__shared_ptrT_memory__Block_const_t, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_getPublicKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_AuthenticatedEncryption_getPublicKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_getPublicKey" "', argument " "1"" of type '" "AuthenticatedEncryption const *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);
    
    
    
    
    {
      try {
        result = ((AuthenticatedEncryption const *)arg1)->getPublicKey();
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_getPrivateKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_AuthenticatedEncryption_getPrivateKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_getPrivateKey" "', argument " "1"" of type '" "AuthenticatedEncryption const *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);
    
    
    
    
    {
      try {
        result = ((AuthenticatedEncryption const *)arg1)->getPrivateKey();
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_AuthenticatedEncryption_templ<SWIG_OBJ_WRAP>::_wrap_AuthenticatedEncryption_hasPrivateKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  AuthenticatedEncryption *arg1 = (AuthenticatedEncryption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_AuthenticatedEncryption_hasPrivateKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_AuthenticatedEncryption, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AuthenticatedEncryption_hasPrivateKey" "', argument " "1"" of type '" "AuthenticatedEncryption const *""'"); 
    }
    arg1 = reinterpret_cast< AuthenticatedEncryption * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((AuthenticatedEncryption const *)arg1)->hasPrivateKey();
      } catch (const AuthenticatedEncryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedDecryptionException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedKeyTransformationException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const AuthenticatedPrepareException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_new_GradidoUnit__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  GradidoUnit *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoUnit__SWIG_0.");
    }
    {
      try {
        result = (GradidoUnit *)new GradidoUnit();
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_new_GradidoUnit__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  GradidoUnit *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoUnit__SWIG_1.");
    }
    ecode1 = SWIG_AsVal_double(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GradidoUnit" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);{
      try {
        result = (GradidoUnit *)new GradidoUnit(arg1);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_new_GradidoUnit__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  GradidoUnit *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoUnit__SWIG_2.");
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GradidoUnit" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GradidoUnit" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    {
      try {
        result = (GradidoUnit *)new GradidoUnit((std::string const &)*arg1);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_exports_GradidoUnit_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_GradidoUnit;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_GradidoUnit__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_GradidoUnit__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_GradidoUnit__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_GradidoUnit__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_GradidoUnit__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_GradidoUnit__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_GradidoUnit");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_exports_GradidoUnit_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::~_exports_GradidoUnit_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<GradidoUnit *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_toString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_toString.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_toString" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);
    
    
    
    
    {
      try {
        result = ((GradidoUnit const *)arg1)->toString();
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_getGradidoCent(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_getGradidoCent.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_getGradidoCent" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);
    
    
    
    
    {
      try {
        result = (int64_t)((GradidoUnit const *)arg1)->getGradidoCent();
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< long long >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_value(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_value.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_value" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);
    
    
    
    
    {
      try {
        result = (double)((GradidoUnit const *)arg1)->operator double();
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_add(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  GradidoUnit *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_add.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_add" "', argument " "1"" of type '" "GradidoUnit *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_add" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_add" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (GradidoUnit *) &(arg1)->operator +=((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GradidoUnit, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_sub(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  GradidoUnit *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_sub.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_sub" "', argument " "1"" of type '" "GradidoUnit *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_sub" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_sub" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (GradidoUnit *) &(arg1)->operator -=((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GradidoUnit, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_mul(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  GradidoUnit *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_mul.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_mul" "', argument " "1"" of type '" "GradidoUnit *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_mul" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_mul" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (GradidoUnit *) &(arg1)->operator *=((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GradidoUnit, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_gt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_gt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_gt" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_gt" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_gt" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((GradidoUnit const *)arg1)->operator >((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_gte(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_gte.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_gte" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_gte" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_gte" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((GradidoUnit const *)arg1)->operator >=((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_lt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_lt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_lt" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_lt" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_lt" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((GradidoUnit const *)arg1)->operator <((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_lte(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_lte.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_lte" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_lte" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_lte" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((GradidoUnit const *)arg1)->operator <=((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_equal" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_equal" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_equal" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((GradidoUnit const *)arg1)->operator ==((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_notEqual(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  GradidoUnit *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_notEqual.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_notEqual" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_GradidoUnit,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoUnit_notEqual" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoUnit_notEqual" "', argument " "2"" of type '" "GradidoUnit const &""'"); 
    }
    arg2 = reinterpret_cast< GradidoUnit * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((GradidoUnit const *)arg1)->operator !=((GradidoUnit const &)*arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_calculateDecayDirect(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int64_t arg1 ;
  int64_t arg2 ;
  long long val1 ;
  int ecode1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  int64_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_calculateDecayDirect.");
    }
    
    ecode1 = SWIG_AsVal_long_SS_long(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GradidoUnit_calculateDecayDirect" "', argument " "1"" of type '" "int64_t""'");
    } 
    arg1 = static_cast< int64_t >(val1);ecode2 = SWIG_AsVal_long_SS_long(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GradidoUnit_calculateDecayDirect" "', argument " "2"" of type '" "int64_t""'");
    } 
    arg2 = static_cast< int64_t >(val2);
    
    
    
    
    {
      try {
        result = (int64_t)GradidoUnit::calculateDecay(arg1,arg2);
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< long long >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_calculateDecay__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  Duration arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GradidoUnit result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_calculateDecay" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);{
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg2 = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::duration<uint32_t>(info[0].As<Napi::Number>().Uint32Value()));
      }
    }
    
    
    
    
    
    {
      try {
        result = ((GradidoUnit const *)arg1)->calculateDecay(SWIG_STD_MOVE(arg2));
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_calculateDecay__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit *arg1 = (GradidoUnit *) 0 ;
  Timepoint arg2 ;
  Timepoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GradidoUnit result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_GradidoUnit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoUnit_calculateDecay" "', argument " "1"" of type '" "GradidoUnit const *""'"); 
    }
    arg1 = reinterpret_cast< GradidoUnit * >(argp1);{
      {
        if(!info[0].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[0].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = ((GradidoUnit const *)arg1)->calculateDecay(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit__wrap_GradidoUnit_calculateDecay(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_GradidoUnit_calculateDecay__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_GradidoUnit_calculateDecay__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_GradidoUnit_calculateDecay__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_GradidoUnit_calculateDecay__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function calculateDecay.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_calculateDecayDurationSeconds(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Timepoint arg1 ;
  Timepoint arg2 ;
  Duration result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_calculateDecayDurationSeconds.");
    }
    
    {
      {
        if(!info[0].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg1 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[0].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = GradidoUnit::calculateDecayDurationSeconds(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      double seconds = std::chrono::duration_cast<std::chrono::seconds>(result).count();
      jsresult = Napi::Number::New(env, std::chrono::duration_cast<std::chrono::seconds>(result).count());
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoUnit_templ<SWIG_OBJ_WRAP>::_wrap_GradidoUnit_zero(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  GradidoUnit result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoUnit_zero.");
    }
    
    
    
    
    
    
    {
      try {
        result = GradidoUnit::zero();
      } catch (const FixedPointedArithmetikOverflowException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_new_SignaturePairs__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< gradido::data::SignaturePair > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignaturePairs__SWIG_0.");
    }
    {
      try {
        result = (std::vector< gradido::data::SignaturePair > *)new std::vector< gradido::data::SignaturePair >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_new_SignaturePairs__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< gradido::data::SignaturePair >::size_type arg1 ;
  std::vector< gradido::data::SignaturePair > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignaturePairs__SWIG_1.");
    }
    {
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg1 = static_cast<size_t>(info[0].As<Napi::Number>().Uint32Value());
      }
    }
    {
      try {
        result = (std::vector< gradido::data::SignaturePair > *)new std::vector< gradido::data::SignaturePair >(SWIG_STD_MOVE(arg1));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_new_SignaturePairs__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< gradido::data::SignaturePair > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< gradido::data::SignaturePair > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignaturePairs__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SignaturePairs" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SignaturePairs" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > const &""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);{
      try {
        result = (std::vector< gradido::data::SignaturePair > *)new std::vector< gradido::data::SignaturePair >((std::vector< gradido::data::SignaturePair > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_exports_SignaturePairs_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignaturePairs__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignaturePairs__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignaturePairs__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignaturePairs__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignaturePairs__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignaturePairs__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_SignaturePairs");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_exports_SignaturePairs_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePairs_size(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< gradido::data::SignaturePair > *arg1 = (std::vector< gradido::data::SignaturePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< gradido::data::SignaturePair >::size_type result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePairs_size.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePairs_size" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);
    
    
    
    
    {
      try {
        result = ((std::vector< gradido::data::SignaturePair > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<double>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePairs_capacity(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< gradido::data::SignaturePair > *arg1 = (std::vector< gradido::data::SignaturePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< gradido::data::SignaturePair >::size_type result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePairs_capacity.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePairs_capacity" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);
    
    
    
    
    {
      try {
        result = ((std::vector< gradido::data::SignaturePair > const *)arg1)->capacity();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<double>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePairs_reserve(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< gradido::data::SignaturePair > *arg1 = (std::vector< gradido::data::SignaturePair > *) 0 ;
  std::vector< gradido::data::SignaturePair >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePairs_reserve.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePairs_reserve" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);{
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg2 = static_cast<size_t>(info[0].As<Napi::Number>().Uint32Value());
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->reserve(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePairs_isEmpty(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< gradido::data::SignaturePair > *arg1 = (std::vector< gradido::data::SignaturePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePairs_isEmpty.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePairs_isEmpty" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((std::vector< gradido::data::SignaturePair > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePairs_clear(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< gradido::data::SignaturePair > *arg1 = (std::vector< gradido::data::SignaturePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePairs_clear.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePairs_clear" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePairs_add(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< gradido::data::SignaturePair > *arg1 = (std::vector< gradido::data::SignaturePair > *) 0 ;
  std::vector< gradido::data::SignaturePair >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePairs_add.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePairs_add" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__SignaturePair,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SignaturePairs_add" "', argument " "2"" of type '" "std::vector< gradido::data::SignaturePair >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SignaturePairs_add" "', argument " "2"" of type '" "std::vector< gradido::data::SignaturePair >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< gradido::data::SignaturePair >::value_type * >(argp2);
    
    
    
    
    {
      try {
        (arg1)->push_back((std::vector< gradido::data::SignaturePair >::value_type const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePairs_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< gradido::data::SignaturePair > *arg1 = (std::vector< gradido::data::SignaturePair > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< gradido::data::SignaturePair >::value_type *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePairs_get.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePairs_get" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SignaturePairs_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    
    
    
    try {
      {
        try {
          result = (std::vector< gradido::data::SignaturePair >::value_type *) &std_vector_Sl_gradido_data_SignaturePair_Sg__get(arg1,arg2);
        } catch (const std::exception& e) {
          SWIG_exception(SWIG_RuntimeError, e.what());
        }
      }
      
    } catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__data__SignaturePair, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePairs_set(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< gradido::data::SignaturePair > *arg1 = (std::vector< gradido::data::SignaturePair > *) 0 ;
  int arg2 ;
  std::vector< gradido::data::SignaturePair >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePairs_set.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePairs_set" "', argument " "1"" of type '" "std::vector< gradido::data::SignaturePair > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< gradido::data::SignaturePair > * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SignaturePairs_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_gradido__data__SignaturePair,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SignaturePairs_set" "', argument " "3"" of type '" "std::vector< gradido::data::SignaturePair >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SignaturePairs_set" "', argument " "3"" of type '" "std::vector< gradido::data::SignaturePair >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< gradido::data::SignaturePair >::value_type * >(argp3);
    
    
    
    try {
      {
        try {
          std_vector_Sl_gradido_data_SignaturePair_Sg__set(arg1,arg2,(gradido::data::SignaturePair const &)*arg3);
        } catch (const std::exception& e) {
          SWIG_exception(SWIG_RuntimeError, e.what());
        }
      }
      
    } catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_SignaturePairs_templ<SWIG_OBJ_WRAP>::~_exports_SignaturePairs_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<std::vector< gradido::data::SignaturePair > *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransferAmount_templ<SWIG_OBJ_WRAP>::_wrap_new_TransferAmount__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gradido::data::TransferAmount *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransferAmount__SWIG_0.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_TransferAmount" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(info[1], &ptr);
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransferAmount" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransferAmount" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        arg2 = ptr;
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(info[2], &ptr);
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TransferAmount" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransferAmount" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        arg3 = ptr;
      }
    }
    {
      try {
        result = (gradido::data::TransferAmount *)new gradido::data::TransferAmount(SWIG_STD_MOVE(arg1),(std::string const &)*arg2,(std::string const &)*arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransferAmount_templ<SWIG_OBJ_WRAP>::_wrap_new_TransferAmount__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  std::string *arg2 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gradido::data::TransferAmount *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransferAmount__SWIG_1.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_TransferAmount" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(info[1], &ptr);
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransferAmount" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransferAmount" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        arg2 = ptr;
      }
    }
    {
      try {
        result = (gradido::data::TransferAmount *)new gradido::data::TransferAmount(SWIG_STD_MOVE(arg1),(std::string const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_TransferAmount_templ<SWIG_OBJ_WRAP>::_exports_TransferAmount_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__TransferAmount;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransferAmount__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransferAmount__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransferAmount__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransferAmount__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_TransferAmount");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TransferAmount_templ<SWIG_OBJ_WRAP>::_exports_TransferAmount_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TransferAmount_templ<SWIG_OBJ_WRAP>::~_exports_TransferAmount_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::TransferAmount *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransferAmount_templ<SWIG_OBJ_WRAP>::_wrap_TransferAmount_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransferAmount *arg1 = (gradido::data::TransferAmount *) 0 ;
  gradido::data::TransferAmount *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransferAmount_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransferAmount, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransferAmount_equal" "', argument " "1"" of type '" "gradido::data::TransferAmount const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransferAmount * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TransferAmount,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransferAmount_equal" "', argument " "2"" of type '" "gradido::data::TransferAmount const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransferAmount_equal" "', argument " "2"" of type '" "gradido::data::TransferAmount const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TransferAmount * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransferAmount const *)arg1)->operator ==((gradido::data::TransferAmount const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransferAmount_templ<SWIG_OBJ_WRAP>::_wrap_TransferAmount_getPubkey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransferAmount *arg1 = (gradido::data::TransferAmount *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransferAmount_getPubkey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransferAmount, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransferAmount_getPubkey" "', argument " "1"" of type '" "gradido::data::TransferAmount const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransferAmount * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransferAmount const *)arg1)->getPubkey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransferAmount_templ<SWIG_OBJ_WRAP>::_wrap_TransferAmount_getAmount(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransferAmount *arg1 = (gradido::data::TransferAmount *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GradidoUnit result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransferAmount_getAmount.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransferAmount, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransferAmount_getAmount" "', argument " "1"" of type '" "gradido::data::TransferAmount const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransferAmount * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransferAmount const *)arg1)->getAmount();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransferAmount_templ<SWIG_OBJ_WRAP>::_wrap_TransferAmount_getCommunityId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransferAmount *arg1 = (gradido::data::TransferAmount *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransferAmount_getCommunityId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransferAmount, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransferAmount_getCommunityId" "', argument " "1"" of type '" "gradido::data::TransferAmount const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransferAmount * >(argp1);
    
    
    
    
    {
      try {
        result = (std::string *) &((gradido::data::TransferAmount const *)arg1)->getCommunityId();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(*result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_new_TimestampSeconds__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::TimestampSeconds *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TimestampSeconds__SWIG_0.");
    }
    {
      try {
        result = (gradido::data::TimestampSeconds *)new gradido::data::TimestampSeconds();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_new_TimestampSeconds__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  Timepoint *arg1 = 0 ;
  Timepoint temp1 ;
  gradido::data::TimestampSeconds *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TimestampSeconds__SWIG_1.");
    }
    {
      {
        if(!info[0].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        temp1 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[0].As<Napi::Date>().ValueOf())));
        arg1 = &temp1;
      }
    }
    {
      try {
        result = (gradido::data::TimestampSeconds *)new gradido::data::TimestampSeconds((Timepoint const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_new_TimestampSeconds__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  int64_t arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  gradido::data::TimestampSeconds *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TimestampSeconds__SWIG_2.");
    }
    ecode1 = SWIG_AsVal_long_SS_long(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TimestampSeconds" "', argument " "1"" of type '" "int64_t""'");
    } 
    arg1 = static_cast< int64_t >(val1);{
      try {
        result = (gradido::data::TimestampSeconds *)new gradido::data::TimestampSeconds(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_exports_TimestampSeconds_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__TimestampSeconds;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TimestampSeconds__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TimestampSeconds__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TimestampSeconds__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TimestampSeconds__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TimestampSeconds__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TimestampSeconds__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_TimestampSeconds");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_exports_TimestampSeconds_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_TimestampSeconds_getDate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TimestampSeconds *arg1 = (gradido::data::TimestampSeconds *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Timepoint result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimestampSeconds_getDate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TimestampSeconds, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimestampSeconds_getDate" "', argument " "1"" of type '" "gradido::data::TimestampSeconds const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TimestampSeconds const *)arg1)->getAsTimepoint();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      double ms = std::chrono::duration_cast<std::chrono::milliseconds>((&result)->time_since_epoch()).count();
      jsresult = Napi::Date::New(env, ms);
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_TimestampSeconds_getSeconds(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TimestampSeconds *arg1 = (gradido::data::TimestampSeconds *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimestampSeconds_getSeconds.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TimestampSeconds, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimestampSeconds_getSeconds" "', argument " "1"" of type '" "gradido::data::TimestampSeconds const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp1);
    
    
    
    
    {
      try {
        result = (int64_t)((gradido::data::TimestampSeconds const *)arg1)->getSeconds();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< long long >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_TimestampSeconds_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TimestampSeconds *arg1 = (gradido::data::TimestampSeconds *) 0 ;
  gradido::data::TimestampSeconds *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimestampSeconds_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TimestampSeconds, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimestampSeconds_equal" "', argument " "1"" of type '" "gradido::data::TimestampSeconds const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TimestampSeconds,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimestampSeconds_equal" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimestampSeconds_equal" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TimestampSeconds const *)arg1)->operator ==((gradido::data::TimestampSeconds const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_TimestampSeconds_notEqual(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TimestampSeconds *arg1 = (gradido::data::TimestampSeconds *) 0 ;
  gradido::data::TimestampSeconds *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimestampSeconds_notEqual.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TimestampSeconds, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimestampSeconds_notEqual" "', argument " "1"" of type '" "gradido::data::TimestampSeconds const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TimestampSeconds,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimestampSeconds_notEqual" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimestampSeconds_notEqual" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TimestampSeconds const *)arg1)->operator !=((gradido::data::TimestampSeconds const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_TimestampSeconds_lt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TimestampSeconds *arg1 = (gradido::data::TimestampSeconds *) 0 ;
  gradido::data::TimestampSeconds *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimestampSeconds_lt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TimestampSeconds, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimestampSeconds_lt" "', argument " "1"" of type '" "gradido::data::TimestampSeconds const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TimestampSeconds,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimestampSeconds_lt" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimestampSeconds_lt" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TimestampSeconds const *)arg1)->operator <((gradido::data::TimestampSeconds const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_TimestampSeconds_lte(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TimestampSeconds *arg1 = (gradido::data::TimestampSeconds *) 0 ;
  gradido::data::TimestampSeconds *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimestampSeconds_lte.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TimestampSeconds, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimestampSeconds_lte" "', argument " "1"" of type '" "gradido::data::TimestampSeconds const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TimestampSeconds,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimestampSeconds_lte" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimestampSeconds_lte" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TimestampSeconds const *)arg1)->operator <=((gradido::data::TimestampSeconds const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_TimestampSeconds_gt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TimestampSeconds *arg1 = (gradido::data::TimestampSeconds *) 0 ;
  gradido::data::TimestampSeconds *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimestampSeconds_gt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TimestampSeconds, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimestampSeconds_gt" "', argument " "1"" of type '" "gradido::data::TimestampSeconds const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TimestampSeconds,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimestampSeconds_gt" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimestampSeconds_gt" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TimestampSeconds const *)arg1)->operator >((gradido::data::TimestampSeconds const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::_wrap_TimestampSeconds_gte(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TimestampSeconds *arg1 = (gradido::data::TimestampSeconds *) 0 ;
  gradido::data::TimestampSeconds *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimestampSeconds_gte.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TimestampSeconds, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimestampSeconds_gte" "', argument " "1"" of type '" "gradido::data::TimestampSeconds const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TimestampSeconds,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimestampSeconds_gte" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimestampSeconds_gte" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TimestampSeconds const *)arg1)->operator >=((gradido::data::TimestampSeconds const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TimestampSeconds_templ<SWIG_OBJ_WRAP>::~_exports_TimestampSeconds_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::TimestampSeconds *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_new_Timestamp__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::Timestamp *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Timestamp__SWIG_0.");
    }
    {
      try {
        result = (gradido::data::Timestamp *)new gradido::data::Timestamp();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_new_Timestamp__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  Timepoint *arg1 = 0 ;
  Timepoint temp1 ;
  gradido::data::Timestamp *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Timestamp__SWIG_1.");
    }
    {
      {
        if(!info[0].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        temp1 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[0].As<Napi::Date>().ValueOf())));
        arg1 = &temp1;
      }
    }
    {
      try {
        result = (gradido::data::Timestamp *)new gradido::data::Timestamp((Timepoint const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_new_Timestamp__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  int64_t arg1 ;
  int32_t arg2 ;
  long long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gradido::data::Timestamp *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Timestamp__SWIG_2.");
    }
    ecode1 = SWIG_AsVal_long_SS_long(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Timestamp" "', argument " "1"" of type '" "int64_t""'");
    } 
    arg1 = static_cast< int64_t >(val1);ecode2 = SWIG_AsVal_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Timestamp" "', argument " "2"" of type '" "int32_t""'");
    } 
    arg2 = static_cast< int32_t >(val2);{
      try {
        result = (gradido::data::Timestamp *)new gradido::data::Timestamp(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_Timestamp_templ<SWIG_OBJ_WRAP>::_exports_Timestamp_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__Timestamp;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_Timestamp__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_Timestamp__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_Timestamp__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_Timestamp__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_Timestamp__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_Timestamp__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_Timestamp");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_Timestamp_templ<SWIG_OBJ_WRAP>::_exports_Timestamp_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp_getDate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::Timestamp *arg1 = (gradido::data::Timestamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Timepoint result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Timestamp_getDate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__Timestamp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timestamp_getDate" "', argument " "1"" of type '" "gradido::data::Timestamp const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::Timestamp * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::Timestamp const *)arg1)->getAsTimepoint();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      double ms = std::chrono::duration_cast<std::chrono::milliseconds>((&result)->time_since_epoch()).count();
      jsresult = Napi::Date::New(env, ms);
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp_getSeconds(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::Timestamp *arg1 = (gradido::data::Timestamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Timestamp_getSeconds.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__Timestamp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timestamp_getSeconds" "', argument " "1"" of type '" "gradido::data::Timestamp const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::Timestamp * >(argp1);
    
    
    
    
    {
      try {
        result = (int64_t)((gradido::data::Timestamp const *)arg1)->getSeconds();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< long long >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp_getNanos(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::Timestamp *arg1 = (gradido::data::Timestamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Timestamp_getNanos.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__Timestamp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timestamp_getNanos" "', argument " "1"" of type '" "gradido::data::Timestamp const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::Timestamp * >(argp1);
    
    
    
    
    {
      try {
        result = (int32_t)((gradido::data::Timestamp const *)arg1)->getNanos();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::Timestamp *arg1 = (gradido::data::Timestamp *) 0 ;
  gradido::data::Timestamp *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Timestamp_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__Timestamp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timestamp_equal" "', argument " "1"" of type '" "gradido::data::Timestamp const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::Timestamp * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__Timestamp,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timestamp_equal" "', argument " "2"" of type '" "gradido::data::Timestamp const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Timestamp_equal" "', argument " "2"" of type '" "gradido::data::Timestamp const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::Timestamp * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::Timestamp const *)arg1)->operator ==((gradido::data::Timestamp const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp_lt__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::Timestamp *arg1 = (gradido::data::Timestamp *) 0 ;
  gradido::data::Timestamp *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__Timestamp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timestamp_lt" "', argument " "1"" of type '" "gradido::data::Timestamp const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::Timestamp * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__Timestamp,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timestamp_lt" "', argument " "2"" of type '" "gradido::data::Timestamp const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Timestamp_lt" "', argument " "2"" of type '" "gradido::data::Timestamp const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::Timestamp * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::Timestamp const *)arg1)->operator <((gradido::data::Timestamp const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp_gt__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::Timestamp *arg1 = (gradido::data::Timestamp *) 0 ;
  gradido::data::Timestamp *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__Timestamp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timestamp_gt" "', argument " "1"" of type '" "gradido::data::Timestamp const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::Timestamp * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__Timestamp,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timestamp_gt" "', argument " "2"" of type '" "gradido::data::Timestamp const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Timestamp_gt" "', argument " "2"" of type '" "gradido::data::Timestamp const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::Timestamp * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::Timestamp const *)arg1)->operator >((gradido::data::Timestamp const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp_lt__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::Timestamp *arg1 = (gradido::data::Timestamp *) 0 ;
  gradido::data::TimestampSeconds *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__Timestamp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timestamp_lt" "', argument " "1"" of type '" "gradido::data::Timestamp const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::Timestamp * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TimestampSeconds,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timestamp_lt" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Timestamp_lt" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::Timestamp const *)arg1)->operator <((gradido::data::TimestampSeconds const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp__wrap_Timestamp_lt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Timestamp_lt__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Timestamp_lt__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Timestamp_lt__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Timestamp_lt__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function lt.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp_gt__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::Timestamp *arg1 = (gradido::data::Timestamp *) 0 ;
  gradido::data::TimestampSeconds *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__Timestamp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timestamp_gt" "', argument " "1"" of type '" "gradido::data::Timestamp const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::Timestamp * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TimestampSeconds,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timestamp_gt" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Timestamp_gt" "', argument " "2"" of type '" "gradido::data::TimestampSeconds const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TimestampSeconds * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::Timestamp const *)arg1)->operator >((gradido::data::TimestampSeconds const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Timestamp_templ<SWIG_OBJ_WRAP>::_wrap_Timestamp__wrap_Timestamp_gt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Timestamp_gt__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Timestamp_gt__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Timestamp_gt__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Timestamp_gt__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function gt.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_Timestamp_templ<SWIG_OBJ_WRAP>::~_exports_Timestamp_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::Timestamp *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePair_templ<SWIG_OBJ_WRAP>::_wrap_new_SignaturePair__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::SignaturePair *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignaturePair__SWIG_0.");
    }
    {
      try {
        result = (gradido::data::SignaturePair *)new gradido::data::SignaturePair();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePair_templ<SWIG_OBJ_WRAP>::_wrap_new_SignaturePair__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  memory::ConstBlockPtr arg2 ;
  gradido::data::SignaturePair *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignaturePair__SWIG_1.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_SignaturePair" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_SignaturePair" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::SignaturePair *)new gradido::data::SignaturePair(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_SignaturePair_templ<SWIG_OBJ_WRAP>::_exports_SignaturePair_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__SignaturePair;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignaturePair__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignaturePair__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignaturePair__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignaturePair__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_SignaturePair");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_SignaturePair_templ<SWIG_OBJ_WRAP>::_exports_SignaturePair_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePair_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePair_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::SignaturePair *arg1 = (gradido::data::SignaturePair *) 0 ;
  gradido::data::SignaturePair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePair_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__SignaturePair, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePair_equal" "', argument " "1"" of type '" "gradido::data::SignaturePair const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::SignaturePair * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__SignaturePair,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SignaturePair_equal" "', argument " "2"" of type '" "gradido::data::SignaturePair const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SignaturePair_equal" "', argument " "2"" of type '" "gradido::data::SignaturePair const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::SignaturePair * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::SignaturePair const *)arg1)->operator ==((gradido::data::SignaturePair const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePair_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePair_getPubkey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::SignaturePair *arg1 = (gradido::data::SignaturePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePair_getPubkey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__SignaturePair, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePair_getPubkey" "', argument " "1"" of type '" "gradido::data::SignaturePair const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::SignaturePair * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::SignaturePair const *)arg1)->getPubkey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignaturePair_templ<SWIG_OBJ_WRAP>::_wrap_SignaturePair_getSignature(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::SignaturePair *arg1 = (gradido::data::SignaturePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignaturePair_getSignature.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__SignaturePair, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignaturePair_getSignature" "', argument " "1"" of type '" "gradido::data::SignaturePair const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::SignaturePair * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::SignaturePair const *)arg1)->getSignature();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_SignaturePair_templ<SWIG_OBJ_WRAP>::~_exports_SignaturePair_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::SignaturePair *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignatureMap_templ<SWIG_OBJ_WRAP>::_wrap_new_SignatureMap__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  size_t arg1 ;
  gradido::data::SignatureMap *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignatureMap__SWIG_0.");
    }
    {
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg1 = static_cast<size_t>(info[0].As<Napi::Number>().Uint32Value());
      }
    }
    {
      try {
        result = (gradido::data::SignatureMap *)new gradido::data::SignatureMap(SWIG_STD_MOVE(arg1));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignatureMap_templ<SWIG_OBJ_WRAP>::_wrap_new_SignatureMap__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::SignatureMap *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignatureMap__SWIG_1.");
    }
    {
      try {
        result = (gradido::data::SignatureMap *)new gradido::data::SignatureMap();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignatureMap_templ<SWIG_OBJ_WRAP>::_wrap_new_SignatureMap__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::SignaturePair arg1 ;
  size_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  gradido::data::SignatureMap *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignatureMap__SWIG_2.");
    }
    {
      {
        res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__SignaturePair,  0 );
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SignatureMap" "', argument " "1"" of type '" "gradido::data::SignaturePair""'"); 
        }  
        if (!argp1) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SignatureMap" "', argument " "1"" of type '" "gradido::data::SignaturePair""'");
        } else {
          arg1 = *(reinterpret_cast< gradido::data::SignaturePair * >(argp1));
        }
      }
    }
    {
      {
        if(!info[1].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg2 = static_cast<size_t>(info[1].As<Napi::Number>().Uint32Value());
      }
    }
    {
      try {
        result = (gradido::data::SignatureMap *)new gradido::data::SignatureMap(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignatureMap_templ<SWIG_OBJ_WRAP>::_wrap_new_SignatureMap__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::SignaturePair arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  gradido::data::SignatureMap *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SignatureMap__SWIG_3.");
    }
    {
      {
        res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__SignaturePair,  0 );
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SignatureMap" "', argument " "1"" of type '" "gradido::data::SignaturePair""'"); 
        }  
        if (!argp1) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SignatureMap" "', argument " "1"" of type '" "gradido::data::SignaturePair""'");
        } else {
          arg1 = *(reinterpret_cast< gradido::data::SignaturePair * >(argp1));
        }
      }
    }
    {
      try {
        result = (gradido::data::SignatureMap *)new gradido::data::SignatureMap(SWIG_STD_MOVE(arg1));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_SignatureMap_templ<SWIG_OBJ_WRAP>::_exports_SignatureMap_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__SignatureMap;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignatureMap__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignatureMap__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignatureMap__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignatureMap__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignatureMap__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignatureMap__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_SignatureMap__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_SignatureMap__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_SignatureMap");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_SignatureMap_templ<SWIG_OBJ_WRAP>::_exports_SignatureMap_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignatureMap_templ<SWIG_OBJ_WRAP>::_wrap_SignatureMap_push(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::SignatureMap *arg1 = (gradido::data::SignatureMap *) 0 ;
  gradido::data::SignaturePair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignatureMap_push.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__SignatureMap, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignatureMap_push" "', argument " "1"" of type '" "gradido::data::SignatureMap *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::SignatureMap * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__SignaturePair,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SignatureMap_push" "', argument " "2"" of type '" "gradido::data::SignaturePair const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SignatureMap_push" "', argument " "2"" of type '" "gradido::data::SignaturePair const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::SignaturePair * >(argp2);
    
    
    
    
    {
      try {
        (arg1)->push((gradido::data::SignaturePair const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SignatureMap_templ<SWIG_OBJ_WRAP>::_wrap_SignatureMap_getSignaturePairs(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::SignatureMap *arg1 = (gradido::data::SignatureMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< gradido::data::SignaturePair > *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SignatureMap_getSignaturePairs.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__SignatureMap, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignatureMap_getSignaturePairs" "', argument " "1"" of type '" "gradido::data::SignatureMap const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::SignatureMap * >(argp1);
    
    
    
    
    {
      try {
        result = (std::vector< gradido::data::SignaturePair > *) &((gradido::data::SignatureMap const *)arg1)->getSignaturePairs();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_gradido__data__SignaturePair_t, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_SignatureMap_templ<SWIG_OBJ_WRAP>::~_exports_SignatureMap_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::SignatureMap *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_CommunityFriendsUpdate_templ<SWIG_OBJ_WRAP>::_exports_CommunityFriendsUpdate_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__data__CommunityFriendsUpdate;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  gradido::data::CommunityFriendsUpdate *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CommunityFriendsUpdate.");
    }
    ecode1 = SWIG_AsVal_bool(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CommunityFriendsUpdate" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);{
      try {
        result = (gradido::data::CommunityFriendsUpdate *)new gradido::data::CommunityFriendsUpdate(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_CommunityFriendsUpdate_templ<SWIG_OBJ_WRAP>::_exports_CommunityFriendsUpdate_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CommunityFriendsUpdate_templ<SWIG_OBJ_WRAP>::_wrap_CommunityFriendsUpdate_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::CommunityFriendsUpdate *arg1 = (gradido::data::CommunityFriendsUpdate *) 0 ;
  gradido::data::CommunityFriendsUpdate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CommunityFriendsUpdate_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__CommunityFriendsUpdate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunityFriendsUpdate_equal" "', argument " "1"" of type '" "gradido::data::CommunityFriendsUpdate const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::CommunityFriendsUpdate * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__CommunityFriendsUpdate,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CommunityFriendsUpdate_equal" "', argument " "2"" of type '" "gradido::data::CommunityFriendsUpdate const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CommunityFriendsUpdate_equal" "', argument " "2"" of type '" "gradido::data::CommunityFriendsUpdate const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::CommunityFriendsUpdate * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::CommunityFriendsUpdate const *)arg1)->operator ==((gradido::data::CommunityFriendsUpdate const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CommunityFriendsUpdate_templ<SWIG_OBJ_WRAP>::_wrap_CommunityFriendsUpdate_getColorFusion(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::CommunityFriendsUpdate *arg1 = (gradido::data::CommunityFriendsUpdate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CommunityFriendsUpdate_getColorFusion.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__CommunityFriendsUpdate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunityFriendsUpdate_getColorFusion" "', argument " "1"" of type '" "gradido::data::CommunityFriendsUpdate const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::CommunityFriendsUpdate * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::CommunityFriendsUpdate const *)arg1)->getColorFusion();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_CommunityFriendsUpdate_templ<SWIG_OBJ_WRAP>::~_exports_CommunityFriendsUpdate_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::CommunityFriendsUpdate *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_CommunityRoot_templ<SWIG_OBJ_WRAP>::_exports_CommunityRoot_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__data__CommunityRoot;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  memory::ConstBlockPtr arg1 ;
  memory::ConstBlockPtr arg2 ;
  memory::ConstBlockPtr arg3 ;
  gradido::data::CommunityRoot *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CommunityRoot.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_CommunityRoot" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_CommunityRoot" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_CommunityRoot" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::CommunityRoot *)new gradido::data::CommunityRoot(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_CommunityRoot_templ<SWIG_OBJ_WRAP>::_exports_CommunityRoot_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CommunityRoot_templ<SWIG_OBJ_WRAP>::_wrap_CommunityRoot_getInvolvedAddresses(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::CommunityRoot *arg1 = (gradido::data::CommunityRoot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< memory::Block const > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CommunityRoot_getInvolvedAddresses.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__CommunityRoot, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunityRoot_getInvolvedAddresses" "', argument " "1"" of type '" "gradido::data::CommunityRoot const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::CommunityRoot * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::CommunityRoot const *)arg1)->getInvolvedAddresses();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::vector< memory::ConstBlockPtr >(result)), SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_const_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CommunityRoot_templ<SWIG_OBJ_WRAP>::_wrap_CommunityRoot_isInvolved(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::CommunityRoot *arg1 = (gradido::data::CommunityRoot *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CommunityRoot_isInvolved.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__CommunityRoot, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunityRoot_isInvolved" "', argument " "1"" of type '" "gradido::data::CommunityRoot const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::CommunityRoot * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CommunityRoot_isInvolved" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::CommunityRoot const *)arg1)->isInvolved(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CommunityRoot_templ<SWIG_OBJ_WRAP>::_wrap_CommunityRoot_getPubkey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::CommunityRoot *arg1 = (gradido::data::CommunityRoot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CommunityRoot_getPubkey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__CommunityRoot, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunityRoot_getPubkey" "', argument " "1"" of type '" "gradido::data::CommunityRoot const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::CommunityRoot * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::CommunityRoot const *)arg1)->getPubkey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CommunityRoot_templ<SWIG_OBJ_WRAP>::_wrap_CommunityRoot_getGmwPubkey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::CommunityRoot *arg1 = (gradido::data::CommunityRoot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CommunityRoot_getGmwPubkey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__CommunityRoot, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunityRoot_getGmwPubkey" "', argument " "1"" of type '" "gradido::data::CommunityRoot const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::CommunityRoot * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::CommunityRoot const *)arg1)->getGmwPubkey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CommunityRoot_templ<SWIG_OBJ_WRAP>::_wrap_CommunityRoot_getAufPubkey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::CommunityRoot *arg1 = (gradido::data::CommunityRoot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CommunityRoot_getAufPubkey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__CommunityRoot, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommunityRoot_getAufPubkey" "', argument " "1"" of type '" "gradido::data::CommunityRoot const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::CommunityRoot * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::CommunityRoot const *)arg1)->getAufPubkey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_CommunityRoot_templ<SWIG_OBJ_WRAP>::~_exports_CommunityRoot_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::CommunityRoot *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_GradidoCreation_templ<SWIG_OBJ_WRAP>::_exports_GradidoCreation_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__data__GradidoCreation;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  gradido::data::TransferAmount *arg1 = 0 ;
  Timepoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::GradidoCreation *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoCreation.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__TransferAmount,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GradidoCreation" "', argument " "1"" of type '" "gradido::data::TransferAmount const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GradidoCreation" "', argument " "1"" of type '" "gradido::data::TransferAmount const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransferAmount * >(argp1);{
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    {
      try {
        result = (gradido::data::GradidoCreation *)new gradido::data::GradidoCreation((gradido::data::TransferAmount const &)*arg1,SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_GradidoCreation_templ<SWIG_OBJ_WRAP>::_exports_GradidoCreation_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_GradidoCreation_templ<SWIG_OBJ_WRAP>::~_exports_GradidoCreation_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::GradidoCreation *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoCreation_templ<SWIG_OBJ_WRAP>::_wrap_GradidoCreation_getInvolvedAddresses(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoCreation *arg1 = (gradido::data::GradidoCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< memory::Block const > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoCreation_getInvolvedAddresses.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoCreation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoCreation_getInvolvedAddresses" "', argument " "1"" of type '" "gradido::data::GradidoCreation const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoCreation * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoCreation const *)arg1)->getInvolvedAddresses();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::vector< memory::ConstBlockPtr >(result)), SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_const_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoCreation_templ<SWIG_OBJ_WRAP>::_wrap_GradidoCreation_isInvolved(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoCreation *arg1 = (gradido::data::GradidoCreation *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoCreation_isInvolved.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoCreation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoCreation_isInvolved" "', argument " "1"" of type '" "gradido::data::GradidoCreation const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoCreation * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoCreation_isInvolved" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::GradidoCreation const *)arg1)->isInvolved(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoCreation_templ<SWIG_OBJ_WRAP>::_wrap_GradidoCreation_getRecipient(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoCreation *arg1 = (gradido::data::GradidoCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TransferAmount *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoCreation_getRecipient.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoCreation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoCreation_getRecipient" "', argument " "1"" of type '" "gradido::data::GradidoCreation const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoCreation * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::TransferAmount *) &((gradido::data::GradidoCreation const *)arg1)->getRecipient();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__data__TransferAmount, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoCreation_templ<SWIG_OBJ_WRAP>::_wrap_GradidoCreation_getTargetDate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoCreation *arg1 = (gradido::data::GradidoCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TimestampSeconds result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoCreation_getTargetDate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoCreation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoCreation_getTargetDate" "', argument " "1"" of type '" "gradido::data::GradidoCreation const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoCreation * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoCreation const *)arg1)->getTargetDate();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new gradido::data::TimestampSeconds(result)), SWIGTYPE_p_gradido__data__TimestampSeconds, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_GradidoTransfer_templ<SWIG_OBJ_WRAP>::_exports_GradidoTransfer_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__data__GradidoTransfer;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  gradido::data::TransferAmount *arg1 = 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::GradidoTransfer *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoTransfer.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__TransferAmount,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GradidoTransfer" "', argument " "1"" of type '" "gradido::data::TransferAmount const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GradidoTransfer" "', argument " "1"" of type '" "gradido::data::TransferAmount const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransferAmount * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_GradidoTransfer" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::GradidoTransfer *)new gradido::data::GradidoTransfer((gradido::data::TransferAmount const &)*arg1,SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_GradidoTransfer_templ<SWIG_OBJ_WRAP>::_exports_GradidoTransfer_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_GradidoTransfer_templ<SWIG_OBJ_WRAP>::~_exports_GradidoTransfer_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::GradidoTransfer *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransfer_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransfer *arg1 = (gradido::data::GradidoTransfer *) 0 ;
  gradido::data::GradidoTransfer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransfer_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransfer_equal" "', argument " "1"" of type '" "gradido::data::GradidoTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransfer * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__GradidoTransfer,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoTransfer_equal" "', argument " "2"" of type '" "gradido::data::GradidoTransfer const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoTransfer_equal" "', argument " "2"" of type '" "gradido::data::GradidoTransfer const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::GradidoTransfer * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::GradidoTransfer const *)arg1)->operator ==((gradido::data::GradidoTransfer const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransfer_getInvolvedAddresses(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransfer *arg1 = (gradido::data::GradidoTransfer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< memory::Block const > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransfer_getInvolvedAddresses.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransfer_getInvolvedAddresses" "', argument " "1"" of type '" "gradido::data::GradidoTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransfer * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoTransfer const *)arg1)->getInvolvedAddresses();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::vector< memory::ConstBlockPtr >(result)), SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_const_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransfer_isInvolved(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransfer *arg1 = (gradido::data::GradidoTransfer *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransfer_isInvolved.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransfer_isInvolved" "', argument " "1"" of type '" "gradido::data::GradidoTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransfer * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoTransfer_isInvolved" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::GradidoTransfer const *)arg1)->isInvolved(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransfer_getSender(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransfer *arg1 = (gradido::data::GradidoTransfer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TransferAmount *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransfer_getSender.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransfer_getSender" "', argument " "1"" of type '" "gradido::data::GradidoTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransfer * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::TransferAmount *) &((gradido::data::GradidoTransfer const *)arg1)->getSender();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__data__TransferAmount, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransfer_getRecipient(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransfer *arg1 = (gradido::data::GradidoTransfer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransfer_getRecipient.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransfer_getRecipient" "', argument " "1"" of type '" "gradido::data::GradidoTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransfer * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoTransfer const *)arg1)->getRecipient();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::_exports_GradidoDeferredTransfer_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__data__GradidoDeferredTransfer;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  gradido::data::GradidoTransfer *arg1 = 0 ;
  Timepoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::GradidoDeferredTransfer *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoDeferredTransfer.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__GradidoTransfer,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GradidoDeferredTransfer" "', argument " "1"" of type '" "gradido::data::GradidoTransfer const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GradidoDeferredTransfer" "', argument " "1"" of type '" "gradido::data::GradidoTransfer const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransfer * >(argp1);{
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    {
      try {
        result = (gradido::data::GradidoDeferredTransfer *)new gradido::data::GradidoDeferredTransfer((gradido::data::GradidoTransfer const &)*arg1,SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::_exports_GradidoDeferredTransfer_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::~_exports_GradidoDeferredTransfer_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::GradidoDeferredTransfer *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoDeferredTransfer_getInvolvedAddresses(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoDeferredTransfer *arg1 = (gradido::data::GradidoDeferredTransfer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< memory::Block const > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoDeferredTransfer_getInvolvedAddresses.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoDeferredTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoDeferredTransfer_getInvolvedAddresses" "', argument " "1"" of type '" "gradido::data::GradidoDeferredTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoDeferredTransfer * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoDeferredTransfer const *)arg1)->getInvolvedAddresses();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::vector< memory::ConstBlockPtr >(result)), SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_const_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoDeferredTransfer_isInvolved(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoDeferredTransfer *arg1 = (gradido::data::GradidoDeferredTransfer *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoDeferredTransfer_isInvolved.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoDeferredTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoDeferredTransfer_isInvolved" "', argument " "1"" of type '" "gradido::data::GradidoDeferredTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoDeferredTransfer * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoDeferredTransfer_isInvolved" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::GradidoDeferredTransfer const *)arg1)->isInvolved(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoDeferredTransfer_getSenderPublicKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoDeferredTransfer *arg1 = (gradido::data::GradidoDeferredTransfer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoDeferredTransfer_getSenderPublicKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoDeferredTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoDeferredTransfer_getSenderPublicKey" "', argument " "1"" of type '" "gradido::data::GradidoDeferredTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoDeferredTransfer * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoDeferredTransfer const *)arg1)->getSenderPublicKey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoDeferredTransfer_getRecipientPublicKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoDeferredTransfer *arg1 = (gradido::data::GradidoDeferredTransfer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoDeferredTransfer_getRecipientPublicKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoDeferredTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoDeferredTransfer_getRecipientPublicKey" "', argument " "1"" of type '" "gradido::data::GradidoDeferredTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoDeferredTransfer * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoDeferredTransfer const *)arg1)->getRecipientPublicKey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoDeferredTransfer_getTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoDeferredTransfer *arg1 = (gradido::data::GradidoDeferredTransfer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::GradidoTransfer *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoDeferredTransfer_getTransfer.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoDeferredTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoDeferredTransfer_getTransfer" "', argument " "1"" of type '" "gradido::data::GradidoDeferredTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoDeferredTransfer * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::GradidoTransfer *) &((gradido::data::GradidoDeferredTransfer const *)arg1)->getTransfer();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__data__GradidoTransfer, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoDeferredTransfer_templ<SWIG_OBJ_WRAP>::_wrap_GradidoDeferredTransfer_getTimeout(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoDeferredTransfer *arg1 = (gradido::data::GradidoDeferredTransfer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TimestampSeconds result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoDeferredTransfer_getTimeout.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoDeferredTransfer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoDeferredTransfer_getTimeout" "', argument " "1"" of type '" "gradido::data::GradidoDeferredTransfer const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoDeferredTransfer * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoDeferredTransfer const *)arg1)->getTimeout();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new gradido::data::TimestampSeconds(result)), SWIGTYPE_p_gradido__data__TimestampSeconds, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_new_RegisterAddress__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::AddressType arg1 ;
  uint32_t arg2 ;
  memory::ConstBlockPtr arg3 ;
  memory::ConstBlockPtr arg4 ;
  memory::ConstBlockPtr arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  gradido::data::RegisterAddress *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RegisterAddress__SWIG_0.");
    }
    ecode1 = SWIG_AsVal_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RegisterAddress" "', argument " "1"" of type '" "gradido::data::AddressType""'");
    } 
    arg1 = static_cast< gradido::data::AddressType >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RegisterAddress" "', argument " "2"" of type '" "uint32_t""'");
    } 
    arg2 = static_cast< uint32_t >(val2);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_RegisterAddress" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[3], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_RegisterAddress" "', argument " "4"" of type '" "memory::Block""'");
        }
        arg4 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[4], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_RegisterAddress" "', argument " "5"" of type '" "memory::Block""'");
        }
        arg5 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::RegisterAddress *)new gradido::data::RegisterAddress(arg1,arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_new_RegisterAddress__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::AddressType arg1 ;
  uint32_t arg2 ;
  memory::ConstBlockPtr arg3 ;
  memory::ConstBlockPtr arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  gradido::data::RegisterAddress *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RegisterAddress__SWIG_1.");
    }
    ecode1 = SWIG_AsVal_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RegisterAddress" "', argument " "1"" of type '" "gradido::data::AddressType""'");
    } 
    arg1 = static_cast< gradido::data::AddressType >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RegisterAddress" "', argument " "2"" of type '" "uint32_t""'");
    } 
    arg2 = static_cast< uint32_t >(val2);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_RegisterAddress" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[3], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_RegisterAddress" "', argument " "4"" of type '" "memory::Block""'");
        }
        arg4 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::RegisterAddress *)new gradido::data::RegisterAddress(arg1,arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_new_RegisterAddress__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::AddressType arg1 ;
  uint32_t arg2 ;
  memory::ConstBlockPtr arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  gradido::data::RegisterAddress *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RegisterAddress__SWIG_2.");
    }
    ecode1 = SWIG_AsVal_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RegisterAddress" "', argument " "1"" of type '" "gradido::data::AddressType""'");
    } 
    arg1 = static_cast< gradido::data::AddressType >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RegisterAddress" "', argument " "2"" of type '" "uint32_t""'");
    } 
    arg2 = static_cast< uint32_t >(val2);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_RegisterAddress" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::RegisterAddress *)new gradido::data::RegisterAddress(arg1,arg2,SWIG_STD_MOVE(arg3));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_new_RegisterAddress__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::AddressType arg1 ;
  uint32_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  gradido::data::RegisterAddress *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RegisterAddress__SWIG_3.");
    }
    ecode1 = SWIG_AsVal_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RegisterAddress" "', argument " "1"" of type '" "gradido::data::AddressType""'");
    } 
    arg1 = static_cast< gradido::data::AddressType >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RegisterAddress" "', argument " "2"" of type '" "uint32_t""'");
    } 
    arg2 = static_cast< uint32_t >(val2);{
      try {
        result = (gradido::data::RegisterAddress *)new gradido::data::RegisterAddress(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_new_RegisterAddress__SWIG_4(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::AddressType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  gradido::data::RegisterAddress *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RegisterAddress__SWIG_4.");
    }
    ecode1 = SWIG_AsVal_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RegisterAddress" "', argument " "1"" of type '" "gradido::data::AddressType""'");
    } 
    arg1 = static_cast< gradido::data::AddressType >(val1);{
      try {
        result = (gradido::data::RegisterAddress *)new gradido::data::RegisterAddress(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_exports_RegisterAddress_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__RegisterAddress;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_RegisterAddress__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_RegisterAddress__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_RegisterAddress__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_RegisterAddress__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_RegisterAddress__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_RegisterAddress__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_RegisterAddress__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_RegisterAddress__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_RegisterAddress__SWIG_4(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_RegisterAddress__SWIG_4(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_RegisterAddress");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_exports_RegisterAddress_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::~_exports_RegisterAddress_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::RegisterAddress *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_RegisterAddress_equal(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::RegisterAddress *arg1 = (gradido::data::RegisterAddress *) 0 ;
  gradido::data::RegisterAddress *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_RegisterAddress_equal.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__RegisterAddress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterAddress_equal" "', argument " "1"" of type '" "gradido::data::RegisterAddress const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::RegisterAddress * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__RegisterAddress,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegisterAddress_equal" "', argument " "2"" of type '" "gradido::data::RegisterAddress const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterAddress_equal" "', argument " "2"" of type '" "gradido::data::RegisterAddress const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::RegisterAddress * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::RegisterAddress const *)arg1)->operator ==((gradido::data::RegisterAddress const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_RegisterAddress_getInvolvedAddresses(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::RegisterAddress *arg1 = (gradido::data::RegisterAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< memory::Block const > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_RegisterAddress_getInvolvedAddresses.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__RegisterAddress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterAddress_getInvolvedAddresses" "', argument " "1"" of type '" "gradido::data::RegisterAddress const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::RegisterAddress * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::RegisterAddress const *)arg1)->getInvolvedAddresses();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::vector< memory::ConstBlockPtr >(result)), SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_const_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_RegisterAddress_isInvolved(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::RegisterAddress *arg1 = (gradido::data::RegisterAddress *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_RegisterAddress_isInvolved.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__RegisterAddress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterAddress_isInvolved" "', argument " "1"" of type '" "gradido::data::RegisterAddress const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::RegisterAddress * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "RegisterAddress_isInvolved" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::RegisterAddress const *)arg1)->isInvolved(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_RegisterAddress_getUserPublicKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::RegisterAddress *arg1 = (gradido::data::RegisterAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_RegisterAddress_getUserPublicKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__RegisterAddress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterAddress_getUserPublicKey" "', argument " "1"" of type '" "gradido::data::RegisterAddress const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::RegisterAddress * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::RegisterAddress const *)arg1)->getUserPublicKey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_RegisterAddress_getAddressType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::RegisterAddress *arg1 = (gradido::data::RegisterAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::AddressType result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_RegisterAddress_getAddressType.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__RegisterAddress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterAddress_getAddressType" "', argument " "1"" of type '" "gradido::data::RegisterAddress const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::RegisterAddress * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::AddressType)((gradido::data::RegisterAddress const *)arg1)->getAddressType();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_RegisterAddress_getNameHash(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::RegisterAddress *arg1 = (gradido::data::RegisterAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_RegisterAddress_getNameHash.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__RegisterAddress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterAddress_getNameHash" "', argument " "1"" of type '" "gradido::data::RegisterAddress const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::RegisterAddress * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::RegisterAddress const *)arg1)->getNameHash();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_RegisterAddress_getAccountPublicKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::RegisterAddress *arg1 = (gradido::data::RegisterAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_RegisterAddress_getAccountPublicKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__RegisterAddress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterAddress_getAccountPublicKey" "', argument " "1"" of type '" "gradido::data::RegisterAddress const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::RegisterAddress * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::RegisterAddress const *)arg1)->getAccountPublicKey();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_RegisterAddress_templ<SWIG_OBJ_WRAP>::_wrap_RegisterAddress_getDerivationIndex(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::RegisterAddress *arg1 = (gradido::data::RegisterAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_RegisterAddress_getDerivationIndex.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__RegisterAddress, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterAddress_getDerivationIndex" "', argument " "1"" of type '" "gradido::data::RegisterAddress const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::RegisterAddress * >(argp1);
    
    
    
    
    {
      try {
        result = (uint32_t)((gradido::data::RegisterAddress const *)arg1)->getDerivationIndex();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionBody__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::TransactionBody *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionBody__SWIG_0.");
    }
    {
      try {
        result = (gradido::data::TransactionBody *)new gradido::data::TransactionBody();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionBody__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::string *arg1 = 0 ;
  Timepoint arg2 ;
  std::string *arg3 = 0 ;
  gradido::data::CrossGroupType arg4 ;
  std::string *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  gradido::data::TransactionBody *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionBody__SWIG_1.");
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransactionBody" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransactionBody" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(info[2], &ptr);
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TransactionBody" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransactionBody" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        arg3 = ptr;
      }
    }
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TransactionBody" "', argument " "4"" of type '" "gradido::data::CrossGroupType""'");
    } 
    arg4 = static_cast< gradido::data::CrossGroupType >(val4);{
      {
        std::string *ptr = (std::string *)0;
        res5 = SWIG_AsPtr_std_string(info[4], &ptr);
        if (!SWIG_IsOK(res5)) {
          SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_TransactionBody" "', argument " "5"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransactionBody" "', argument " "5"" of type '" "std::string const &""'"); 
        }
        arg5 = ptr;
      }
    }
    {
      try {
        result = (gradido::data::TransactionBody *)new gradido::data::TransactionBody((std::string const &)*arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3,arg4,(std::string const &)*arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res5)) delete arg5;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionBody__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::string *arg1 = 0 ;
  Timepoint arg2 ;
  std::string *arg3 = 0 ;
  gradido::data::CrossGroupType arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  gradido::data::TransactionBody *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionBody__SWIG_2.");
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransactionBody" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransactionBody" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(info[2], &ptr);
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TransactionBody" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransactionBody" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        arg3 = ptr;
      }
    }
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TransactionBody" "', argument " "4"" of type '" "gradido::data::CrossGroupType""'");
    } 
    arg4 = static_cast< gradido::data::CrossGroupType >(val4);{
      try {
        result = (gradido::data::TransactionBody *)new gradido::data::TransactionBody((std::string const &)*arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionBody__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::string *arg1 = 0 ;
  Timepoint arg2 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gradido::data::TransactionBody *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionBody__SWIG_3.");
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(info[0], &ptr);
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransactionBody" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransactionBody" "', argument " "1"" of type '" "std::string const &""'"); 
        }
        arg1 = ptr;
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(info[2], &ptr);
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TransactionBody" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransactionBody" "', argument " "3"" of type '" "std::string const &""'"); 
        }
        arg3 = ptr;
      }
    }
    {
      try {
        result = (gradido::data::TransactionBody *)new gradido::data::TransactionBody((std::string const &)*arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_exports_TransactionBody_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__TransactionBody;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionBody__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionBody__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionBody__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionBody__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionBody__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionBody__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionBody__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionBody__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_TransactionBody");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_exports_TransactionBody_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TransactionBody_templ<SWIG_OBJ_WRAP>::~_exports_TransactionBody_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::TransactionBody *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_isTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_isTransfer.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_isTransfer" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransactionBody const *)arg1)->isTransfer();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_isCreation(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_isCreation.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_isCreation" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransactionBody const *)arg1)->isCreation();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_isCommunityFriendsUpdate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_isCommunityFriendsUpdate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_isCommunityFriendsUpdate" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransactionBody const *)arg1)->isCommunityFriendsUpdate();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_isRegisterAddress(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_isRegisterAddress.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_isRegisterAddress" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransactionBody const *)arg1)->isRegisterAddress();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_isDeferredTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_isDeferredTransfer.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_isDeferredTransfer" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransactionBody const *)arg1)->isDeferredTransfer();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_isCommunityRoot(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_isCommunityRoot.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_isCommunityRoot" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransactionBody const *)arg1)->isCommunityRoot();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getTransactionType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TransactionType result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getTransactionType.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getTransactionType" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::TransactionType)((gradido::data::TransactionBody const *)arg1)->getTransactionType();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_isPairing(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  gradido::data::TransactionBody *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_isPairing.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_isPairing" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TransactionBody,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBody_isPairing" "', argument " "2"" of type '" "gradido::data::TransactionBody const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransactionBody_isPairing" "', argument " "2"" of type '" "gradido::data::TransactionBody const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::TransactionBody * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransactionBody const *)arg1)->isPairing((gradido::data::TransactionBody const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_isInvolved(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_isInvolved.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_isInvolved" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBody_isInvolved" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::TransactionBody const *)arg1)->isInvolved(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getTransferAmount(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TransferAmount *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getTransferAmount.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getTransferAmount" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::TransferAmount *)((gradido::data::TransactionBody const *)arg1)->getTransferAmount();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__data__TransferAmount, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getInvolvedAddresses(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< memory::Block const > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getInvolvedAddresses.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getInvolvedAddresses" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransactionBody const *)arg1)->getInvolvedAddresses();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::vector< memory::ConstBlockPtr >(result)), SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_const_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getMemo(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getMemo.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getMemo" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (std::string *) &((gradido::data::TransactionBody const *)arg1)->getMemo();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(*result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getCreatedAt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::Timestamp result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getCreatedAt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getCreatedAt" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransactionBody const *)arg1)->getCreatedAt();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new gradido::data::Timestamp(result)), SWIGTYPE_p_gradido__data__Timestamp, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getVersionNumber(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getVersionNumber.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getVersionNumber" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (std::string *) &((gradido::data::TransactionBody const *)arg1)->getVersionNumber();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(*result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::CrossGroupType result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getType.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getType" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::CrossGroupType)((gradido::data::TransactionBody const *)arg1)->getType();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getOtherGroup(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getOtherGroup.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getOtherGroup" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = (std::string *) &((gradido::data::TransactionBody const *)arg1)->getOtherGroup();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(*result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::GradidoTransfer const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getTransfer.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getTransfer" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransactionBody const *)arg1)->getTransfer();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::GradidoTransfer *>((&result)->get()), SWIGTYPE_p_gradido__data__GradidoTransfer, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::GradidoTransfer>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getCreation(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::GradidoCreation const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getCreation.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getCreation" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransactionBody const *)arg1)->getCreation();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::GradidoCreation *>((&result)->get()), SWIGTYPE_p_gradido__data__GradidoCreation, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::GradidoCreation>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getCommunityFriendsUpdate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::CommunityFriendsUpdate const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getCommunityFriendsUpdate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getCommunityFriendsUpdate" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransactionBody const *)arg1)->getCommunityFriendsUpdate();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::CommunityFriendsUpdate *>((&result)->get()), SWIGTYPE_p_gradido__data__CommunityFriendsUpdate, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::CommunityFriendsUpdate>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getRegisterAddress(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::RegisterAddress const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getRegisterAddress.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getRegisterAddress" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransactionBody const *)arg1)->getRegisterAddress();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::RegisterAddress *>((&result)->get()), SWIGTYPE_p_gradido__data__RegisterAddress, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::RegisterAddress>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getDeferredTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::GradidoDeferredTransfer const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getDeferredTransfer.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getDeferredTransfer" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransactionBody const *)arg1)->getDeferredTransfer();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::GradidoDeferredTransfer *>((&result)->get()), SWIGTYPE_p_gradido__data__GradidoDeferredTransfer, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::GradidoDeferredTransfer>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBody_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBody_getCommunityRoot(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::TransactionBody *arg1 = (gradido::data::TransactionBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::CommunityRoot const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBody_getCommunityRoot.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__TransactionBody, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBody_getCommunityRoot" "', argument " "1"" of type '" "gradido::data::TransactionBody const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::TransactionBody const *)arg1)->getCommunityRoot();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::CommunityRoot *>((&result)->get()), SWIGTYPE_p_gradido__data__CommunityRoot, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::CommunityRoot>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_new_GradidoTransaction__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::GradidoTransaction *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoTransaction__SWIG_0.");
    }
    {
      try {
        result = (gradido::data::GradidoTransaction *)new gradido::data::GradidoTransaction();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_new_GradidoTransaction__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::SignatureMap *arg1 = 0 ;
  memory::ConstBlockPtr arg2 ;
  memory::ConstBlockPtr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::GradidoTransaction *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoTransaction__SWIG_1.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__SignatureMap,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GradidoTransaction" "', argument " "1"" of type '" "gradido::data::SignatureMap const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GradidoTransaction" "', argument " "1"" of type '" "gradido::data::SignatureMap const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::SignatureMap * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_GradidoTransaction" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_GradidoTransaction" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::GradidoTransaction *)new gradido::data::GradidoTransaction((gradido::data::SignatureMap const &)*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_new_GradidoTransaction__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::SignatureMap *arg1 = 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::GradidoTransaction *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoTransaction__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__SignatureMap,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GradidoTransaction" "', argument " "1"" of type '" "gradido::data::SignatureMap const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GradidoTransaction" "', argument " "1"" of type '" "gradido::data::SignatureMap const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::SignatureMap * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_GradidoTransaction" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::GradidoTransaction *)new gradido::data::GradidoTransaction((gradido::data::SignatureMap const &)*arg1,SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_new_GradidoTransaction__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::GradidoTransaction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::GradidoTransaction *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoTransaction__SWIG_3.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GradidoTransaction" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GradidoTransaction" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);{
      try {
        result = (gradido::data::GradidoTransaction *)new gradido::data::GradidoTransaction((gradido::data::GradidoTransaction const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_exports_GradidoTransaction_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__GradidoTransaction;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_GradidoTransaction__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_GradidoTransaction__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_GradidoTransaction__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_GradidoTransaction__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_GradidoTransaction__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_GradidoTransaction__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_GradidoTransaction__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_GradidoTransaction__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_GradidoTransaction");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_exports_GradidoTransaction_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::~_exports_GradidoTransaction_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::GradidoTransaction *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_getTransactionBody(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::ConstTransactionBodyPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransaction_getTransactionBody.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_getTransactionBody" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoTransaction const *)arg1)->getTransactionBody();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::TransactionBody *>((&result)->get()), SWIGTYPE_p_gradido__data__TransactionBody, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::TransactionBody>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_isPairing(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  gradido::data::GradidoTransaction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransaction_isPairing.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_isPairing" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoTransaction_isPairing" "', argument " "2"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradidoTransaction_isPairing" "', argument " "2"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::GradidoTransaction const *)arg1)->isPairing((gradido::data::GradidoTransaction const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_isInvolved(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransaction_isInvolved.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_isInvolved" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoTransaction_isInvolved" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)((gradido::data::GradidoTransaction const *)arg1)->isInvolved(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_getInvolvedAddresses(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< memory::Block const > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransaction_getInvolvedAddresses.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_getInvolvedAddresses" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoTransaction const *)arg1)->getInvolvedAddresses();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::vector< memory::ConstBlockPtr >(result)), SWIGTYPE_p_std__vectorT_std__shared_ptrT_memory__Block_const_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_getSerializedTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransaction_getSerializedTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_getSerializedTransaction" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoTransaction const *)arg1)->getSerializedTransaction();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_getFingerprint(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransaction_getFingerprint.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_getFingerprint" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoTransaction const *)arg1)->getFingerprint();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_getSignatureMap__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::SignatureMap *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_getSignatureMap" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::SignatureMap *) &((gradido::data::GradidoTransaction const *)arg1)->getSignatureMap();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__data__SignatureMap, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_getSignatureMap__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::SignatureMap *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_getSignatureMap" "', argument " "1"" of type '" "gradido::data::GradidoTransaction *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::SignatureMap *) &(arg1)->getSignatureMap();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__data__SignatureMap, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction__wrap_GradidoTransaction_getSignatureMap(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_GradidoTransaction_getSignatureMap__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_GradidoTransaction_getSignatureMap__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_GradidoTransaction_getSignatureMap__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_GradidoTransaction_getSignatureMap__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function getSignatureMap.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_getBodyBytes(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransaction_getBodyBytes.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_getBodyBytes" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoTransaction const *)arg1)->getBodyBytes();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransaction_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransaction_getParingMessageId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::GradidoTransaction *arg1 = (gradido::data::GradidoTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransaction_getParingMessageId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__GradidoTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransaction_getParingMessageId" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::GradidoTransaction const *)arg1)->getParingMessageId();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_new_ConfirmedTransaction__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  uint64_t arg1 ;
  std::shared_ptr< gradido::data::GradidoTransaction const > arg2 ;
  Timepoint arg3 ;
  std::string *arg4 = 0 ;
  memory::ConstBlockPtr arg5 ;
  std::string *arg6 = 0 ;
  std::shared_ptr< gradido::data::ConfirmedTransaction const > arg7 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  gradido::data::ConfirmedTransaction *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 7 || static_cast<int>(info.Length()) > 7) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ConfirmedTransaction__SWIG_0.");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConfirmedTransaction" "', argument " "1"" of type '" "uint64_t""'");
    } 
    arg1 = static_cast< uint64_t >(val1);{
      {
        gradido::data::GradidoTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_ConfirmedTransaction" "', argument " "2"" of type '" "gradido::data::GradidoTransaction""'");
        }
        arg2 = std::shared_ptr<const gradido::data::GradidoTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[2].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[2].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res4 = SWIG_AsPtr_std_string(info[3], &ptr);
        if (!SWIG_IsOK(res4)) {
          SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ConfirmedTransaction" "', argument " "4"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConfirmedTransaction" "', argument " "4"" of type '" "std::string const &""'"); 
        }
        arg4 = ptr;
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[4], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_ConfirmedTransaction" "', argument " "5"" of type '" "memory::Block""'");
        }
        arg5 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res6 = SWIG_AsPtr_std_string(info[5], &ptr);
        if (!SWIG_IsOK(res6)) {
          SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ConfirmedTransaction" "', argument " "6"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConfirmedTransaction" "', argument " "6"" of type '" "std::string const &""'"); 
        }
        arg6 = ptr;
      }
    }
    {
      {
        gradido::data::ConfirmedTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[6], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_ConfirmedTransaction" "', argument " "7"" of type '" "gradido::data::ConfirmedTransaction""'");
        }
        arg7 = std::shared_ptr<const gradido::data::ConfirmedTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::data::ConfirmedTransaction *)new gradido::data::ConfirmedTransaction(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::string const &)*arg4,SWIG_STD_MOVE(arg5),(std::string const &)*arg6,SWIG_STD_MOVE(arg7));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res4)) delete arg4;
    if (SWIG_IsNewObj(res6)) delete arg6;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_new_ConfirmedTransaction__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  uint64_t arg1 ;
  std::shared_ptr< gradido::data::GradidoTransaction const > arg2 ;
  Timepoint arg3 ;
  std::string *arg4 = 0 ;
  memory::ConstBlockPtr arg5 ;
  std::string *arg6 = 0 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  gradido::data::ConfirmedTransaction *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 6 || static_cast<int>(info.Length()) > 6) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ConfirmedTransaction__SWIG_1.");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConfirmedTransaction" "', argument " "1"" of type '" "uint64_t""'");
    } 
    arg1 = static_cast< uint64_t >(val1);{
      {
        gradido::data::GradidoTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_ConfirmedTransaction" "', argument " "2"" of type '" "gradido::data::GradidoTransaction""'");
        }
        arg2 = std::shared_ptr<const gradido::data::GradidoTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[2].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[2].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res4 = SWIG_AsPtr_std_string(info[3], &ptr);
        if (!SWIG_IsOK(res4)) {
          SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ConfirmedTransaction" "', argument " "4"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConfirmedTransaction" "', argument " "4"" of type '" "std::string const &""'"); 
        }
        arg4 = ptr;
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[4], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_ConfirmedTransaction" "', argument " "5"" of type '" "memory::Block""'");
        }
        arg5 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res6 = SWIG_AsPtr_std_string(info[5], &ptr);
        if (!SWIG_IsOK(res6)) {
          SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ConfirmedTransaction" "', argument " "6"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConfirmedTransaction" "', argument " "6"" of type '" "std::string const &""'"); 
        }
        arg6 = ptr;
      }
    }
    {
      try {
        result = (gradido::data::ConfirmedTransaction *)new gradido::data::ConfirmedTransaction(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::string const &)*arg4,SWIG_STD_MOVE(arg5),(std::string const &)*arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res4)) delete arg4;
    if (SWIG_IsNewObj(res6)) delete arg6;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_new_ConfirmedTransaction__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  uint64_t arg1 ;
  std::shared_ptr< gradido::data::GradidoTransaction const > arg2 ;
  Timepoint arg3 ;
  std::string *arg4 = 0 ;
  memory::ConstBlockPtr arg5 ;
  memory::ConstBlockPtr arg6 ;
  std::string *arg7 = 0 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  gradido::data::ConfirmedTransaction *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 7 || static_cast<int>(info.Length()) > 7) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ConfirmedTransaction__SWIG_2.");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConfirmedTransaction" "', argument " "1"" of type '" "uint64_t""'");
    } 
    arg1 = static_cast< uint64_t >(val1);{
      {
        gradido::data::GradidoTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_ConfirmedTransaction" "', argument " "2"" of type '" "gradido::data::GradidoTransaction""'");
        }
        arg2 = std::shared_ptr<const gradido::data::GradidoTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[2].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[2].As<Napi::Date>().ValueOf())));
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res4 = SWIG_AsPtr_std_string(info[3], &ptr);
        if (!SWIG_IsOK(res4)) {
          SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ConfirmedTransaction" "', argument " "4"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConfirmedTransaction" "', argument " "4"" of type '" "std::string const &""'"); 
        }
        arg4 = ptr;
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[4], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_ConfirmedTransaction" "', argument " "5"" of type '" "memory::Block""'");
        }
        arg5 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[5], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_ConfirmedTransaction" "', argument " "6"" of type '" "memory::Block""'");
        }
        arg6 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        std::string *ptr = (std::string *)0;
        res7 = SWIG_AsPtr_std_string(info[6], &ptr);
        if (!SWIG_IsOK(res7)) {
          SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_ConfirmedTransaction" "', argument " "7"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConfirmedTransaction" "', argument " "7"" of type '" "std::string const &""'"); 
        }
        arg7 = ptr;
      }
    }
    {
      try {
        result = (gradido::data::ConfirmedTransaction *)new gradido::data::ConfirmedTransaction(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::string const &)*arg4,SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6),(std::string const &)*arg7);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res4)) delete arg4;
    if (SWIG_IsNewObj(res7)) delete arg7;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res7)) delete arg7;
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_exports_ConfirmedTransaction_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__data__ConfirmedTransaction;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 7 && static_cast<int>(info.Length()) <= 7) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_ConfirmedTransaction__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_ConfirmedTransaction__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 6 && static_cast<int>(info.Length()) <= 6) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_ConfirmedTransaction__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_ConfirmedTransaction__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 7 && static_cast<int>(info.Length()) <= 7) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_ConfirmedTransaction__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_ConfirmedTransaction__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_ConfirmedTransaction");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_exports_ConfirmedTransaction_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::~_exports_ConfirmedTransaction_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::data::ConfirmedTransaction *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_calculateRunningHash__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  std::shared_ptr< gradido::data::ConfirmedTransaction const > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_calculateRunningHash" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);{
      {
        gradido::data::ConfirmedTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ConfirmedTransaction_calculateRunningHash" "', argument " "2"" of type '" "gradido::data::ConfirmedTransaction""'");
        }
        arg2 = std::shared_ptr<const gradido::data::ConfirmedTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = ((gradido::data::ConfirmedTransaction const *)arg1)->calculateRunningHash(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_calculateRunningHash__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_calculateRunningHash" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::ConfirmedTransaction const *)arg1)->calculateRunningHash();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction__wrap_ConfirmedTransaction_calculateRunningHash(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_ConfirmedTransaction_calculateRunningHash__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_ConfirmedTransaction_calculateRunningHash__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_ConfirmedTransaction_calculateRunningHash__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_ConfirmedTransaction_calculateRunningHash__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function calculateRunningHash.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_getId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfirmedTransaction_getId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_getId" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = (uint64_t)((gradido::data::ConfirmedTransaction const *)arg1)->getId();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_getGradidoTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::GradidoTransaction const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfirmedTransaction_getGradidoTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_getGradidoTransaction" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::ConfirmedTransaction const *)arg1)->getGradidoTransaction();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::GradidoTransaction *>((&result)->get()), SWIGTYPE_p_gradido__data__GradidoTransaction, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::GradidoTransaction>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_getConfirmedAt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TimestampSeconds result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfirmedTransaction_getConfirmedAt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_getConfirmedAt" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::ConfirmedTransaction const *)arg1)->getConfirmedAt();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new gradido::data::TimestampSeconds(result)), SWIGTYPE_p_gradido__data__TimestampSeconds, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_getVersionNumber(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfirmedTransaction_getVersionNumber.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_getVersionNumber" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = (std::string *) &((gradido::data::ConfirmedTransaction const *)arg1)->getVersionNumber();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(*result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_getRunningHash(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfirmedTransaction_getRunningHash.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_getRunningHash" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::ConfirmedTransaction const *)arg1)->getRunningHash();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_getMessageId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfirmedTransaction_getMessageId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_getMessageId" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::ConfirmedTransaction const *)arg1)->getMessageId();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ConfirmedTransaction_templ<SWIG_OBJ_WRAP>::_wrap_ConfirmedTransaction_getAccountBalance(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::data::ConfirmedTransaction *arg1 = (gradido::data::ConfirmedTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GradidoUnit result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfirmedTransaction_getAccountBalance.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__data__ConfirmedTransaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfirmedTransaction_getAccountBalance" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::data::ConfirmedTransaction const *)arg1)->getAccountBalance();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_exports_TransactionBodyBuilder_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__TransactionBodyBuilder;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  gradido::TransactionBodyBuilder *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionBodyBuilder.");
    }
    {
      try {
        result = (gradido::TransactionBodyBuilder *)new gradido::TransactionBodyBuilder();
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_exports_TransactionBodyBuilder_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::~_exports_TransactionBodyBuilder_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::TransactionBodyBuilder *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_reset(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBodyBuilder_reset.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_reset" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->reset();
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_build(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unique_ptr< gradido::data::TransactionBody > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBodyBuilder_build.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_build" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);
    
    
    
    
    {
      try {
        result = (arg1)->build();
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    
    jsresult = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_gradido__data__TransactionBody, SWIG_POINTER_OWN |  0 );
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setDeferredTransfer__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  SwigValueWrapper< gradido::data::GradidoTransfer > arg2 ;
  Timepoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setDeferredTransfer" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__GradidoTransfer,  0 );
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setDeferredTransfer" "', argument " "2"" of type '" "gradido::data::GradidoTransfer""'"); 
        }  
        if (!argp2) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransactionBodyBuilder_setDeferredTransfer" "', argument " "2"" of type '" "gradido::data::GradidoTransfer""'");
        } else {
          arg2 = *(reinterpret_cast< gradido::data::GradidoTransfer * >(argp2));
        }
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setDeferredTransfer(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setDeferredTransfer__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::unique_ptr< gradido::data::GradidoDeferredTransfer > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setDeferredTransfer" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__GradidoDeferredTransfer, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setDeferredTransfer" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "gradido::data::GradidoDeferredTransfer *""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setDeferredTransfer" "', argument " "2"" of type '" "gradido::data::GradidoDeferredTransfer *""'");
      }
    }
    (&arg2)->reset((gradido::data::GradidoDeferredTransfer *)argp2);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setDeferredTransfer(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setDeferredTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setDeferredTransfer__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setDeferredTransfer__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setDeferredTransfer__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setDeferredTransfer__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function setDeferredTransfer.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setCommunityFriendsUpdate__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setCommunityFriendsUpdate" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);ecode2 = SWIG_AsVal_bool(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransactionBodyBuilder_setCommunityFriendsUpdate" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setCommunityFriendsUpdate(arg2);
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setCommunityFriendsUpdate__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::unique_ptr< gradido::data::CommunityFriendsUpdate > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setCommunityFriendsUpdate" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__CommunityFriendsUpdate, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setCommunityFriendsUpdate" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "gradido::data::CommunityFriendsUpdate *""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setCommunityFriendsUpdate" "', argument " "2"" of type '" "gradido::data::CommunityFriendsUpdate *""'");
      }
    }
    (&arg2)->reset((gradido::data::CommunityFriendsUpdate *)argp2);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setCommunityFriendsUpdate(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setCommunityFriendsUpdate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setCommunityFriendsUpdate__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setCommunityFriendsUpdate__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setCommunityFriendsUpdate__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setCommunityFriendsUpdate__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function setCommunityFriendsUpdate.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  memory::ConstBlockPtr arg2 ;
  gradido::data::AddressType arg3 ;
  memory::ConstBlockPtr arg4 ;
  memory::ConstBlockPtr arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    ecode3 = SWIG_AsVal_int(info[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "3"" of type '" "gradido::data::AddressType""'");
    } 
    arg3 = static_cast< gradido::data::AddressType >(val3);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "4"" of type '" "memory::Block""'");
        }
        arg4 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[3], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "5"" of type '" "memory::Block""'");
        }
        arg5 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setRegisterAddress(SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  memory::ConstBlockPtr arg2 ;
  gradido::data::AddressType arg3 ;
  memory::ConstBlockPtr arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    ecode3 = SWIG_AsVal_int(info[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "3"" of type '" "gradido::data::AddressType""'");
    } 
    arg3 = static_cast< gradido::data::AddressType >(val3);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "4"" of type '" "memory::Block""'");
        }
        arg4 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setRegisterAddress(SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  memory::ConstBlockPtr arg2 ;
  gradido::data::AddressType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    ecode3 = SWIG_AsVal_int(info[1], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "3"" of type '" "gradido::data::AddressType""'");
    } 
    arg3 = static_cast< gradido::data::AddressType >(val3);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setRegisterAddress(SWIG_STD_MOVE(arg2),arg3);
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::unique_ptr< gradido::data::RegisterAddress > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__RegisterAddress, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "gradido::data::RegisterAddress *""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setRegisterAddress" "', argument " "2"" of type '" "gradido::data::RegisterAddress *""'");
      }
    }
    (&arg2)->reset((gradido::data::RegisterAddress *)argp2);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setRegisterAddress(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setRegisterAddress(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setRegisterAddress__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function setRegisterAddress.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setTransactionCreation__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  SwigValueWrapper< gradido::data::TransferAmount > arg2 ;
  Timepoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setTransactionCreation" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TransferAmount,  0 );
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setTransactionCreation" "', argument " "2"" of type '" "gradido::data::TransferAmount""'"); 
        }  
        if (!argp2) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransactionBodyBuilder_setTransactionCreation" "', argument " "2"" of type '" "gradido::data::TransferAmount""'");
        } else {
          arg2 = *(reinterpret_cast< gradido::data::TransferAmount * >(argp2));
        }
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setTransactionCreation(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setTransactionCreation__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::unique_ptr< gradido::data::GradidoCreation > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setTransactionCreation" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__GradidoCreation, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setTransactionCreation" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "gradido::data::GradidoCreation *""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setTransactionCreation" "', argument " "2"" of type '" "gradido::data::GradidoCreation *""'");
      }
    }
    (&arg2)->reset((gradido::data::GradidoCreation *)argp2);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setTransactionCreation(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setTransactionCreation(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setTransactionCreation__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setTransactionCreation__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setTransactionCreation__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setTransactionCreation__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function setTransactionCreation.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setTransactionTransfer__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  SwigValueWrapper< gradido::data::TransferAmount > arg2 ;
  memory::ConstBlockPtr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setTransactionTransfer" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TransferAmount,  0 );
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setTransactionTransfer" "', argument " "2"" of type '" "gradido::data::TransferAmount""'"); 
        }  
        if (!argp2) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransactionBodyBuilder_setTransactionTransfer" "', argument " "2"" of type '" "gradido::data::TransferAmount""'");
        } else {
          arg2 = *(reinterpret_cast< gradido::data::TransferAmount * >(argp2));
        }
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setTransactionTransfer" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setTransactionTransfer(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setTransactionTransfer__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::unique_ptr< gradido::data::GradidoTransfer > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setTransactionTransfer" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__GradidoTransfer, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setTransactionTransfer" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "gradido::data::GradidoTransfer *""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setTransactionTransfer" "', argument " "2"" of type '" "gradido::data::GradidoTransfer *""'");
      }
    }
    (&arg2)->reset((gradido::data::GradidoTransfer *)argp2);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setTransactionTransfer(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setTransactionTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setTransactionTransfer__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setTransactionTransfer__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setTransactionTransfer__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setTransactionTransfer__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function setTransactionTransfer.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setCommunityRoot__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  memory::ConstBlockPtr arg2 ;
  memory::ConstBlockPtr arg3 ;
  memory::ConstBlockPtr arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setCommunityRoot" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setCommunityRoot" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setCommunityRoot" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[2], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionBodyBuilder_setCommunityRoot" "', argument " "4"" of type '" "memory::Block""'");
        }
        arg4 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setCommunityRoot(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setCommunityRoot__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::unique_ptr< gradido::data::CommunityRoot > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setCommunityRoot" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__CommunityRoot, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setCommunityRoot" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "gradido::data::CommunityRoot *""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionBodyBuilder_setCommunityRoot" "', argument " "2"" of type '" "gradido::data::CommunityRoot *""'");
      }
    }
    (&arg2)->reset((gradido::data::CommunityRoot *)argp2);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setCommunityRoot(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder__wrap_TransactionBodyBuilder_setCommunityRoot(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setCommunityRoot__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setCommunityRoot__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_TransactionBodyBuilder_setCommunityRoot__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_TransactionBodyBuilder_setCommunityRoot__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function setCommunityRoot.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setCreatedAt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  Timepoint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBodyBuilder_setCreatedAt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setCreatedAt" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        if(!info[0].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg2 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[0].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setCreatedAt(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setMemo(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::string_view arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string tempString2 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBodyBuilder_setMemo.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setMemo" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        if (info[0].IsString()) {
          tempString2 = info[0].ToString();
          arg2 = tempString2;
        } else {
          SWIG_exception_fail(SWIG_TypeError, "in method 'TransactionBodyBuilder_setMemo', argument is not a String");
        }
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setMemo(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setVersionNumber(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::string_view arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string tempString2 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBodyBuilder_setVersionNumber.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setVersionNumber" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        if (info[0].IsString()) {
          tempString2 = info[0].ToString();
          arg2 = tempString2;
        } else {
          SWIG_exception_fail(SWIG_TypeError, "in method 'TransactionBodyBuilder_setVersionNumber', argument is not a String");
        }
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setVersionNumber(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setCrossGroupType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  gradido::data::CrossGroupType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBodyBuilder_setCrossGroupType.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setCrossGroupType" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransactionBodyBuilder_setCrossGroupType" "', argument " "2"" of type '" "gradido::data::CrossGroupType""'");
    } 
    arg2 = static_cast< gradido::data::CrossGroupType >(val2);
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setCrossGroupType(arg2);
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionBodyBuilder_templ<SWIG_OBJ_WRAP>::_wrap_TransactionBodyBuilder_setOtherGroup(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::TransactionBodyBuilder *arg1 = (gradido::TransactionBodyBuilder *) 0 ;
  std::string_view arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string tempString2 ;
  gradido::TransactionBodyBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionBodyBuilder_setOtherGroup.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionBodyBuilder_setOtherGroup" "', argument " "1"" of type '" "gradido::TransactionBodyBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::TransactionBodyBuilder * >(argp1);{
      {
        if (info[0].IsString()) {
          tempString2 = info[0].ToString();
          arg2 = tempString2;
        } else {
          SWIG_exception_fail(SWIG_TypeError, "in method 'TransactionBodyBuilder_setOtherGroup', argument is not a String");
        }
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::TransactionBodyBuilder *) &(arg1)->setOtherGroup(SWIG_STD_MOVE(arg2));
      } catch (const gradido::TransactionBodyBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__TransactionBodyBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_exports_GradidoTransactionBuilder_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__GradidoTransactionBuilder;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  gradido::GradidoTransactionBuilder *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_GradidoTransactionBuilder.");
    }
    {
      try {
        result = (gradido::GradidoTransactionBuilder *)new gradido::GradidoTransactionBuilder();
      } catch (const gradido::GradidoTransactionBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_exports_GradidoTransactionBuilder_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::~_exports_GradidoTransactionBuilder_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::GradidoTransactionBuilder *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransactionBuilder_reset(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::GradidoTransactionBuilder *arg1 = (gradido::GradidoTransactionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransactionBuilder_reset.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransactionBuilder_reset" "', argument " "1"" of type '" "gradido::GradidoTransactionBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::GradidoTransactionBuilder * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->reset();
      } catch (const gradido::GradidoTransactionBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransactionBuilder_build(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::GradidoTransactionBuilder *arg1 = (gradido::GradidoTransactionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unique_ptr< gradido::data::GradidoTransaction > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransactionBuilder_build.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransactionBuilder_build" "', argument " "1"" of type '" "gradido::GradidoTransactionBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::GradidoTransactionBuilder * >(argp1);
    
    
    
    
    {
      try {
        result = (arg1)->build();
      } catch (const gradido::GradidoTransactionBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    
    jsresult = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_gradido__data__GradidoTransaction, SWIG_POINTER_OWN |  0 );
    
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransactionBuilder_setTransactionBody__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::GradidoTransactionBuilder *arg1 = (gradido::GradidoTransactionBuilder *) 0 ;
  std::unique_ptr< gradido::data::TransactionBody > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gradido::GradidoTransactionBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransactionBuilder_setTransactionBody" "', argument " "1"" of type '" "gradido::GradidoTransactionBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::GradidoTransactionBuilder * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__data__TransactionBody, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoTransactionBuilder_setTransactionBody" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "gradido::data::TransactionBody *""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradidoTransactionBuilder_setTransactionBody" "', argument " "2"" of type '" "gradido::data::TransactionBody *""'");
      }
    }
    (&arg2)->reset((gradido::data::TransactionBody *)argp2);
    
    
    
    
    {
      try {
        result = (gradido::GradidoTransactionBuilder *) &(arg1)->setTransactionBody(SWIG_STD_MOVE(arg2));
      } catch (const gradido::GradidoTransactionBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransactionBuilder_setTransactionBody__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::GradidoTransactionBuilder *arg1 = (gradido::GradidoTransactionBuilder *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::GradidoTransactionBuilder *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransactionBuilder_setTransactionBody" "', argument " "1"" of type '" "gradido::GradidoTransactionBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::GradidoTransactionBuilder * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoTransactionBuilder_setTransactionBody" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::GradidoTransactionBuilder *) &(arg1)->setTransactionBody(SWIG_STD_MOVE(arg2));
      } catch (const gradido::GradidoTransactionBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransactionBuilder__wrap_GradidoTransactionBuilder_setTransactionBody(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_GradidoTransactionBuilder_setTransactionBody__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_GradidoTransactionBuilder_setTransactionBody__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_GradidoTransactionBuilder_setTransactionBody__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_GradidoTransactionBuilder_setTransactionBody__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function setTransactionBody.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransactionBuilder_addSignaturePair(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::GradidoTransactionBuilder *arg1 = (gradido::GradidoTransactionBuilder *) 0 ;
  memory::ConstBlockPtr arg2 ;
  memory::ConstBlockPtr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::GradidoTransactionBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransactionBuilder_addSignaturePair.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransactionBuilder_addSignaturePair" "', argument " "1"" of type '" "gradido::GradidoTransactionBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::GradidoTransactionBuilder * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoTransactionBuilder_addSignaturePair" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoTransactionBuilder_addSignaturePair" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::GradidoTransactionBuilder *) &(arg1)->addSignaturePair(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const gradido::GradidoTransactionBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransactionBuilder_sign(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::GradidoTransactionBuilder *arg1 = (gradido::GradidoTransactionBuilder *) 0 ;
  std::shared_ptr< KeyPairEd25519 > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::GradidoTransactionBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransactionBuilder_sign.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransactionBuilder_sign" "', argument " "1"" of type '" "gradido::GradidoTransactionBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::GradidoTransactionBuilder * >(argp1);{
      {
        KeyPairEd25519 *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_KeyPairEd25519,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoTransactionBuilder_sign" "', argument " "2"" of type '" "KeyPairEd25519""'");
        }
        arg2 = std::shared_ptr< KeyPairEd25519>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::GradidoTransactionBuilder *) &(arg1)->sign(SWIG_STD_MOVE(arg2));
      } catch (const gradido::GradidoTransactionBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_GradidoTransactionBuilder_templ<SWIG_OBJ_WRAP>::_wrap_GradidoTransactionBuilder_setParentMessageId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::GradidoTransactionBuilder *arg1 = (gradido::GradidoTransactionBuilder *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::GradidoTransactionBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GradidoTransactionBuilder_setParentMessageId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradidoTransactionBuilder_setParentMessageId" "', argument " "1"" of type '" "gradido::GradidoTransactionBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::GradidoTransactionBuilder * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "GradidoTransactionBuilder_setParentMessageId" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::GradidoTransactionBuilder *) &(arg1)->setParentMessageId(SWIG_STD_MOVE(arg2));
      } catch (const gradido::GradidoTransactionBuilderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__GradidoTransactionBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionDeserialize__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  gradido::interaction::deserialize::Type arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  gradido::interaction::deserialize::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionDeserialize__SWIG_0.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_InteractionDeserialize" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    ecode2 = SWIG_AsVal_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InteractionDeserialize" "', argument " "2"" of type '" "gradido::interaction::deserialize::Type""'");
    } 
    arg2 = static_cast< gradido::interaction::deserialize::Type >(val2);{
      try {
        result = (gradido::interaction::deserialize::Context *)new gradido::interaction::deserialize::Context(SWIG_STD_MOVE(arg1),arg2);
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionDeserialize__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  gradido::interaction::deserialize::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionDeserialize__SWIG_1.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_InteractionDeserialize" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::interaction::deserialize::Context *)new gradido::interaction::deserialize::Context(SWIG_STD_MOVE(arg1));
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_exports_InteractionDeserialize_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__interaction__deserialize__Context;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionDeserialize__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionDeserialize__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionDeserialize__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionDeserialize__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_InteractionDeserialize");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_exports_InteractionDeserialize_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::~_exports_InteractionDeserialize_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::interaction::deserialize::Context *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionDeserialize_run(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::deserialize::Context *arg1 = (gradido::interaction::deserialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionDeserialize_run.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__deserialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionDeserialize_run" "', argument " "1"" of type '" "gradido::interaction::deserialize::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::deserialize::Context * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->run();
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionDeserialize_isGradidoTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::deserialize::Context *arg1 = (gradido::interaction::deserialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionDeserialize_isGradidoTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__deserialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionDeserialize_isGradidoTransaction" "', argument " "1"" of type '" "gradido::interaction::deserialize::Context const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::deserialize::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::interaction::deserialize::Context const *)arg1)->isGradidoTransaction();
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionDeserialize_isTransactionBody(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::deserialize::Context *arg1 = (gradido::interaction::deserialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionDeserialize_isTransactionBody.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__deserialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionDeserialize_isTransactionBody" "', argument " "1"" of type '" "gradido::interaction::deserialize::Context const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::deserialize::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::interaction::deserialize::Context const *)arg1)->isTransactionBody();
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionDeserialize_isConfirmedTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::deserialize::Context *arg1 = (gradido::interaction::deserialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionDeserialize_isConfirmedTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__deserialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionDeserialize_isConfirmedTransaction" "', argument " "1"" of type '" "gradido::interaction::deserialize::Context const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::deserialize::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::interaction::deserialize::Context const *)arg1)->isConfirmedTransaction();
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionDeserialize_getType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::deserialize::Context *arg1 = (gradido::interaction::deserialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::deserialize::Type result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionDeserialize_getType.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__deserialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionDeserialize_getType" "', argument " "1"" of type '" "gradido::interaction::deserialize::Context const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::deserialize::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::interaction::deserialize::Type)((gradido::interaction::deserialize::Context const *)arg1)->getType();
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionDeserialize_getTransactionBody(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::deserialize::Context *arg1 = (gradido::interaction::deserialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::ConstTransactionBodyPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionDeserialize_getTransactionBody.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__deserialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionDeserialize_getTransactionBody" "', argument " "1"" of type '" "gradido::interaction::deserialize::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::deserialize::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (arg1)->getTransactionBody();
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::TransactionBody *>((&result)->get()), SWIGTYPE_p_gradido__data__TransactionBody, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::TransactionBody>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionDeserialize_getGradidoTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::deserialize::Context *arg1 = (gradido::interaction::deserialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::GradidoTransaction const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionDeserialize_getGradidoTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__deserialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionDeserialize_getGradidoTransaction" "', argument " "1"" of type '" "gradido::interaction::deserialize::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::deserialize::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (arg1)->getGradidoTransaction();
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::GradidoTransaction *>((&result)->get()), SWIGTYPE_p_gradido__data__GradidoTransaction, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::GradidoTransaction>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionDeserialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionDeserialize_getConfirmedTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::deserialize::Context *arg1 = (gradido::interaction::deserialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::data::ConfirmedTransaction const > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionDeserialize_getConfirmedTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__deserialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionDeserialize_getConfirmedTransaction" "', argument " "1"" of type '" "gradido::interaction::deserialize::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::deserialize::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (arg1)->getConfirmedTransaction();
      } catch (const gradido::interaction::deserialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::ConfirmedTransaction *>((&result)->get()), SWIGTYPE_p_gradido__data__ConfirmedTransaction, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::ConfirmedTransaction>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionSerialize_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionSerialize__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::TransactionBody *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::serialize::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionSerialize__SWIG_0.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__TransactionBody,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionSerialize" "', argument " "1"" of type '" "gradido::data::TransactionBody const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionSerialize" "', argument " "1"" of type '" "gradido::data::TransactionBody const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);{
      try {
        result = (gradido::interaction::serialize::Context *)new gradido::interaction::serialize::Context((gradido::data::TransactionBody const &)*arg1);
      } catch (const gradido::interaction::serialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionSerialize_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionSerialize__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::GradidoTransaction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::serialize::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionSerialize__SWIG_1.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionSerialize" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionSerialize" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);{
      try {
        result = (gradido::interaction::serialize::Context *)new gradido::interaction::serialize::Context((gradido::data::GradidoTransaction const &)*arg1);
      } catch (const gradido::interaction::serialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionSerialize_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionSerialize__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::ConfirmedTransaction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::serialize::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionSerialize__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionSerialize" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionSerialize" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);{
      try {
        result = (gradido::interaction::serialize::Context *)new gradido::interaction::serialize::Context((gradido::data::ConfirmedTransaction const &)*arg1);
      } catch (const gradido::interaction::serialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionSerialize_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionSerialize__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::SignatureMap *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::serialize::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionSerialize__SWIG_3.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__SignatureMap,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionSerialize" "', argument " "1"" of type '" "gradido::data::SignatureMap const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionSerialize" "', argument " "1"" of type '" "gradido::data::SignatureMap const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::SignatureMap * >(argp1);{
      try {
        result = (gradido::interaction::serialize::Context *)new gradido::interaction::serialize::Context((gradido::data::SignatureMap const &)*arg1);
      } catch (const gradido::interaction::serialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_InteractionSerialize_templ<SWIG_OBJ_WRAP>::_exports_InteractionSerialize_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__interaction__serialize__Context;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionSerialize__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionSerialize__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionSerialize__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionSerialize__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionSerialize__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionSerialize__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionSerialize__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionSerialize__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_InteractionSerialize");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_InteractionSerialize_templ<SWIG_OBJ_WRAP>::_exports_InteractionSerialize_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_InteractionSerialize_templ<SWIG_OBJ_WRAP>::~_exports_InteractionSerialize_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::interaction::serialize::Context *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionSerialize_templ<SWIG_OBJ_WRAP>::_wrap_InteractionSerialize_run(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::serialize::Context *arg1 = (gradido::interaction::serialize::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionSerialize_run.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__serialize__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionSerialize_run" "', argument " "1"" of type '" "gradido::interaction::serialize::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::serialize::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (arg1)->run();
      } catch (const gradido::interaction::serialize::MissingMemberException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionEntries__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionEntries__SWIG_0.");
    }
    {
      try {
        result = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *)new std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionEntries__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::size_type arg1 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionEntries__SWIG_1.");
    }
    {
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg1 = static_cast<size_t>(info[0].As<Napi::Number>().Uint32Value());
      }
    }
    {
      try {
        result = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *)new std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >(SWIG_STD_MOVE(arg1));
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionEntries__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionEntries__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransactionEntries" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransactionEntries" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const &""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);{
      try {
        result = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *)new std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >((std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const &)*arg1);
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_exports_TransactionEntries_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionEntries__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionEntries__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionEntries__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionEntries__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionEntries__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionEntries__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_TransactionEntries");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_exports_TransactionEntries_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntries_size(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::size_type result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntries_size.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntries_size" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);
    
    
    
    
    {
      try {
        result = ((std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const *)arg1)->size();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<double>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntries_capacity(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::size_type result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntries_capacity.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntries_capacity" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);
    
    
    
    
    {
      try {
        result = ((std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const *)arg1)->capacity();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<double>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntries_reserve(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntries_reserve.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntries_reserve" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);{
      {
        if(!info[0].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg2 = static_cast<size_t>(info[0].As<Napi::Number>().Uint32Value());
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->reserve(SWIG_STD_MOVE(arg2));
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntries_isEmpty(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntries_isEmpty.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntries_isEmpty" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > const *)arg1)->empty();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntries_clear(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntries_clear.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntries_clear" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->clear();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntries_add(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntries_add.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntries_add" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);{
      {
        gradido::blockchain::TransactionEntry *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__blockchain__TransactionEntry,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionEntries_add" "', argument " "2"" of type '" "gradido::blockchain::TransactionEntry""'");
        }
        arg2 = new std::shared_ptr< gradido::blockchain::TransactionEntry>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->push_back((std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::value_type const &)*arg2);
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    {
      delete arg2;
    }
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg2;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg2;
  }
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntries_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::value_type *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntries_get.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntries_get" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransactionEntries_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    
    
    
    try {
      {
        try {
          result = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_gradido_blockchain_TransactionEntry_Sg__Sg__get(arg1,arg2);
        } catch(const InvalidGradidoTransaction& e) {
          SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
        } catch (const std::exception& e) {
          SWIG_exception(SWIG_RuntimeError, e.what());
        }
      }
      
    } catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>(result->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
        auto owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntries_set(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntries_set.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntries_set" "', argument " "1"" of type '" "std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransactionEntries_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);{
      {
        gradido::blockchain::TransactionEntry *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__blockchain__TransactionEntry,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TransactionEntries_set" "', argument " "3"" of type '" "gradido::blockchain::TransactionEntry""'");
        }
        arg3 = new std::shared_ptr< gradido::blockchain::TransactionEntry>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    try {
      {
        try {
          std_vector_Sl_std_shared_ptr_Sl_gradido_blockchain_TransactionEntry_Sg__Sg__set(arg1,arg2,(std::shared_ptr< gradido::blockchain::TransactionEntry > const &)*arg3);
        } catch(const InvalidGradidoTransaction& e) {
          SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
        } catch (const std::exception& e) {
          SWIG_exception(SWIG_RuntimeError, e.what());
        }
      }
      
    } catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    jsresult = env.Undefined();
    
    {
      delete arg3;
    }
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg3;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg3;
  }
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TransactionEntries_templ<SWIG_OBJ_WRAP>::~_exports_TransactionEntries_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionEntry__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::blockchain::TransactionEntry *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionEntry__SWIG_0.");
    }
    {
      try {
        result = (gradido::blockchain::TransactionEntry *)new gradido::blockchain::TransactionEntry();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionEntry__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  memory::ConstBlockPtr arg1 ;
  gradido::blockchain::TransactionEntry *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionEntry__SWIG_1.");
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_TransactionEntry" "', argument " "1"" of type '" "memory::Block""'");
        }
        arg1 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::blockchain::TransactionEntry *)new gradido::blockchain::TransactionEntry(SWIG_STD_MOVE(arg1));
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionEntry__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::ConstConfirmedTransactionPtr arg1 ;
  gradido::blockchain::TransactionEntry *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionEntry__SWIG_2.");
    }
    {
      {
        gradido::data::ConfirmedTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_TransactionEntry" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction""'");
        }
        arg1 = std::shared_ptr<const gradido::data::ConfirmedTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (gradido::blockchain::TransactionEntry *)new gradido::blockchain::TransactionEntry(SWIG_STD_MOVE(arg1));
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_new_TransactionEntry__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  uint64_t arg1 ;
  date::month arg2 ;
  date::year arg3 ;
  gradido::data::TransactionType arg4 ;
  std::string arg5 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  gradido::blockchain::TransactionEntry *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TransactionEntry__SWIG_3.");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TransactionEntry" "', argument " "1"" of type '" "uint64_t""'");
    } 
    arg1 = static_cast< uint64_t >(val1);{
      {
        if(!info[1].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg2 = date::month(info[1].As<Napi::Number>().Uint32Value());
      }
    }
    {
      {
        if(!info[2].IsNumber()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a number");
        }
        arg3 = date::year(info[2].As<Napi::Number>().Int32Value());
      }
    }
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TransactionEntry" "', argument " "4"" of type '" "gradido::data::TransactionType""'");
    } 
    arg4 = static_cast< gradido::data::TransactionType >(val4);{
      {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(info[4], &ptr);
        if (!SWIG_IsOK(res) || !ptr) {
          SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TransactionEntry" "', argument " "5"" of type '" "std::string""'"); 
        }
        arg5 = *ptr;
        if (SWIG_IsNewObj(res)) delete ptr;
      }
    }
    {
      try {
        result = (gradido::blockchain::TransactionEntry *)new gradido::blockchain::TransactionEntry(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,SWIG_STD_MOVE(arg5));
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_exports_TransactionEntry_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__blockchain__TransactionEntry;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionEntry__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionEntry__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionEntry__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionEntry__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionEntry__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionEntry__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 5 && static_cast<int>(info.Length()) <= 5) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_TransactionEntry__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_TransactionEntry__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_TransactionEntry");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_exports_TransactionEntry_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_lt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  gradido::blockchain::TransactionEntry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_lt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_lt" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__blockchain__TransactionEntry,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionEntry_lt" "', argument " "2"" of type '" "gradido::blockchain::TransactionEntry const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransactionEntry_lt" "', argument " "2"" of type '" "gradido::blockchain::TransactionEntry const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::blockchain::TransactionEntry const *)arg1)->operator <((gradido::blockchain::TransactionEntry const &)*arg2);
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_gt(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  gradido::blockchain::TransactionEntry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_gt.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_gt" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__blockchain__TransactionEntry,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransactionEntry_gt" "', argument " "2"" of type '" "gradido::blockchain::TransactionEntry const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransactionEntry_gt" "', argument " "2"" of type '" "gradido::blockchain::TransactionEntry const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp2);
    
    
    
    
    {
      try {
        result = (bool)((gradido::blockchain::TransactionEntry const *)arg1)->operator >((gradido::blockchain::TransactionEntry const &)*arg2);
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_getTransactionNr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_getTransactionNr.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_getTransactionNr" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = (uint64_t)((gradido::blockchain::TransactionEntry const *)arg1)->getTransactionNr();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_getSerializedTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_getSerializedTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_getSerializedTransaction" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::TransactionEntry const *)arg1)->getSerializedTransaction();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<memory::Block *>((&result)->get()), SWIGTYPE_p_memory__Block, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const memory::Block>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_getConfirmedTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::ConstConfirmedTransactionPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_getConfirmedTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_getConfirmedTransaction" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::TransactionEntry const *)arg1)->getConfirmedTransaction();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::ConfirmedTransaction *>((&result)->get()), SWIGTYPE_p_gradido__data__ConfirmedTransaction, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::ConfirmedTransaction>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_getMonth(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  date::month result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_getMonth.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_getMonth" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::TransactionEntry const *)arg1)->getMonth();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<unsigned>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_getYear(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  date::year result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_getYear.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_getYear" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::TransactionEntry const *)arg1)->getYear();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult = Napi::Number::New(env, static_cast<int>(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_getTransactionType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TransactionType result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_getTransactionType.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_getTransactionType" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::TransactionType)((gradido::blockchain::TransactionEntry const *)arg1)->getTransactionType();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_getCoinCommunityId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string_view result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_getCoinCommunityId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_getCoinCommunityId" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::TransactionEntry const *)arg1)->getCoinCommunityId();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult =Napi::String::New(info.Env(), std::string(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_getTransactionBody(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::ConstTransactionBodyPtr result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_getTransactionBody.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_getTransactionBody" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::TransactionEntry const *)arg1)->getTransactionBody();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::data::TransactionBody *>((&result)->get()), SWIGTYPE_p_gradido__data__TransactionBody, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr<const gradido::data::TransactionBody>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_isTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_isTransfer.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_isTransfer" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::blockchain::TransactionEntry const *)arg1)->isTransfer();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_isCreation(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_isCreation.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_isCreation" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::blockchain::TransactionEntry const *)arg1)->isCreation();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_isCommunityFriendsUpdate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_isCommunityFriendsUpdate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_isCommunityFriendsUpdate" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::blockchain::TransactionEntry const *)arg1)->isCommunityFriendsUpdate();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_isRegisterAddress(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_isRegisterAddress.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_isRegisterAddress" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::blockchain::TransactionEntry const *)arg1)->isRegisterAddress();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_isDeferredTransfer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_isDeferredTransfer.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_isDeferredTransfer" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::blockchain::TransactionEntry const *)arg1)->isDeferredTransfer();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::_wrap_TransactionEntry_isCommunityRoot(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::TransactionEntry *arg1 = (gradido::blockchain::TransactionEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TransactionEntry_isCommunityRoot.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__TransactionEntry, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransactionEntry_isCommunityRoot" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::TransactionEntry * >(argp1);
    
    
    
    
    {
      try {
        result = (bool)((gradido::blockchain::TransactionEntry const *)arg1)->isCommunityRoot();
      } catch(const InvalidGradidoTransaction& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TransactionEntry_templ<SWIG_OBJ_WRAP>::~_exports_TransactionEntry_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::blockchain::TransactionEntry *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Pagination_templ<SWIG_OBJ_WRAP>::_wrap_new_Pagination__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::blockchain::Pagination *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Pagination__SWIG_0.");
    }
    {
      try {
        result = (gradido::blockchain::Pagination *)new gradido::blockchain::Pagination();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Pagination_templ<SWIG_OBJ_WRAP>::_wrap_new_Pagination__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  gradido::blockchain::Pagination *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Pagination__SWIG_1.");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pagination" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);{
      try {
        result = (gradido::blockchain::Pagination *)new gradido::blockchain::Pagination(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Pagination_templ<SWIG_OBJ_WRAP>::_wrap_new_Pagination__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  gradido::blockchain::Pagination *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Pagination__SWIG_2.");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pagination" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pagination" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);{
      try {
        result = (gradido::blockchain::Pagination *)new gradido::blockchain::Pagination(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_Pagination_templ<SWIG_OBJ_WRAP>::_exports_Pagination_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__blockchain__Pagination;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_Pagination__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_Pagination__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_Pagination__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_Pagination__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_Pagination__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_Pagination__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_Pagination");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_Pagination_templ<SWIG_OBJ_WRAP>::_exports_Pagination_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Pagination_templ<SWIG_OBJ_WRAP>::_wrap_Pagination_size_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Pagination *arg1 = (gradido::blockchain::Pagination *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Pagination, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pagination_size_set" "', argument " "1"" of type '" "gradido::blockchain::Pagination *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Pagination * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pagination_size_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    if (arg1) (arg1)->size = arg2;
    
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Pagination_templ<SWIG_OBJ_WRAP>::_wrap_Pagination_size_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Pagination *arg1 = (gradido::blockchain::Pagination *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Pagination, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pagination_size_get" "', argument " "1"" of type '" "gradido::blockchain::Pagination *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Pagination * >(argp1);
    
    result = (unsigned int) ((arg1)->size);
    
    jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Pagination_templ<SWIG_OBJ_WRAP>::_wrap_Pagination_page_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Pagination *arg1 = (gradido::blockchain::Pagination *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Pagination, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pagination_page_set" "', argument " "1"" of type '" "gradido::blockchain::Pagination *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Pagination * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pagination_page_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    if (arg1) (arg1)->page = arg2;
    
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Pagination_templ<SWIG_OBJ_WRAP>::_wrap_Pagination_page_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Pagination *arg1 = (gradido::blockchain::Pagination *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Pagination, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pagination_page_get" "', argument " "1"" of type '" "gradido::blockchain::Pagination *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Pagination * >(argp1);
    
    result = (unsigned int) ((arg1)->page);
    
    jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Pagination_templ<SWIG_OBJ_WRAP>::_wrap_Pagination_skipEntriesCount(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Pagination *arg1 = (gradido::blockchain::Pagination *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Pagination_skipEntriesCount.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Pagination, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pagination_skipEntriesCount" "', argument " "1"" of type '" "gradido::blockchain::Pagination const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Pagination * >(argp1);
    
    
    
    
    {
      try {
        result = (unsigned int)((gradido::blockchain::Pagination const *)arg1)->skipEntriesCount();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_Pagination_templ<SWIG_OBJ_WRAP>::~_exports_Pagination_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::blockchain::Pagination *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_Filter_templ<SWIG_OBJ_WRAP>::_exports_Filter_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__blockchain__Filter;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  gradido::blockchain::Filter *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Filter.");
    }
    {
      try {
        result = (gradido::blockchain::Filter *)new gradido::blockchain::Filter();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_Filter_templ<SWIG_OBJ_WRAP>::_exports_Filter_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_minTransactionNr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_minTransactionNr_set" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Filter_minTransactionNr_set" "', argument " "2"" of type '" "uint64_t""'");
    } 
    arg2 = static_cast< uint64_t >(val2);
    
    if (arg1) (arg1)->minTransactionNr = arg2;
    
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_minTransactionNr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_minTransactionNr_get" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);
    
    result = (uint64_t) ((arg1)->minTransactionNr);
    
    jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_maxTransactionNr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_maxTransactionNr_set" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Filter_maxTransactionNr_set" "', argument " "2"" of type '" "uint64_t""'");
    } 
    arg2 = static_cast< uint64_t >(val2);
    
    if (arg1) (arg1)->maxTransactionNr = arg2;
    
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_maxTransactionNr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_maxTransactionNr_get" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);
    
    result = (uint64_t) ((arg1)->maxTransactionNr);
    
    jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_involvedPublicKey_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  memory::ConstBlockPtr *arg2 = (memory::ConstBlockPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_involvedPublicKey_set" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(value, reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Filter_involvedPublicKey_set" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = new std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    if (arg1) (arg1)->involvedPublicKey = *arg2;
    
    {
      delete arg2;
    }
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg2;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg2;
  }
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_involvedPublicKey_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  memory::ConstBlockPtr *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_involvedPublicKey_get" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);
    
    result = (memory::ConstBlockPtr *)& ((arg1)->involvedPublicKey);
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__shared_ptrT_memory__Block_const_t, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_searchDirection_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  gradido::blockchain::SearchDirection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_searchDirection_set" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Filter_searchDirection_set" "', argument " "2"" of type '" "gradido::blockchain::SearchDirection""'");
    } 
    arg2 = static_cast< gradido::blockchain::SearchDirection >(val2);
    
    if (arg1) (arg1)->searchDirection = arg2;
    
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_searchDirection_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::blockchain::SearchDirection result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_searchDirection_get" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);
    
    result = (gradido::blockchain::SearchDirection) ((arg1)->searchDirection);
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_pagination_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  gradido::blockchain::Pagination *arg2 = (gradido::blockchain::Pagination *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_pagination_set" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_gradido__blockchain__Pagination, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Filter_pagination_set" "', argument " "2"" of type '" "gradido::blockchain::Pagination *""'"); 
    }
    arg2 = reinterpret_cast< gradido::blockchain::Pagination * >(argp2);
    
    if (arg1) (arg1)->pagination = *arg2;
    
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_pagination_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::blockchain::Pagination *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_pagination_get" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);
    
    result = (gradido::blockchain::Pagination *)& ((arg1)->pagination);
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__Pagination, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_coinCommunityId_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_coinCommunityId_set" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);{
      {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(value, &ptr);
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Filter_coinCommunityId_set" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        if (!ptr) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Filter_coinCommunityId_set" "', argument " "2"" of type '" "std::string const &""'"); 
        }
        arg2 = ptr;
      }
    }
    
    
    if (arg1) (arg1)->coinCommunityId = *arg2;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_coinCommunityId_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_coinCommunityId_get" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);
    
    result = (std::string *) & ((arg1)->coinCommunityId);
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(*result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_timepointInterval_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  TimepointInterval *arg2 = (TimepointInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_timepointInterval_set" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_TimepointInterval, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Filter_timepointInterval_set" "', argument " "2"" of type '" "TimepointInterval *""'"); 
    }
    arg2 = reinterpret_cast< TimepointInterval * >(argp2);
    
    if (arg1) (arg1)->timepointInterval = *arg2;
    
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_timepointInterval_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TimepointInterval *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_timepointInterval_get" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);
    
    result = (TimepointInterval *)& ((arg1)->timepointInterval);
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TimepointInterval, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_transactionType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  gradido::data::TransactionType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_transactionType_set" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Filter_transactionType_set" "', argument " "2"" of type '" "gradido::data::TransactionType""'");
    } 
    arg2 = static_cast< gradido::data::TransactionType >(val2);
    
    if (arg1) (arg1)->transactionType = arg2;
    
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_transactionType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *arg1 = (gradido::blockchain::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::TransactionType result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_transactionType_get" "', argument " "1"" of type '" "gradido::blockchain::Filter *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);
    
    result = (gradido::data::TransactionType) ((arg1)->transactionType);
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_LAST_TRANSACTION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    result = (gradido::blockchain::Filter *)&gradido::blockchain::Filter::LAST_TRANSACTION;
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Filter_templ<SWIG_OBJ_WRAP>::_wrap_Filter_ALL_TRANSACTIONS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Filter *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    
    
    result = (gradido::blockchain::Filter *)&gradido::blockchain::Filter::ALL_TRANSACTIONS;
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__Filter, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_Filter_templ<SWIG_OBJ_WRAP>::~_exports_Filter_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::blockchain::Filter *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_reset(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_reset.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_reset" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->reset();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_setMinTransactionNr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  gradido::blockchain::FilterBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_setMinTransactionNr.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_setMinTransactionNr" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterBuilder_setMinTransactionNr" "', argument " "2"" of type '" "uint64_t""'");
    } 
    arg2 = static_cast< uint64_t >(val2);
    
    
    
    
    {
      try {
        result = (gradido::blockchain::FilterBuilder *) &(arg1)->setMinTransactionNr(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_setMaxTransactionNr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  gradido::blockchain::FilterBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_setMaxTransactionNr.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_setMaxTransactionNr" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterBuilder_setMaxTransactionNr" "', argument " "2"" of type '" "uint64_t""'");
    } 
    arg2 = static_cast< uint64_t >(val2);
    
    
    
    
    {
      try {
        result = (gradido::blockchain::FilterBuilder *) &(arg1)->setMaxTransactionNr(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_setInvolvedPublicKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::blockchain::FilterBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_setInvolvedPublicKey.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_setInvolvedPublicKey" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FilterBuilder_setInvolvedPublicKey" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::blockchain::FilterBuilder *) &(arg1)->setInvolvedPublicKey(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_setSearchDirection(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  gradido::blockchain::SearchDirection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gradido::blockchain::FilterBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_setSearchDirection.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_setSearchDirection" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterBuilder_setSearchDirection" "', argument " "2"" of type '" "gradido::blockchain::SearchDirection""'");
    } 
    arg2 = static_cast< gradido::blockchain::SearchDirection >(val2);
    
    
    
    
    {
      try {
        result = (gradido::blockchain::FilterBuilder *) &(arg1)->setSearchDirection(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_setPagination(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  gradido::blockchain::Pagination arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gradido::blockchain::FilterBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_setPagination.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_setPagination" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);{
      {
        res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__blockchain__Pagination,  0 );
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterBuilder_setPagination" "', argument " "2"" of type '" "gradido::blockchain::Pagination""'"); 
        }  
        if (!argp2) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterBuilder_setPagination" "', argument " "2"" of type '" "gradido::blockchain::Pagination""'");
        } else {
          arg2 = *(reinterpret_cast< gradido::blockchain::Pagination * >(argp2));
        }
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::blockchain::FilterBuilder *) &(arg1)->setPagination(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_setCoinCommunityId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  std::string_view arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string tempString2 ;
  gradido::blockchain::FilterBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_setCoinCommunityId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_setCoinCommunityId" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);{
      {
        if (info[0].IsString()) {
          tempString2 = info[0].ToString();
          arg2 = tempString2;
        } else {
          SWIG_exception_fail(SWIG_TypeError, "in method 'FilterBuilder_setCoinCommunityId', argument is not a String");
        }
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::blockchain::FilterBuilder *) &(arg1)->setCoinCommunityId(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_setTimepointInterval(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  TimepointInterval arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gradido::blockchain::FilterBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_setTimepointInterval.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_setTimepointInterval" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);{
      {
        res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_TimepointInterval,  0 );
        if (!SWIG_IsOK(res2)) {
          SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterBuilder_setTimepointInterval" "', argument " "2"" of type '" "TimepointInterval""'"); 
        }  
        if (!argp2) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterBuilder_setTimepointInterval" "', argument " "2"" of type '" "TimepointInterval""'");
        } else {
          arg2 = *(reinterpret_cast< TimepointInterval * >(argp2));
        }
      }
    }
    
    
    
    
    
    {
      try {
        result = (gradido::blockchain::FilterBuilder *) &(arg1)->setTimepointInterval(SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_setTransactionType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  gradido::data::TransactionType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gradido::blockchain::FilterBuilder *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_setTransactionType.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_setTransactionType" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterBuilder_setTransactionType" "', argument " "2"" of type '" "gradido::data::TransactionType""'");
    } 
    arg2 = static_cast< gradido::data::TransactionType >(val2);
    
    
    
    
    {
      try {
        result = (gradido::blockchain::FilterBuilder *) &(arg1)->setTransactionType(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_build(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::blockchain::Filter result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_build.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_build" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);
    
    
    
    
    {
      try {
        result = (arg1)->build();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new gradido::blockchain::Filter(result)), SWIGTYPE_p_gradido__blockchain__Filter, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_wrap_FilterBuilder_getFilter(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::FilterBuilder *arg1 = (gradido::blockchain::FilterBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::blockchain::Filter result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_FilterBuilder_getFilter.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__FilterBuilder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterBuilder_getFilter" "', argument " "1"" of type '" "gradido::blockchain::FilterBuilder const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::FilterBuilder * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::FilterBuilder const *)arg1)->getFilter();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new gradido::blockchain::Filter(result)), SWIGTYPE_p_gradido__blockchain__Filter, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_exports_FilterBuilder_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__blockchain__FilterBuilder;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  gradido::blockchain::FilterBuilder *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_FilterBuilder.");
    }
    {
      try {
        result = (gradido::blockchain::FilterBuilder *)new gradido::blockchain::FilterBuilder();
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::_exports_FilterBuilder_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_FilterBuilder_templ<SWIG_OBJ_WRAP>::~_exports_FilterBuilder_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::blockchain::FilterBuilder *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_wrap_new_DeferredRedeemedTransferPair__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DeferredRedeemedTransferPair__SWIG_0.");
    }
    {
      try {
        result = (std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *)new std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_wrap_new_DeferredRedeemedTransferPair__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::shared_ptr< gradido::blockchain::TransactionEntry > arg1 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > arg2 ;
  std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DeferredRedeemedTransferPair__SWIG_1.");
    }
    {
      {
        gradido::blockchain::TransactionEntry *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__blockchain__TransactionEntry,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_DeferredRedeemedTransferPair" "', argument " "1"" of type '" "gradido::blockchain::TransactionEntry""'");
        }
        arg1 = std::shared_ptr< gradido::blockchain::TransactionEntry>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        gradido::blockchain::TransactionEntry *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__blockchain__TransactionEntry,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_DeferredRedeemedTransferPair" "', argument " "2"" of type '" "gradido::blockchain::TransactionEntry""'");
        }
        arg2 = std::shared_ptr< gradido::blockchain::TransactionEntry>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      try {
        result = (std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *)new std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > >(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_wrap_new_DeferredRedeemedTransferPair__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DeferredRedeemedTransferPair__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DeferredRedeemedTransferPair" "', argument " "1"" of type '" "std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DeferredRedeemedTransferPair" "', argument " "1"" of type '" "std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);{
      try {
        result = (std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *)new std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > >((std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_exports_DeferredRedeemedTransferPair_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_DeferredRedeemedTransferPair__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_DeferredRedeemedTransferPair__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_DeferredRedeemedTransferPair__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_DeferredRedeemedTransferPair__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_DeferredRedeemedTransferPair__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_DeferredRedeemedTransferPair__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_DeferredRedeemedTransferPair");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_exports_DeferredRedeemedTransferPair_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_wrap_DeferredRedeemedTransferPair_first_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > *arg2 = (std::shared_ptr< gradido::blockchain::TransactionEntry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeferredRedeemedTransferPair_first_set" "', argument " "1"" of type '" "std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);{
      {
        gradido::blockchain::TransactionEntry *plain_ptr;
        int res = SWIG_ConvertPtr(value, reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__blockchain__TransactionEntry,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "DeferredRedeemedTransferPair_first_set" "', argument " "2"" of type '" "gradido::blockchain::TransactionEntry""'");
        }
        arg2 = new std::shared_ptr< gradido::blockchain::TransactionEntry>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    if (arg1) (arg1)->first = *arg2;
    
    {
      delete arg2;
    }
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg2;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg2;
  }
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_wrap_DeferredRedeemedTransferPair_first_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeferredRedeemedTransferPair_first_get" "', argument " "1"" of type '" "std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);
    
    result = (std::shared_ptr< gradido::blockchain::TransactionEntry > *)& ((arg1)->first);
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__shared_ptrT_gradido__blockchain__TransactionEntry_t, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_wrap_DeferredRedeemedTransferPair_second_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > *arg2 = (std::shared_ptr< gradido::blockchain::TransactionEntry > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeferredRedeemedTransferPair_second_set" "', argument " "1"" of type '" "std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);{
      {
        gradido::blockchain::TransactionEntry *plain_ptr;
        int res = SWIG_ConvertPtr(value, reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__blockchain__TransactionEntry,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "DeferredRedeemedTransferPair_second_set" "', argument " "2"" of type '" "gradido::blockchain::TransactionEntry""'");
        }
        arg2 = new std::shared_ptr< gradido::blockchain::TransactionEntry>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    if (arg1) (arg1)->second = *arg2;
    
    {
      delete arg2;
    }
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    {
      delete arg2;
    }
    
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  {
    delete arg2;
  }
  
  return;
#endif
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::_wrap_DeferredRedeemedTransferPair_second_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *arg1 = (std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > *result = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeferredRedeemedTransferPair_second_get" "', argument " "1"" of type '" "std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > * >(argp1);
    
    result = (std::shared_ptr< gradido::blockchain::TransactionEntry > *)& ((arg1)->second);
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__shared_ptrT_gradido__blockchain__TransactionEntry_t, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_DeferredRedeemedTransferPair_templ<SWIG_OBJ_WRAP>::~_exports_DeferredRedeemedTransferPair_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_Abstract_templ<SWIG_OBJ_WRAP>::~_exports_Abstract_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::blockchain::Abstract *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_addGradidoTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  gradido::data::ConstGradidoTransactionPtr arg2 ;
  memory::ConstBlockPtr arg3 ;
  Timepoint arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Abstract_addGradidoTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_addGradidoTransaction" "', argument " "1"" of type '" "gradido::blockchain::Abstract *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);{
      {
        gradido::data::GradidoTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Abstract_addGradidoTransaction" "', argument " "2"" of type '" "gradido::data::GradidoTransaction""'");
        }
        arg2 = std::shared_ptr<const gradido::data::GradidoTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Abstract_addGradidoTransaction" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[2].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg4 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[2].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)(arg1)->addGradidoTransaction(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_findAll__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  gradido::blockchain::Filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< std::list< std::shared_ptr< gradido::blockchain::TransactionEntry > > > result;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > transactionEntriesVector ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_findAll" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__blockchain__Filter,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Abstract_findAll" "', argument " "2"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Abstract_findAll" "', argument " "2"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::blockchain::Filter * >(argp2);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->findAll((gradido::blockchain::Filter const &)*arg2);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      transactionEntriesVector.reserve((&result)->size());
      auto& transactionsList = *(&result);
      for(auto v: transactionsList) {
        transactionEntriesVector.push_back(v);
      }
      jsresult = SWIG_NewPointerObj(
        (new std::vector<std::shared_ptr<gradido::blockchain::TransactionEntry>>(transactionEntriesVector)),
        SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 
        SWIG_POINTER_OWN |  0 
        );
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_findAll__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::list< std::shared_ptr< gradido::blockchain::TransactionEntry > > > result;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > transactionEntriesVector ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_findAll" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->findAll();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      transactionEntriesVector.reserve((&result)->size());
      auto& transactionsList = *(&result);
      for(auto v: transactionsList) {
        transactionEntriesVector.push_back(v);
      }
      jsresult = SWIG_NewPointerObj(
        (new std::vector<std::shared_ptr<gradido::blockchain::TransactionEntry>>(transactionEntriesVector)),
        SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 
        SWIG_POINTER_OWN |  0 
        );
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract__wrap_Abstract_findAll(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Abstract_findAll__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Abstract_findAll__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Abstract_findAll__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Abstract_findAll__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function findAll.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_findOne__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  gradido::blockchain::Filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_findOne" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__blockchain__Filter,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Abstract_findOne" "', argument " "2"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Abstract_findOne" "', argument " "2"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::blockchain::Filter * >(argp2);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->findOne((gradido::blockchain::Filter const &)*arg2);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_findOne__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_findOne" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->findOne();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract__wrap_Abstract_findOne(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Abstract_findOne__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Abstract_findOne__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Abstract_findOne__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Abstract_findOne__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function findOne.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_findTimeoutedDeferredTransfersInRange(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  memory::ConstBlockPtr arg2 ;
  TimepointInterval arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< std::list< std::shared_ptr< gradido::blockchain::TransactionEntry > > > result;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > transactionEntriesVector ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Abstract_findTimeoutedDeferredTransfersInRange.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_findTimeoutedDeferredTransfersInRange" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Abstract_findTimeoutedDeferredTransfersInRange" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_TimepointInterval,  0 );
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Abstract_findTimeoutedDeferredTransfersInRange" "', argument " "3"" of type '" "TimepointInterval""'"); 
        }  
        if (!argp3) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Abstract_findTimeoutedDeferredTransfersInRange" "', argument " "3"" of type '" "TimepointInterval""'");
        } else {
          arg3 = *(reinterpret_cast< TimepointInterval * >(argp3));
        }
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(info[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Abstract_findTimeoutedDeferredTransfersInRange" "', argument " "4"" of type '" "uint64_t""'");
    } 
    arg4 = static_cast< uint64_t >(val4);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->findTimeoutedDeferredTransfersInRange(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      transactionEntriesVector.reserve((&result)->size());
      auto& transactionsList = *(&result);
      for(auto v: transactionsList) {
        transactionEntriesVector.push_back(v);
      }
      jsresult = SWIG_NewPointerObj(
        (new std::vector<std::shared_ptr<gradido::blockchain::TransactionEntry>>(transactionEntriesVector)),
        SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 
        SWIG_POINTER_OWN |  0 
        );
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_findRedeemedDeferredTransfersInRange(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  memory::ConstBlockPtr arg2 ;
  TimepointInterval arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< std::list< std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Abstract_findRedeemedDeferredTransfersInRange.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_findRedeemedDeferredTransfersInRange" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Abstract_findRedeemedDeferredTransfersInRange" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_TimepointInterval,  0 );
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Abstract_findRedeemedDeferredTransfersInRange" "', argument " "3"" of type '" "TimepointInterval""'"); 
        }  
        if (!argp3) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Abstract_findRedeemedDeferredTransfersInRange" "', argument " "3"" of type '" "TimepointInterval""'");
        } else {
          arg3 = *(reinterpret_cast< TimepointInterval * >(argp3));
        }
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(info[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Abstract_findRedeemedDeferredTransfersInRange" "', argument " "4"" of type '" "uint64_t""'");
    } 
    arg4 = static_cast< uint64_t >(val4);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->findRedeemedDeferredTransfersInRange(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::list< gradido::blockchain::DeferredRedeemedTransferPair >(result)), SWIGTYPE_p_std__listT_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_getAddressType__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  gradido::blockchain::Filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gradido::data::AddressType result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_getAddressType" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__blockchain__Filter,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Abstract_getAddressType" "', argument " "2"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Abstract_getAddressType" "', argument " "2"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::blockchain::Filter * >(argp2);
    
    
    
    
    {
      try {
        result = (gradido::data::AddressType)((gradido::blockchain::Abstract const *)arg1)->getAddressType((gradido::blockchain::Filter const &)*arg2);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_getAddressType__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::data::AddressType result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_getAddressType" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::data::AddressType)((gradido::blockchain::Abstract const *)arg1)->getAddressType();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract__wrap_Abstract_getAddressType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Abstract_getAddressType__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Abstract_getAddressType__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Abstract_getAddressType__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Abstract_getAddressType__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function getAddressType.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_getTransactionForId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Abstract_getTransactionForId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_getTransactionForId" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Abstract_getTransactionForId" "', argument " "2"" of type '" "uint64_t""'");
    } 
    arg2 = static_cast< uint64_t >(val2);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->getTransactionForId(arg2);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_findByMessageId__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  memory::ConstBlockPtr arg2 ;
  gradido::blockchain::Filter *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_findByMessageId" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Abstract_findByMessageId" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_gradido__blockchain__Filter,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Abstract_findByMessageId" "', argument " "3"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Abstract_findByMessageId" "', argument " "3"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    arg3 = reinterpret_cast< gradido::blockchain::Filter * >(argp3);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->findByMessageId(SWIG_STD_MOVE(arg2),(gradido::blockchain::Filter const &)*arg3);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_findByMessageId__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_findByMessageId" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Abstract_findByMessageId" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->findByMessageId(SWIG_STD_MOVE(arg2));
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract__wrap_Abstract_findByMessageId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Abstract_findByMessageId__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Abstract_findByMessageId__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_Abstract_findByMessageId__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_Abstract_findByMessageId__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function findByMessageId.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_getCommunityId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string_view result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Abstract_getCommunityId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_getCommunityId" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->getCommunityId();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      jsresult =Napi::String::New(info.Env(), std::string(result));
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Abstract_templ<SWIG_OBJ_WRAP>::_wrap_Abstract_getStartDate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::Abstract *arg1 = (gradido::blockchain::Abstract *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Timepoint result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Abstract_getStartDate.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__Abstract, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Abstract_getStartDate" "', argument " "1"" of type '" "gradido::blockchain::Abstract const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::Abstract const *)arg1)->getStartDate();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      double ms = std::chrono::duration_cast<std::chrono::milliseconds>((&result)->time_since_epoch()).count();
      jsresult = Napi::Date::New(env, ms);
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_Abstract_templ<SWIG_OBJ_WRAP>::_exports_Abstract_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class Abstract can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_Abstract_templ<SWIG_OBJ_WRAP>::_exports_Abstract_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::~_exports_InMemoryBlockchain_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::blockchain::InMemory *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_clear(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchain_clear.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_clear" "', argument " "1"" of type '" "gradido::blockchain::InMemory *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->clear();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_exit(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchain_exit.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_exit" "', argument " "1"" of type '" "gradido::blockchain::InMemory *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->exit();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_addGradidoTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  gradido::data::ConstGradidoTransactionPtr arg2 ;
  memory::ConstBlockPtr arg3 ;
  Timepoint arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchain_addGradidoTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_addGradidoTransaction" "', argument " "1"" of type '" "gradido::blockchain::InMemory *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);{
      {
        gradido::data::GradidoTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InMemoryBlockchain_addGradidoTransaction" "', argument " "2"" of type '" "gradido::data::GradidoTransaction""'");
        }
        arg2 = std::shared_ptr<const gradido::data::GradidoTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[1], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InMemoryBlockchain_addGradidoTransaction" "', argument " "3"" of type '" "memory::Block""'");
        }
        arg3 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[2].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg4 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[2].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = (bool)(arg1)->addGradidoTransaction(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_getSortedTransactions(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::blockchain::TransactionEntries *result = 0 ;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > transactionEntriesVector ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchain_getSortedTransactions.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_getSortedTransactions" "', argument " "1"" of type '" "gradido::blockchain::InMemory *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);
    
    
    
    
    {
      try {
        result = (gradido::blockchain::TransactionEntries *) &(arg1)->getSortedTransactions();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      transactionEntriesVector.reserve(result->size());
      auto& transactionsList = *result;
      for(auto v: transactionsList) {
        transactionEntriesVector.push_back(v);
      }
      jsresult = SWIG_NewPointerObj(
        (new std::vector<std::shared_ptr<gradido::blockchain::TransactionEntry>>(transactionEntriesVector)),
        SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 
        SWIG_POINTER_OWN |  0 
        );
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_findAll__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  gradido::blockchain::Filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< std::list< std::shared_ptr< gradido::blockchain::TransactionEntry > > > result;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > transactionEntriesVector ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_findAll" "', argument " "1"" of type '" "gradido::blockchain::InMemory const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_gradido__blockchain__Filter,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InMemoryBlockchain_findAll" "', argument " "2"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InMemoryBlockchain_findAll" "', argument " "2"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    arg2 = reinterpret_cast< gradido::blockchain::Filter * >(argp2);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::InMemory const *)arg1)->findAll((gradido::blockchain::Filter const &)*arg2);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      transactionEntriesVector.reserve((&result)->size());
      auto& transactionsList = *(&result);
      for(auto v: transactionsList) {
        transactionEntriesVector.push_back(v);
      }
      jsresult = SWIG_NewPointerObj(
        (new std::vector<std::shared_ptr<gradido::blockchain::TransactionEntry>>(transactionEntriesVector)),
        SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 
        SWIG_POINTER_OWN |  0 
        );
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_findAll__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::list< std::shared_ptr< gradido::blockchain::TransactionEntry > > > result;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > transactionEntriesVector ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_findAll" "', argument " "1"" of type '" "gradido::blockchain::InMemory const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::InMemory const *)arg1)->findAll();
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      transactionEntriesVector.reserve((&result)->size());
      auto& transactionsList = *(&result);
      for(auto v: transactionsList) {
        transactionEntriesVector.push_back(v);
      }
      jsresult = SWIG_NewPointerObj(
        (new std::vector<std::shared_ptr<gradido::blockchain::TransactionEntry>>(transactionEntriesVector)),
        SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 
        SWIG_POINTER_OWN |  0 
        );
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain__wrap_InMemoryBlockchain_findAll(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InMemoryBlockchain_findAll__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InMemoryBlockchain_findAll__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InMemoryBlockchain_findAll__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InMemoryBlockchain_findAll__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function findAll.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_findTimeoutedDeferredTransfersInRange(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  memory::ConstBlockPtr arg2 ;
  TimepointInterval arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< std::list< std::shared_ptr< gradido::blockchain::TransactionEntry > > > result;
  std::vector< std::shared_ptr< gradido::blockchain::TransactionEntry > > transactionEntriesVector ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchain_findTimeoutedDeferredTransfersInRange.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_findTimeoutedDeferredTransfersInRange" "', argument " "1"" of type '" "gradido::blockchain::InMemory const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InMemoryBlockchain_findTimeoutedDeferredTransfersInRange" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_TimepointInterval,  0 );
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InMemoryBlockchain_findTimeoutedDeferredTransfersInRange" "', argument " "3"" of type '" "TimepointInterval""'"); 
        }  
        if (!argp3) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InMemoryBlockchain_findTimeoutedDeferredTransfersInRange" "', argument " "3"" of type '" "TimepointInterval""'");
        } else {
          arg3 = *(reinterpret_cast< TimepointInterval * >(argp3));
        }
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(info[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InMemoryBlockchain_findTimeoutedDeferredTransfersInRange" "', argument " "4"" of type '" "uint64_t""'");
    } 
    arg4 = static_cast< uint64_t >(val4);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::InMemory const *)arg1)->findTimeoutedDeferredTransfersInRange(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      transactionEntriesVector.reserve((&result)->size());
      auto& transactionsList = *(&result);
      for(auto v: transactionsList) {
        transactionEntriesVector.push_back(v);
      }
      jsresult = SWIG_NewPointerObj(
        (new std::vector<std::shared_ptr<gradido::blockchain::TransactionEntry>>(transactionEntriesVector)),
        SWIGTYPE_p_std__vectorT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t, 
        SWIG_POINTER_OWN |  0 
        );
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_findRedeemedDeferredTransfersInRange(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  memory::ConstBlockPtr arg2 ;
  TimepointInterval arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< std::list< std::pair< std::shared_ptr< gradido::blockchain::TransactionEntry >,std::shared_ptr< gradido::blockchain::TransactionEntry > > > > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchain_findRedeemedDeferredTransfersInRange.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_findRedeemedDeferredTransfersInRange" "', argument " "1"" of type '" "gradido::blockchain::InMemory const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InMemoryBlockchain_findRedeemedDeferredTransfersInRange" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_TimepointInterval,  0 );
        if (!SWIG_IsOK(res3)) {
          SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InMemoryBlockchain_findRedeemedDeferredTransfersInRange" "', argument " "3"" of type '" "TimepointInterval""'"); 
        }  
        if (!argp3) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InMemoryBlockchain_findRedeemedDeferredTransfersInRange" "', argument " "3"" of type '" "TimepointInterval""'");
        } else {
          arg3 = *(reinterpret_cast< TimepointInterval * >(argp3));
        }
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(info[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InMemoryBlockchain_findRedeemedDeferredTransfersInRange" "', argument " "4"" of type '" "uint64_t""'");
    } 
    arg4 = static_cast< uint64_t >(val4);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::InMemory const *)arg1)->findRedeemedDeferredTransfersInRange(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new std::list< gradido::blockchain::DeferredRedeemedTransferPair >(result)), SWIGTYPE_p_std__listT_std__pairT_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_std__shared_ptrT_gradido__blockchain__TransactionEntry_t_t_t, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_getTransactionForId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchain_getTransactionForId.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_getTransactionForId" "', argument " "1"" of type '" "gradido::blockchain::InMemory const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InMemoryBlockchain_getTransactionForId" "', argument " "2"" of type '" "uint64_t""'");
    } 
    arg2 = static_cast< uint64_t >(val2);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::InMemory const *)arg1)->getTransactionForId(arg2);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_findByMessageId__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  memory::ConstBlockPtr arg2 ;
  gradido::blockchain::Filter *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_findByMessageId" "', argument " "1"" of type '" "gradido::blockchain::InMemory const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InMemoryBlockchain_findByMessageId" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_gradido__blockchain__Filter,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InMemoryBlockchain_findByMessageId" "', argument " "3"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InMemoryBlockchain_findByMessageId" "', argument " "3"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    arg3 = reinterpret_cast< gradido::blockchain::Filter * >(argp3);
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::InMemory const *)arg1)->findByMessageId(SWIG_STD_MOVE(arg2),(gradido::blockchain::Filter const &)*arg3);
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain_findByMessageId__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemory *arg1 = (gradido::blockchain::InMemory *) 0 ;
  memory::ConstBlockPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< gradido::blockchain::TransactionEntry > result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemory, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchain_findByMessageId" "', argument " "1"" of type '" "gradido::blockchain::InMemory const *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemory * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InMemoryBlockchain_findByMessageId" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        result = ((gradido::blockchain::InMemory const *)arg1)->findByMessageId(SWIG_STD_MOVE(arg2));
      } catch(const BlockchainOrderException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const CryptoConfig::MissingKeyException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch(const GradidoBlockchainException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::TransactionEntry *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__TransactionEntry, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::TransactionEntry>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchain__wrap_InMemoryBlockchain_findByMessageId(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InMemoryBlockchain_findByMessageId__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InMemoryBlockchain_findByMessageId__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InMemoryBlockchain_findByMessageId__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InMemoryBlockchain_findByMessageId__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function findByMessageId.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_exports_InMemoryBlockchain_templ(const Napi::CallbackInfo &info)
:_exports_Abstract_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class InMemoryBlockchain can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_InMemoryBlockchain_templ<SWIG_OBJ_WRAP>::_exports_InMemoryBlockchain_templ(bool, const Napi::CallbackInfo &info)
:_exports_Abstract_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchainProvider_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchainProvider_getInstance(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemoryProvider *result = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchainProvider_getInstance.");
    }
    
    
    
    
    
    
    {
      try {
        result = (gradido::blockchain::InMemoryProvider *)gradido::blockchain::InMemoryProvider::getInstance();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gradido__blockchain__InMemoryProvider, 0 |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchainProvider_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchainProvider_clear(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemoryProvider *arg1 = (gradido::blockchain::InMemoryProvider *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchainProvider_clear.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemoryProvider, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchainProvider_clear" "', argument " "1"" of type '" "gradido::blockchain::InMemoryProvider *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemoryProvider * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InMemoryBlockchainProvider_templ<SWIG_OBJ_WRAP>::_wrap_InMemoryBlockchainProvider_findBlockchain(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::blockchain::InMemoryProvider *arg1 = (gradido::blockchain::InMemoryProvider *) 0 ;
  std::string_view arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string tempString2 ;
  std::shared_ptr< gradido::blockchain::InMemory > result;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InMemoryBlockchainProvider_findBlockchain.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__blockchain__InMemoryProvider, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InMemoryBlockchainProvider_findBlockchain" "', argument " "1"" of type '" "gradido::blockchain::InMemoryProvider *""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::InMemoryProvider * >(argp1);{
      {
        if (info[0].IsString()) {
          tempString2 = info[0].ToString();
          arg2 = tempString2;
        } else {
          SWIG_exception_fail(SWIG_TypeError, "in method 'InMemoryBlockchainProvider_findBlockchain', argument is not a String");
        }
      }
    }
    
    
    
    
    
    {
      try {
        result = gradido_blockchain_InMemoryProvider_getBlockchain(arg1,SWIG_STD_MOVE(arg2));
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    {
      if(!result) {
        jsresult = env.Null();
      } else {
        jsresult = SWIG_NewPointerObj(const_cast<gradido::blockchain::InMemory *>((&result)->get()), SWIGTYPE_p_gradido__blockchain__InMemory, SWIG_POINTER_OWN |  0 );
        auto *owner = new std::shared_ptr< gradido::blockchain::InMemory>(*&result);
        auto finalizer = new SWIG_NAPI_Finalizer([owner](){
          delete owner;
          });
        SWIG_NAPI_SetFinalizer(env, jsresult, finalizer);
      }
    }
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_InMemoryBlockchainProvider_templ<SWIG_OBJ_WRAP>::_exports_InMemoryBlockchainProvider_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class InMemoryBlockchainProvider can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_InMemoryBlockchainProvider_templ<SWIG_OBJ_WRAP>::_exports_InMemoryBlockchainProvider_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionToJson__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::TransactionBody *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::toJson::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionToJson__SWIG_0.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__TransactionBody,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::TransactionBody const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::TransactionBody const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);{
      try {
        result = (gradido::interaction::toJson::Context *)new gradido::interaction::toJson::Context((gradido::data::TransactionBody const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionToJson__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::GradidoTransaction *arg1 = 0 ;
  gradido::interaction::toJson::BodyBytesType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gradido::interaction::toJson::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionToJson__SWIG_1.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);ecode2 = SWIG_AsVal_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InteractionToJson" "', argument " "2"" of type '" "gradido::interaction::toJson::BodyBytesType""'");
    } 
    arg2 = static_cast< gradido::interaction::toJson::BodyBytesType >(val2);{
      try {
        result = (gradido::interaction::toJson::Context *)new gradido::interaction::toJson::Context((gradido::data::GradidoTransaction const &)*arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionToJson__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::GradidoTransaction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::toJson::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionToJson__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);{
      try {
        result = (gradido::interaction::toJson::Context *)new gradido::interaction::toJson::Context((gradido::data::GradidoTransaction const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionToJson__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::ConfirmedTransaction *arg1 = 0 ;
  gradido::interaction::toJson::BodyBytesType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gradido::interaction::toJson::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionToJson__SWIG_3.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);ecode2 = SWIG_AsVal_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InteractionToJson" "', argument " "2"" of type '" "gradido::interaction::toJson::BodyBytesType""'");
    } 
    arg2 = static_cast< gradido::interaction::toJson::BodyBytesType >(val2);{
      try {
        result = (gradido::interaction::toJson::Context *)new gradido::interaction::toJson::Context((gradido::data::ConfirmedTransaction const &)*arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionToJson__SWIG_4(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::ConfirmedTransaction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::toJson::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionToJson__SWIG_4.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);{
      try {
        result = (gradido::interaction::toJson::Context *)new gradido::interaction::toJson::Context((gradido::data::ConfirmedTransaction const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionToJson__SWIG_5(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::blockchain::Filter *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::toJson::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionToJson__SWIG_5.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__blockchain__Filter,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionToJson" "', argument " "1"" of type '" "gradido::blockchain::Filter const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Filter * >(argp1);{
      try {
        result = (gradido::interaction::toJson::Context *)new gradido::interaction::toJson::Context((gradido::blockchain::Filter const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_exports_InteractionToJson_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__interaction__toJson__Context;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionToJson__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionToJson__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionToJson__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionToJson__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionToJson__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionToJson__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionToJson__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionToJson__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionToJson__SWIG_4(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionToJson__SWIG_4(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionToJson__SWIG_5(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionToJson__SWIG_5(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_InteractionToJson");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_exports_InteractionToJson_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_InteractionToJson_run__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::toJson::Context *arg1 = (gradido::interaction::toJson::Context *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__toJson__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionToJson_run" "', argument " "1"" of type '" "gradido::interaction::toJson::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::toJson::Context * >(argp1);ecode2 = SWIG_AsVal_bool(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InteractionToJson_run" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    
    
    
    
    {
      try {
        result = (arg1)->run(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_InteractionToJson_run__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::toJson::Context *arg1 = (gradido::interaction::toJson::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__toJson__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionToJson_run" "', argument " "1"" of type '" "gradido::interaction::toJson::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::toJson::Context * >(argp1);
    
    
    
    
    {
      try {
        result = (arg1)->run();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::_wrap_InteractionToJson__wrap_InteractionToJson_run(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionToJson_run__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionToJson_run__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionToJson_run__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionToJson_run__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function run.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_InteractionToJson_templ<SWIG_OBJ_WRAP>::~_exports_InteractionToJson_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::interaction::toJson::Context *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_InteractionCalculateAccountBalance_templ<SWIG_OBJ_WRAP>::_exports_InteractionCalculateAccountBalance_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_gradido__interaction__calculateAccountBalance__Context;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  gradido::blockchain::Abstract *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::calculateAccountBalance::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionCalculateAccountBalance.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__blockchain__Abstract,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionCalculateAccountBalance" "', argument " "1"" of type '" "gradido::blockchain::Abstract const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionCalculateAccountBalance" "', argument " "1"" of type '" "gradido::blockchain::Abstract const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::blockchain::Abstract * >(argp1);{
      try {
        result = (gradido::interaction::calculateAccountBalance::Context *)new gradido::interaction::calculateAccountBalance::Context((gradido::blockchain::Abstract const &)*arg1);
      } catch (const InsufficientBalanceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
    return;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
fail:
  
  return;
#endif
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_InteractionCalculateAccountBalance_templ<SWIG_OBJ_WRAP>::_exports_InteractionCalculateAccountBalance_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionCalculateAccountBalance_templ<SWIG_OBJ_WRAP>::_wrap_InteractionCalculateAccountBalance_run__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::calculateAccountBalance::Context *arg1 = (gradido::interaction::calculateAccountBalance::Context *) 0 ;
  gradido::data::ConstGradidoTransactionPtr arg2 ;
  Timepoint arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  GradidoUnit result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__calculateAccountBalance__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "1"" of type '" "gradido::interaction::calculateAccountBalance::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::calculateAccountBalance::Context * >(argp1);{
      {
        gradido::data::GradidoTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "2"" of type '" "gradido::data::GradidoTransaction""'");
        }
        arg2 = std::shared_ptr<const gradido::data::GradidoTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(info[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "4"" of type '" "uint64_t""'");
    } 
    arg4 = static_cast< uint64_t >(val4);
    
    
    
    
    {
      try {
        result = (arg1)->run(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
      } catch (const InsufficientBalanceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionCalculateAccountBalance_templ<SWIG_OBJ_WRAP>::_wrap_InteractionCalculateAccountBalance_run__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::calculateAccountBalance::Context *arg1 = (gradido::interaction::calculateAccountBalance::Context *) 0 ;
  memory::ConstBlockPtr arg2 ;
  Timepoint arg3 ;
  uint64_t arg4 ;
  std::string_view arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  std::string tempString5 ;
  GradidoUnit result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__calculateAccountBalance__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "1"" of type '" "gradido::interaction::calculateAccountBalance::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::calculateAccountBalance::Context * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(info[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "4"" of type '" "uint64_t""'");
    } 
    arg4 = static_cast< uint64_t >(val4);{
      {
        if (info[3].IsString()) {
          tempString5 = info[3].ToString();
          arg5 = tempString5;
        } else {
          SWIG_exception_fail(SWIG_TypeError, "in method 'InteractionCalculateAccountBalance_run', argument is not a String");
        }
      }
    }
    
    
    
    
    
    {
      try {
        result = (arg1)->run(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,SWIG_STD_MOVE(arg5));
      } catch (const InsufficientBalanceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionCalculateAccountBalance_templ<SWIG_OBJ_WRAP>::_wrap_InteractionCalculateAccountBalance_run__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::calculateAccountBalance::Context *arg1 = (gradido::interaction::calculateAccountBalance::Context *) 0 ;
  memory::ConstBlockPtr arg2 ;
  Timepoint arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  GradidoUnit result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__calculateAccountBalance__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "1"" of type '" "gradido::interaction::calculateAccountBalance::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::calculateAccountBalance::Context * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(info[2], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "4"" of type '" "uint64_t""'");
    } 
    arg4 = static_cast< uint64_t >(val4);
    
    
    
    
    {
      try {
        result = (arg1)->run(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
      } catch (const InsufficientBalanceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionCalculateAccountBalance_templ<SWIG_OBJ_WRAP>::_wrap_InteractionCalculateAccountBalance_run__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::calculateAccountBalance::Context *arg1 = (gradido::interaction::calculateAccountBalance::Context *) 0 ;
  memory::ConstBlockPtr arg2 ;
  Timepoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GradidoUnit result;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__calculateAccountBalance__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "1"" of type '" "gradido::interaction::calculateAccountBalance::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::calculateAccountBalance::Context * >(argp1);{
      {
        memory::Block *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_memory__Block,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InteractionCalculateAccountBalance_run" "', argument " "2"" of type '" "memory::Block""'");
        }
        arg2 = std::shared_ptr<const memory::Block>(plain_ptr, SWIG_null_deleter());
      }
    }
    {
      {
        if(!info[1].IsDate()) {
          SWIG_exception_fail(SWIG_TypeError, "Expected a Date object");
        }
        arg3 = Timepoint(std::chrono::milliseconds(static_cast<uint64_t>(info[1].As<Napi::Date>().ValueOf())));
      }
    }
    
    
    
    
    
    {
      try {
        result = (arg1)->run(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch (const InsufficientBalanceException& e) {
        SWIG_exception(SWIG_RuntimeError, e.getFullString().data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = SWIG_NewPointerObj((new GradidoUnit(result)), SWIGTYPE_p_GradidoUnit, SWIG_POINTER_OWN |  0 );
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionCalculateAccountBalance_templ<SWIG_OBJ_WRAP>::_wrap_InteractionCalculateAccountBalance__wrap_InteractionCalculateAccountBalance_run(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionCalculateAccountBalance_run__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionCalculateAccountBalance_run__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 4 && static_cast<int>(info.Length()) <= 4) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionCalculateAccountBalance_run__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionCalculateAccountBalance_run__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionCalculateAccountBalance_run__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionCalculateAccountBalance_run__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionCalculateAccountBalance_run__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionCalculateAccountBalance_run__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function run.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_InteractionCalculateAccountBalance_templ<SWIG_OBJ_WRAP>::~_exports_InteractionCalculateAccountBalance_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::interaction::calculateAccountBalance::Context *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionValidate__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::TransactionBody *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::validate::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionValidate__SWIG_0.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__TransactionBody,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionValidate" "', argument " "1"" of type '" "gradido::data::TransactionBody const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionValidate" "', argument " "1"" of type '" "gradido::data::TransactionBody const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::TransactionBody * >(argp1);{
      try {
        result = (gradido::interaction::validate::Context *)new gradido::interaction::validate::Context((gradido::data::TransactionBody const &)*arg1);
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionValidate__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::GradidoTransaction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::validate::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionValidate__SWIG_1.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__GradidoTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionValidate" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionValidate" "', argument " "1"" of type '" "gradido::data::GradidoTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::GradidoTransaction * >(argp1);{
      try {
        result = (gradido::interaction::validate::Context *)new gradido::interaction::validate::Context((gradido::data::GradidoTransaction const &)*arg1);
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_overloaded_ctor
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_new_InteractionValidate__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  gradido::data::ConfirmedTransaction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gradido::interaction::validate::Context *result;
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    NAPI_CHECK_RESULT(info.This().ToObject(), self);
    this->owned = true;
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InteractionValidate__SWIG_2.");
    }
    res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InteractionValidate" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InteractionValidate" "', argument " "1"" of type '" "gradido::data::ConfirmedTransaction const &""'"); 
    }
    arg1 = reinterpret_cast< gradido::data::ConfirmedTransaction * >(argp1);{
      try {
        result = (gradido::interaction::validate::Context *)new gradido::interaction::validate::Context((gradido::data::ConfirmedTransaction const &)*arg1);
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    this->self = result;
    
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
#endif
  
  return Napi::Value();
}


// js_ctor_dispatcher
template <typename SWIG_OBJ_WRAP>
_exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_exports_InteractionValidate_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  Napi::Object self;
  NAPI_CHECK_RESULT(info.This().ToObject(), self);
  this->info = SWIGTYPE_p_gradido__interaction__validate__Context;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  
  // switch all cases by means of series of if-returns.
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionValidate__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionValidate__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionValidate__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionValidate__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  // js_ctor_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      _wrap_new_InteractionValidate__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return;
#else
    _wrap_new_InteractionValidate__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_Error(SWIG_ERROR, "Illegal arguments for construction of _exports_InteractionValidate");
  
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
  return;
#endif
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_exports_InteractionValidate_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_InteractionValidate_run__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::validate::Context *arg1 = (gradido::interaction::validate::Context *) 0 ;
  gradido::interaction::validate::Type arg2 ;
  std::string_view arg3 ;
  gradido::blockchain::AbstractProvider *arg4 = (gradido::blockchain::AbstractProvider *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string tempString3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__validate__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionValidate_run" "', argument " "1"" of type '" "gradido::interaction::validate::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::validate::Context * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InteractionValidate_run" "', argument " "2"" of type '" "gradido::interaction::validate::Type""'");
    } 
    arg2 = static_cast< gradido::interaction::validate::Type >(val2);{
      {
        if (info[1].IsString()) {
          tempString3 = info[1].ToString();
          arg3 = tempString3;
        } else {
          SWIG_exception_fail(SWIG_TypeError, "in method 'InteractionValidate_run', argument is not a String");
        }
      }
    }
    res4 = SWIG_ConvertPtr(info[2], &argp4,SWIGTYPE_p_gradido__blockchain__AbstractProvider, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InteractionValidate_run" "', argument " "4"" of type '" "gradido::blockchain::AbstractProvider *""'"); 
    }
    arg4 = reinterpret_cast< gradido::blockchain::AbstractProvider * >(argp4);
    
    
    
    
    {
      try {
        (arg1)->run(arg2,SWIG_STD_MOVE(arg3),arg4);
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_InteractionValidate_run__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::validate::Context *arg1 = (gradido::interaction::validate::Context *) 0 ;
  gradido::interaction::validate::Type arg2 ;
  std::string_view arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string tempString3 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__validate__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionValidate_run" "', argument " "1"" of type '" "gradido::interaction::validate::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::validate::Context * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InteractionValidate_run" "', argument " "2"" of type '" "gradido::interaction::validate::Type""'");
    } 
    arg2 = static_cast< gradido::interaction::validate::Type >(val2);{
      {
        if (info[1].IsString()) {
          tempString3 = info[1].ToString();
          arg3 = tempString3;
        } else {
          SWIG_exception_fail(SWIG_TypeError, "in method 'InteractionValidate_run', argument is not a String");
        }
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->run(arg2,SWIG_STD_MOVE(arg3));
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_InteractionValidate_run__SWIG_2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::validate::Context *arg1 = (gradido::interaction::validate::Context *) 0 ;
  gradido::interaction::validate::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__validate__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionValidate_run" "', argument " "1"" of type '" "gradido::interaction::validate::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::validate::Context * >(argp1);ecode2 = SWIG_AsVal_int(info[0], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InteractionValidate_run" "', argument " "2"" of type '" "gradido::interaction::validate::Type""'");
    } 
    arg2 = static_cast< gradido::interaction::validate::Type >(val2);
    
    
    
    
    {
      try {
        (arg1)->run(arg2);
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_InteractionValidate_run__SWIG_3(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::validate::Context *arg1 = (gradido::interaction::validate::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__validate__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionValidate_run" "', argument " "1"" of type '" "gradido::interaction::validate::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::validate::Context * >(argp1);
    
    
    
    
    {
      try {
        (arg1)->run();
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_InteractionValidate__wrap_InteractionValidate_run(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 3 && static_cast<int>(info.Length()) <= 3) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionValidate_run__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionValidate_run__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 2 && static_cast<int>(info.Length()) <= 2) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionValidate_run__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionValidate_run__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionValidate_run__SWIG_2(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionValidate_run__SWIG_2(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  // js_function_dispatch_case
  if(static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_InteractionValidate_run__SWIG_3(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
    return jsresult;
#else
    _wrap_InteractionValidate_run__SWIG_3(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }
  
  SWIG_Error(SWIG_ERROR, "Illegal arguments for function run.");
#ifndef NAPI_CPP_EXCEPTIONS
  goto fail;
fail:
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_InteractionValidate_setSenderPreviousConfirmedTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::validate::Context *arg1 = (gradido::interaction::validate::Context *) 0 ;
  gradido::data::ConfirmedTransactionPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionValidate_setSenderPreviousConfirmedTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__validate__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionValidate_setSenderPreviousConfirmedTransaction" "', argument " "1"" of type '" "gradido::interaction::validate::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::validate::Context * >(argp1);{
      {
        gradido::data::ConfirmedTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InteractionValidate_setSenderPreviousConfirmedTransaction" "', argument " "2"" of type '" "gradido::data::ConfirmedTransaction""'");
        }
        arg2 = std::shared_ptr< gradido::data::ConfirmedTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->setSenderPreviousConfirmedTransaction(SWIG_STD_MOVE(arg2));
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::_wrap_InteractionValidate_setRecipientPreviousConfirmedTransaction(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  gradido::interaction::validate::Context *arg1 = (gradido::interaction::validate::Context *) 0 ;
  gradido::data::ConfirmedTransactionPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  
#ifdef NAPI_CPP_EXCEPTIONS
  try {
#endif
    
    if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
      SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_InteractionValidate_setRecipientPreviousConfirmedTransaction.");
    }
    
    res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_gradido__interaction__validate__Context, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InteractionValidate_setRecipientPreviousConfirmedTransaction" "', argument " "1"" of type '" "gradido::interaction::validate::Context *""'"); 
    }
    arg1 = reinterpret_cast< gradido::interaction::validate::Context * >(argp1);{
      {
        gradido::data::ConfirmedTransaction *plain_ptr;
        int res = SWIG_ConvertPtr(info[0], reinterpret_cast<void**>(&plain_ptr), SWIGTYPE_p_gradido__data__ConfirmedTransaction,  0 );
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "InteractionValidate_setRecipientPreviousConfirmedTransaction" "', argument " "2"" of type '" "gradido::data::ConfirmedTransaction""'");
        }
        arg2 = std::shared_ptr< gradido::data::ConfirmedTransaction>(plain_ptr, SWIG_null_deleter());
      }
    }
    
    
    
    
    
    {
      try {
        (arg1)->setRecipientPreviousConfirmedTransaction(SWIG_STD_MOVE(arg2));
      } catch (const gradido::interaction::validate::WrongAddressTypeException& e) {
        std::string message = "WrongAddressTypeException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::InvalidCreationException& e) {
        std::string message = "InvalidCreationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const InsufficientBalanceException& e) {
        std::string message = "InsufficientBalanceException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::AddressAlreadyExistException& e) {
        std::string message = "AddressAlreadyExistException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::PairingTransactionNotMatchException& e) {
        std::string message = "PairingTransactionNotMatchException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationRequiredSignMissingException& e) {
        std::string message = "TransactionValidationRequiredSignMissingException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());        
      } catch (const gradido::interaction::validate::TransactionValidationMissingSignException& e) {
        std::string message = "TransactionValidationMissingSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationForbiddenSignException& e) {
        std::string message = "TransactionValidationForbiddenSignException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidSignatureException& e) {
        std::string message = "TransactionValidationInvalidSignatureException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationInvalidInputException& e) {
        std::string message = "TransactionValidationInvalidInputException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const gradido::interaction::validate::TransactionValidationException& e) {
        std::string message = "TransactionValidationException: " + e.getFullString();
        SWIG_exception(SWIG_RuntimeError, message.data());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    
    
    
    jsresult = env.Undefined();
    
    
    return jsresult;
#ifdef NAPI_CPP_EXCEPTIONS
  } catch (...) {
    std::rethrow_exception(std::current_exception());
  }
#else
  goto fail;
fail:
  
#endif
  return Napi::Value();
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_InteractionValidate_templ<SWIG_OBJ_WRAP>::~_exports_InteractionValidate_templ() {
  this->SWIG_Finalize();
  auto arg1 = reinterpret_cast<gradido::interaction::validate::Context *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = SWIG_NULLPTR;
  }
}


